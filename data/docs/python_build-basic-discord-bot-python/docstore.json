{"docstore/data": {"2e121daa-4a9a-4985-8fb3-27011a609587": {"__data__": {"id_": "2e121daa-4a9a-4985-8fb3-27011a609587", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/build-basic-discord-bot-python.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "89c19762-d2e6-4496-bd80-c90acb163455", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/build-basic-discord-bot-python.html"}, "hash": "e68df94edade00eebdd80daa12046e4feedecec97c837e9347a419205bc054dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70d7ecb6-3c05-449d-ac78-991f9b763c9d", "node_type": "1", "metadata": {}, "hash": "e081116d3571318c70c3f9c39b29be3a859090f1252f1564ffe62fe4a08632fc", "class_name": "RelatedNodeInfo"}}, "hash": "4903467ec2cbd2947540f4ccdddbdc652e003f9ada6a08198ee9efbbee201357", "text": "async\n\ndef\n\non_message\n\nmessage\n\nif\n\nmessage\n\nauthor\n\n!=\n\nclient\n\nuser\n\nawait\n\nmessage\n\nchannel\n\nsend\n\nmessage\n\ncontent\n\nmy_secret\n\nos\n\nenviron\n\n'DISCORD_BOT_SECRET'\n\nclient\n\nrun\n\nmy_secret\n\nLet's tear this apart line by line to see what it does.\n\nLines 1-2 import the discord library that we installed earlier and the built-in operating system library, which we'll need to access our bot's secret token.\n\nIn line 4, we create a Discord Client. This is a Python object that we'll use to send various commands to Discord's servers.\n\nIn line 6, we say we are defining an event for our client. This line is a Python decorator, which will take the function directly below it and modify it in some way. The Discord bot is going to run asynchronously, which might be a bit confusing if you're used to running standard Python. We won't go into asynchronous Python in depth here, but if you're interested in what this is and why it's used, there's a good guide over at FreeCodeCamp. In short, instead of running the code in our file from top to bottom, we'll be running pieces of code in response to specific events.\n\nIn lines 7-9 we define what kind of event we want to respond to, and what the response should be. In this case, we're saying that in response to the on_ready event (when our bot joins a server successfully), we should output some information server-side (i.e. this will be displayed in our Repl's output, but not sent as a message through to Discord). We'll print a simple I'm in message to see that the bot is there and print our bot's user id (if you're running multiple bots, this will make it easier to work out who's doing what).\n\nLines 11-14 are similar, but instead of responding to an on_ready event, we tell our bot how to handle new messages. Line 13 says we only want to respond to messages that aren't from us (otherwise our bot will keep responding to himself -- you can remove this line to see why that's a problem), and line 14 says we'll send a new message to the same channel where we received a message (message.channel) and the content we'll send will be the same message that we received, but backwards (message.content[::-1] - ::-1 is a slightly odd but useful Python idiom to reverse a string or list).\n\nThe last two lines get our secret token from the environment variables that we set up earlier and then tell our bot to start up.\n\nPress the \"Run\" button again and you should see your bot reporting a successful channel join in the Repl output.\n\nOpen Discord, and from within the server we created earlier, select your ReplBotApplication from the pane on the right-hand side of the screen.\n\nOnce you have selected this, you will be able to send a message (by typing into the box highlighted below) and see your bot respond!\n\nThe bot responds each time, reversing the text we enter.\n\nKeeping our bot alive\u200b\n\nYour bot can now respond to messages, but only for as long as your Repl is running. If you close your browser tab or shut down your computer, your bot will stop and no longer respond to messages on Discord.\n\nReplit will keep your code running after you close the browser tab only if you are running a web server and you have a Deployment framework.\n\nCreate a new file in your project called keep_alive.py and add the following code:\n\nfrom\n\nflask\n\nimport\n\nFlask\n\nfrom\n\nthreading\n\nimport\n\nThread\n\napp\n\nFlask\n\n''\n\n@app\n\nroute\n\n'/'\n\ndef\n\nhome\n\nreturn\n\n\"I'm alive\"\n\ndef\n\nrun\n\napp\n\nrun\n\nhost\n\n'0.0.0.0'\n\nport\n\n8080\n\ndef\n\nkeep_alive\n\nThread\n\ntarget\n\nrun\n\nstart\n\nWe won't go over this in detail as it's not central to our bot, but here we start a web server that will return \"I'm alive\" if anyone visits it, and we'll provide a method to start this in a new thread (leaving the main thread for our Repl bot).\n\nIn our main.py file, we need to add an import for this server at the top. Add the following line near the top of main.py.\n\nfrom\n\nkeep_alive\n\nimport\n\nkeep_alive\n\nIn main.py we need to start up the web server just before you start up the bot.", "start_char_idx": 0, "end_char_idx": 3983, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70d7ecb6-3c05-449d-ac78-991f9b763c9d": {"__data__": {"id_": "70d7ecb6-3c05-449d-ac78-991f9b763c9d", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/build-basic-discord-bot-python.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "89c19762-d2e6-4496-bd80-c90acb163455", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/build-basic-discord-bot-python.html"}, "hash": "e68df94edade00eebdd80daa12046e4feedecec97c837e9347a419205bc054dd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e121daa-4a9a-4985-8fb3-27011a609587", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/build-basic-discord-bot-python.html"}, "hash": "4903467ec2cbd2947540f4ccdddbdc652e003f9ada6a08198ee9efbbee201357", "class_name": "RelatedNodeInfo"}}, "hash": "e081116d3571318c70c3f9c39b29be3a859090f1252f1564ffe62fe4a08632fc", "text": "In our main.py file, we need to add an import for this server at the top. Add the following line near the top of main.py.\n\nfrom\n\nkeep_alive\n\nimport\n\nkeep_alive\n\nIn main.py we need to start up the web server just before you start up the bot. Add this line of code to main.py, just before the line with my_secret = os.environ['DISCORD_BOT_SECRET']:\n\nkeep_alive\n\nAfter doing this and hitting the green \"Run\" button again, you should see some changes to your Repl. For one, you'll see a new pane in the top right which shows the web output from your server. We can see that visiting our Repl now returns a basic web page showing the \"I'm alive\" string that we told our web server to return by default. In the bottom-right pane, you can also see some additional output from Flask starting up and running continuously, listening for requests.\n\nNow your bot will stay alive even after closing your browser or shutting down your development machine. Repl will still clean up your server and kill your bot after about one hour of inactivity, so if you don't use your bot for a while, you'll have to log into Repl and start the bot up again or use a Deployments repl to keep it running 24/7.\n\nForking and extending our basic bot\u200b\n\nThis is not a very useful bot as is, but the possibilities are only limited by your creativity now! You can have your bot receive input from a user, process the input, and respond in any way you choose. In fact, with the basic input and output that we've demonstrated, we have most of the components of any modern computer, all of which are based on the Von Neumann architecture (we could easily add the missing memory by having our bot write to a file, or with a bit more effort by linking an SQLite database for persistent storage).\n\nIf you followed along with this tutorial, you'll have your own basic Repl bot to play around with and extend. If you were simply reading, you can easily fork this bot at https://replit.com/@ritza/discord-bot and extend it how you want. Happy hacking!\n\nIf you're stuck for ideas, why not link up your Discord bot to the Twitch API to get notified when your favourite streamers are online, or build a text adventure.\n\nYou can also check out this tutorial, where we build exactly the same bot but using Node.js instead of Python. Even if you prefer Python, it's often a good idea to build the same project in two languages so that you can better appreciate the differences and similarities.\n\nFurther Reading:\u200b\n\nIf you are interested, here are some more Discord bot tutorials:\n\nRole assignment bot with Python\n\nYou can find our repl below:\n\n< Previous: Python\n\nNext: Discord meme maker bot with Python >\n\nWas this helpful?\n\nLast updated on Nov 2, 2023\n\nOverview and requirementsCreating a bot in Discord and getting a tokenCreating a Discord serverAdding your Discord bot to your Discord server\n\nCreating a Repl and installing our Discord dependencies\n\nSetting up authorization for our bot\n\nKeeping our bot alive\n\nForking and extending our basic bot\n\nFurther Reading:", "start_char_idx": 3743, "end_char_idx": 6763, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"89c19762-d2e6-4496-bd80-c90acb163455": {"node_ids": ["2e121daa-4a9a-4985-8fb3-27011a609587", "70d7ecb6-3c05-449d-ac78-991f9b763c9d"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/build-basic-discord-bot-python.html"}}}, "docstore/metadata": {"2e121daa-4a9a-4985-8fb3-27011a609587": {"doc_hash": "4903467ec2cbd2947540f4ccdddbdc652e003f9ada6a08198ee9efbbee201357", "ref_doc_id": "89c19762-d2e6-4496-bd80-c90acb163455"}, "70d7ecb6-3c05-449d-ac78-991f9b763c9d": {"doc_hash": "e081116d3571318c70c3f9c39b29be3a859090f1252f1564ffe62fe4a08632fc", "ref_doc_id": "89c19762-d2e6-4496-bd80-c90acb163455"}}}