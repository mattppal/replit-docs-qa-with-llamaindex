{"docstore/data": {"8b97c646-a141-422b-a069-58c4c815a02f": {"__data__": {"id_": "8b97c646-a141-422b-a069-58c4c815a02f", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5acbec9c-d1a0-472d-96b3-5e66fe79801d", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "hash": "413f37f712d437dc7fb9953e28ee5016fdffec255868ac6da8815f9d7871c431", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "92893a6c-46ae-45c0-bdbb-de3efaf6a508", "node_type": "1", "metadata": {}, "hash": "581cea82570602d39f6b517004d616888add22c176153ca941b910b3042f2013", "class_name": "RelatedNodeInfo"}}, "hash": "e45373b3c782a950b3b818a4fe2ddc773efecaf5a72ca1d45fb53937fed10d4e", "text": "Model\n\nid\n\ndb\n\nColumn\n\ndb\n\nInteger\n\nprimary_key\n\nTrue\n\nautoincrement\n\nTrue\n\ntext\n\ndb\n\nColumn\n\ndb\n\nText\n\ndone\n\ndb\n\nColumn\n\ndb\n\nBoolean\n\ndateAdded\n\ndb\n\nColumn\n\ndb\n\nDateTime\n\ndefault\n\ndatetime\n\nnow\n\ndef\n\ncreate_task\n\ntext\n\ntask\n\nTask\n\ntext\n\ntext\n\ndb\n\nsession\n\nadd\n\ntask\n\ndb\n\nsession\n\ncommit\n\ndb\n\nsession\n\nrefresh\n\ntask\n\ndef\n\nread_tasks\n\nreturn\n\ndb\n\nsession\n\nquery\n\nTask\n\nall\n\ndef\n\nupdate_task\n\ntask_id\n\ntext\n\ndone\n\ndb\n\nsession\n\nquery\n\nTask\n\nfilter_by\n\nid\n\ntask_id\n\nupdate\n\n\"text\"\n\ntext\n\n\"done\"\n\nTrue\n\nif\n\ndone\n\n==\n\n\"on\"\n\nelse\n\nFalse\n\ndb\n\nsession\n\ncommit\n\ndef\n\ndelete_task\n\ntask_id\n\ndb\n\nsession\n\nquery\n\nTask\n\nfilter_by\n\nid\n\ntask_id\n\ndelete\n\ndb\n\nsession\n\ncommit\n\ndef\n\ncheck_team_authorized\n\nreplit_user_teams\n\nauthorized_teams\n\nteams\n\nset\n\nreplit_user_teams\n\nsplit\n\n\",\"\n\nuser_authorized_teams\n\nteams\n\nintersection\n\nauthorized_teams\n\nreturn\n\nlen\n\nuser_authorized_teams\n\nNote the line authorized_teams = set([os.getenv(\"REPL_OWNER\")]) which gets the repl owner (that is, the team username that the repl belongs to). The check_team_authorized function compares all the teams that a user belongs to with this \"authorized teams\" list and only lets them in if there's a match, so you can also hardcode other teams in here if you need others to access your app.\n\nAdding routes to our application\u200b\n\nWe want our users to be able to interact with different routes of our application.\n\n/: the main page of our application will show the tasks and let users edit them or add new ones.\n\n/login: if a user is not logged in, they'll be redirect to a \"Log in with Replit\" page.\n\n/edit/<taskid>: users won't visit this direclty, but the app will post edit requests from the main page here.\n\n/delete/<taskid>: similar to the above, if the user deletes a task, the request will be forwarded to this route.\n\nAdd the following code to the end of your main.py file:\n\n@app\n\nroute\n\n\"/edit/<task_id>\"\n\nmethods\n\n\"POST\"\n\ndef\n\nedit_task\n\ntask_id\n\nupdate_task\n\ntask_id\n\ntext\n\nrequest\n\nform\n\n'text'\n\ndone\n\nrequest\n\nform\n\n'done'\n\nreturn\n\nredirect\n\n\"/\"\n\n@app\n\nroute\n\n\"/delete/<task_id>\"\n\nmethods\n\n'POST'\n\ndef\n\nremove_task\n\ntask_id\n\ndelete_task\n\ntask_id\n\nreturn\n\nredirect\n\n\"/\"\n\n@app\n\nroute\n\n\"/login\"\n\nmethods\n\n\"GET\"\n\n\"POST\"\n\ndef\n\nlogin\n\nuser_id\n\nrequest\n\nheaders\n\n'X-Replit-User-Id'\n\nif\n\nuser_id\n\nreturn\n\nredirect\n\n\"/\"\n\nreturn\n\nrender_template\n\n\"login.html\"\n\n@app\n\nroute\n\n\"/\"\n\nmethods\n\n\"GET\"\n\n\"POST\"\n\ndef\n\nindex\n\nuser_id\n\nrequest\n\nheaders\n\n'X-Replit-User-Id'\n\nif\n\nnot\n\nuser_id\n\nreturn\n\nredirect\n\n\"/login\"\n\nteams_header\n\nrequest\n\nheaders\n\n'X-Replit-User-Teams'\n\nuser_in_team\n\ncheck_team_authorized\n\nteams_header\n\nauthorized_teams\n\nif\n\nnot\n\nuser_in_team\n\nreturn\n\nrender_template\n\n\"unauthorized.html\"\n\nif\n\nrequest\n\nmethod\n\n==\n\n\"POST\"\n\ncreate_task\n\nrequest\n\nform\n\n'text'\n\nreturn\n\nrender_template\n\n\"index.html\"\n\ntasks\n\nread_tasks\n\nuser_id\n\nrequest\n\nheaders\n\n'X-Replit-User-Id'\n\nuser_name\n\nrequest\n\nheaders\n\n'X-Replit-User-Name'\n\nuser_roles\n\nrequest\n\nheaders\n\n'X-Replit-User-Roles'\n\nif\n\n__name__\n\n==\n\n\"__main__\"\n\ndb\n\ncreate_all\n\napp\n\nrun\n\nhost\n\n'0.0.0.0'\n\ndebug\n\nTrue\n\nThese routes call the matching CRUD functions we wrote earlier, passing in the data from the user where relevant. Note that we use the X-Replit-User-ID header to validate that the user is logged into Replit, and the X-Replit-User-Teams header to check which teams they belong to.\n\nAdding the frontend\u200b\n\nWe'll have three pages in our application:\n\nindex.html: the main page that shows existing tasks and allows the user to interact with tasks.\n\nlogin.html: a page to show the \"Log in with Replit\" button.\n\nunauthorized.html: we'll show this to any user who is not part of our team but has logged in with a valid Replit account.\n\nCreate all three of these files in a folder named exactly templates.", "start_char_idx": 0, "end_char_idx": 3720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "92893a6c-46ae-45c0-bdbb-de3efaf6a508": {"__data__": {"id_": "92893a6c-46ae-45c0-bdbb-de3efaf6a508", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5acbec9c-d1a0-472d-96b3-5e66fe79801d", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "hash": "413f37f712d437dc7fb9953e28ee5016fdffec255868ac6da8815f9d7871c431", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b97c646-a141-422b-a069-58c4c815a02f", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "hash": "e45373b3c782a950b3b818a4fe2ddc773efecaf5a72ca1d45fb53937fed10d4e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3ee00d1e-33b6-4e8f-b6ff-0c8f796538dc", "node_type": "1", "metadata": {}, "hash": "095201c990d690c42285e8cc2fc60e8a7978504aa915d96948b8cff2c362393c", "class_name": "RelatedNodeInfo"}}, "hash": "581cea82570602d39f6b517004d616888add22c176153ca941b910b3042f2013", "text": "Note that we use the X-Replit-User-ID header to validate that the user is logged into Replit, and the X-Replit-User-Teams header to check which teams they belong to.\n\nAdding the frontend\u200b\n\nWe'll have three pages in our application:\n\nindex.html: the main page that shows existing tasks and allows the user to interact with tasks.\n\nlogin.html: a page to show the \"Log in with Replit\" button.\n\nunauthorized.html: we'll show this to any user who is not part of our team but has logged in with a valid Replit account.\n\nCreate all three of these files in a folder named exactly templates. Flask looks in this folder specifically whenever you call the render_template function, so don't call it something else.\n\nIn the index.html file, add the following code:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nlang\n\nen\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\n/>\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width, initial-scale=1\n\n/>\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://unpkg.com/@picocss/pico@latest/css/pico.min.css\n\n/>\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\n/static/style.css\n\n/>\n\nscript\n\ntype\n\ntext/javascript\n\nfunction\n\nredirect\n\nlink\n\nwindow\n\nlocation\n\nhref\n\nlink\n\n</\n\nscript\n\ntitle\n\ntodo app\n\n</\n\ntitle\n\n</\n\nhead\n\nbody\n\nheader\n\nShared Task Tracking\n\n</\n\nheader\n\nmain\n\nclass\n\ncontainer\n\nh1\n\nOur tasks\n\n</\n\nh1\n\nAdd tasks below. Your team can add new tasks, or edit or delete existing\n\nones. You all see the same tasks.\n\n</\n\nform\n\nmethod\n\nPOST\n\naction\n\ndiv\n\ninput\n\ntype\n\ntext\n\nname\n\ntext\n\nclass\n\nform-control\n\nplaceholder\n\nAdd a new TODO item\n\n/>\n\ndiv\n\nbutton\n\ntype\n\nsubmit\n\nvalue\n\nupdate\n\nCreate new\n\n</\n\nbutton\n\n</\n\ndiv\n\n</\n\ndiv\n\n</\n\nform\n\nh2\n\nTask List\n\n</\n\nh2\n\n{% for task in tasks %}\n\nform\n\nmethod\n\nPOST\n\naction\n\n/edit/{{task.id}}\n\ndiv\n\nclass\n\ntask\n\ndiv\n\nclass\n\ntask-input\n\ninput\n\ntype\n\ntext\n\ntitle\n\n{{task.dateAdded}}\n\nvalue\n\n{{task.text}}\n\nname\n\ntext\n\n/>\n\n</\n\ndiv\n\ndiv\n\nclass\n\nupdate-btn\n\nbutton\n\ntype\n\nsubmit\n\nvalue\n\nupdate\n\nUpdate\n\n</\n\nbutton\n\n</\n\ndiv\n\ndiv\n\nclass\n\nupdate-btn\n\nbutton\n\ntype\n\nsubmit\n\nformaction\n\n/delete/{{task.id}}\n\n</\n\nbutton\n\n</\n\ndiv\n\n</\n\ndiv\n\n</\n\nform\n\n{% endfor %}\n\n</\n\nmain\n\n</\n\nbody\n\n</\n\nhtml\n\nNote how Flask uses Jinja templates, which lets us mix some Python-like functionality into our frontend, using tags such as {% for task in tasks %}. Our main loop goes through all the existing tasks and displays them. It adds update and delete buttons referencing each task.id so that these can be passed to the backend and our server-side code can perform the necessary operations on our database.\n\nIn login.html add:\n\n<!\n\ndoctype\n\nhtml\n\nhtml\n\nlang\n\nen\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width, initial-scale=1\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://unpkg.com/@picocss/pico@latest/css/pico.min.css\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\n/static/style.css\n\nscript\n\ntype\n\ntext/javascript\n\nfunction\n\nredirect\n\nlink\n\nwindow\n\nlocation\n\nhref\n\nlink\n\n</\n\nscript\n\ntitle\n\nshared tasks app\n\n</\n\ntitle\n\n</\n\nhead\n\nbody\n\nh1\n\nHello! Please log in.\n\n</\n\nh1\n\ndiv\n\nscript\n\nauthed\n\nlocation.reload()\n\nsrc\n\nhttps://auth.turbio.repl.co/script.js\n\n</\n\nscript\n\n</\n\ndiv\n\n</\n\nmain\n\n</\n\nbody\n\n</\n\nhtml\n\nAnd in unauthorized.html add:\n\nh1\n\nUnauthorized\n\n</\n\nh1\n\nYou signed in, but you're not authorized to access this page\n\n</\n\nNote how we pull in the pico.css CSS framework in our template files. This means that the application already looks better than using plain HTML, but we'll add few lines of custom CSS to tweak the look a bit further.\n\nCreate a new folder called static and add a file inside it called style.css.", "start_char_idx": 3138, "end_char_idx": 6641, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3ee00d1e-33b6-4e8f-b6ff-0c8f796538dc": {"__data__": {"id_": "3ee00d1e-33b6-4e8f-b6ff-0c8f796538dc", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5acbec9c-d1a0-472d-96b3-5e66fe79801d", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "hash": "413f37f712d437dc7fb9953e28ee5016fdffec255868ac6da8815f9d7871c431", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "92893a6c-46ae-45c0-bdbb-de3efaf6a508", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}, "hash": "581cea82570602d39f6b517004d616888add22c176153ca941b910b3042f2013", "class_name": "RelatedNodeInfo"}}, "hash": "095201c990d690c42285e8cc2fc60e8a7978504aa915d96948b8cff2c362393c", "text": "Please log in.\n\n</\n\nh1\n\ndiv\n\nscript\n\nauthed\n\nlocation.reload()\n\nsrc\n\nhttps://auth.turbio.repl.co/script.js\n\n</\n\nscript\n\n</\n\ndiv\n\n</\n\nmain\n\n</\n\nbody\n\n</\n\nhtml\n\nAnd in unauthorized.html add:\n\nh1\n\nUnauthorized\n\n</\n\nh1\n\nYou signed in, but you're not authorized to access this page\n\n</\n\nNote how we pull in the pico.css CSS framework in our template files. This means that the application already looks better than using plain HTML, but we'll add few lines of custom CSS to tweak the look a bit further.\n\nCreate a new folder called static and add a file inside it called style.css.\n\nAdd the following code to this new file:\n\n@media\n\nonly\n\nscreen\n\nand\n\nprefers-color-scheme\n\ndark\n\n:root\n\n:not\n\ndata-theme\n\n\"light\"\n\n--primary\n\n#ffb300\n\n--primary-hover\n\n#ffc107\n\n--primary-focus\n\nrgba\n\n255\n\n179\n\n0.25\n\n--primary-inverse\n\nrgba\n\n0.75\n\nheader\n\ncolor\n\nwhite\n\ntext-align\n\ncenter\n\nfont-size\n\n50\n\npx\n\nfont-weight\n\nbold\n\ntext-shadow\n\n1\n\npx\n\n1\n\npx\n\n#000\n\npx\n\n1\n\npx\n\n#000\n\n1\n\npx\n\npx\n\n#000\n\npx\n\npx\n\n#000\n\nbackground\n\n#ffb300\n\n.task\n\ndisplay\n\ninline-flex\n\npadding\n\n10\n\npx\n\n.update-btn\n\npadding-left\n\npx\n\n.task-input\n\nwidth\n\n600\n\npx\n\ndisplay\n\ninline-flex\n\nThis will put the controls all on the same line as each task, and make the header bigger.\n\nFinishing touches\u200b\n\nYour application should function at this point. Note that login with Replit doesn't always work as expected in a browser embedded in your IDE, so rather use the application in a dedicated tab.\n\nTo ensure that your team can always access your internal application, enable \"Always On\" mode by clicking on your repl's name and toggling the switch.\n\nWhere next?\u200b\n\nNearly all applications are built on the four basic CRUD operations, so you can build any app you can imagine. If you hit the limits of Flask, you might also want to consider moving over to Django, a more \"batteries included\" web framework that comes with many additional features out the box.\n\nYou can find a repl with all of the code shown above at https://replit.com/@ritza/internal-tools-flask-pico. Feel free to fork it over to your account and adapt it to your needs.\n\n< Previous: Discord role assignment bot with Python\n\nNext: Paid content site with replit.web & Stripe >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nBuilding the Python backendAdding some CRUD and helper functionsAdding routes to our applicationAdding the frontend\n\nFinishing touches\n\nWhere next?", "start_char_idx": 6065, "end_char_idx": 8447, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"5acbec9c-d1a0-472d-96b3-5e66fe79801d": {"node_ids": ["8b97c646-a141-422b-a069-58c4c815a02f", "92893a6c-46ae-45c0-bdbb-de3efaf6a508", "3ee00d1e-33b6-4e8f-b6ff-0c8f796538dc"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/internal-organization-tool.html"}}}, "docstore/metadata": {"8b97c646-a141-422b-a069-58c4c815a02f": {"doc_hash": "e45373b3c782a950b3b818a4fe2ddc773efecaf5a72ca1d45fb53937fed10d4e", "ref_doc_id": "5acbec9c-d1a0-472d-96b3-5e66fe79801d"}, "92893a6c-46ae-45c0-bdbb-de3efaf6a508": {"doc_hash": "581cea82570602d39f6b517004d616888add22c176153ca941b910b3042f2013", "ref_doc_id": "5acbec9c-d1a0-472d-96b3-5e66fe79801d"}, "3ee00d1e-33b6-4e8f-b6ff-0c8f796538dc": {"doc_hash": "095201c990d690c42285e8cc2fc60e8a7978504aa915d96948b8cff2c362393c", "ref_doc_id": "5acbec9c-d1a0-472d-96b3-5e66fe79801d"}}}