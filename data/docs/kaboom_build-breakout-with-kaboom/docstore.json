{"docstore/data": {"ae6a545f-61ee-4e6c-854e-550cd89862cf": {"__data__": {"id_": "ae6a545f-61ee-4e6c-854e-550cd89862cf", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f416a35922273a98c1368975bf1853ef3137d72b08e3c22ad571aea9935230b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3796373e-b5db-4dce-bf3e-02e5f766a3ca", "node_type": "1", "metadata": {}, "hash": "f41ec621fa48f41e8fa4b2661ebfeea969a9cf9af863d20fb30d0a2db1377c5f", "class_name": "RelatedNodeInfo"}}, "hash": "fca2482f6e319de36f8e915068fcc0340eb1b8c796267e1ed7e9e3c3a15c8f49", "text": "32\n\nheight\n\n16\n\nblockb\n\n28\n\nwidth\n\n32\n\nheight\n\n16\n\nblockc\n\n48\n\nwidth\n\n32\n\nheight\n\n16\n\nblockd\n\n68\n\nwidth\n\n32\n\nheight\n\n16\n\npaddle\n\n152\n\nwidth\n\n64\n\nheight\n\n16\n\nball\n\n48\n\n136\n\nwidth\n\nheight\n\nheart\n\n120\n\n136\n\nwidth\n\nheight\n\nNote that we've imported four different block sprites, named block{a-d}. Each sprite is a different color and will be worth a different number of points when broken. We've also left most of the sprite sheet's contents untouched \u2013 only a few sprites are needed for basic gameplay.\n\nNext, we need to import a font, which we'll use to display the player's score and lives. As Kaboom comes with a number of default fonts we could use, this step is optional, but it will help to give our game a cohesive visual style.\n\nloadFont\n\n\"breakout\"\n\n\"sprites/breakout_font.png\"\n\nchars\n\n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ  0123456789:!'\"\n\nWe've used Kaboom's loadFont() function, specifying the name of the font, the image file to source it from, the width and height of individual characters, and the characters it contains. Take a look at the layout of breakout_font.png to see the format Kaboom expects. Also note that we will not be able to use any characters outside of the ones represented here \u2013 this includes lowercase letters.\n\nLastly, we need to load our sound effects and music. Add the following code at the bottom to do this:\n\n// sounds\n\nloadSound\n\n\"blockbreak\"\n\n\"sounds/Explosion5.ogg\"\n\nloadSound\n\n\"paddlehit\"\n\n\"sounds/Powerup20.ogg\"\n\nloadSound\n\n\"powerup\"\n\n\"sounds/Powerup2.ogg\"\n\nloadSound\n\n\"ArcadeOddities\"\n\n\"sounds/Arcade-Oddities.mp3\"\n\nCreating levels\u200b\n\nWe will create two initial levels for our game, using Kaboom's ASCII art level creation functionality. Add the following level definitions to the bottom of your file:\n\n// levels\n\nconst\n\nLEVELS\n\n\"                        \"\n\n\"                        \"\n\n\"dddddddddddddddddddddddd\"\n\n\"cccccccccccccccccccccccc\"\n\n\"bbbbbbbbbbbbbbbbbbbbbbbb\"\n\n\"aaaaaaaaaaaaaaaaaaaaaaaa\"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"            .           \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"            @           \"\n\n\" aaaaaaaaaaaaaaaaaaaaaa \"\n\n\" a                    a \"\n\n\" a  bbbbbbbbbbbbbbbbb a \"\n\n\" a  b               b a \"\n\n\" a  b    ccccccc    b a \"\n\n\" a  b  ccdddddddcc  b a \"\n\n\" a  b    ccccccc    b a \"\n\n\" a  b               b a \"\n\n\" a  bbbbbbbbbbbbbbbbb a \"\n\n\" a                    a \"\n\n\" aaaaaaaaaaaaaaaaaaaaaa \"\n\n\"                        \"\n\n\"            .           \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"                        \"\n\n\"            @           \"\n\nIn the above levels, a-d are blocks, . is the ball, and @ is the player's paddle. We will make these definitions with a LevelOpt JSON object, which defines the width and height of individual blocks, and provides definitions for each game object. Add the following code to your file:\n\nconst\n\nLEVELOPT\n\nwidth\n\n32\n\nheight\n\n16\n\n=>\n\n// block\n\nsprite\n\n\"blocka\"\n\narea\n\n\"block\"\n\n\"bouncy\"\n\npoints\n\n=>\n\n// block\n\nsprite\n\n\"blockb\"\n\narea\n\n\"block\"\n\n\"bouncy\"\n\npoints\n\n=>\n\n// block\n\nsprite\n\n\"blockc\"\n\narea\n\n\"block\"\n\n\"bouncy\"\n\npoints\n\n=>\n\n// block\n\nsprite\n\n\"blockd\"\n\narea\n\n\"block\"\n\n\"bouncy\"\n\npoints\n\n\"@\"\n\n=>\n\n// paddle\n\nsprite\n\n\"paddle\"\n\narea\n\norigin\n\n\"center\"\n\n\"paddle\"\n\n\"bouncy\"\n\nspeed\n\n400\n\n\".\"\n\n=>\n\n// ball\n\nsprite\n\n\"ball\"\n\ncolor\n\nWHITE\n\narea\n\norigin\n\n\"center\"\n\n\"ball\"\n\nhspeed\n\n100\n\nvspeed\n\n50\n\nLet's take a closer look at each of these definitions, starting with the first block object.\n\n\"a\"\n\n=>\n\n// block\n\nsprite\n\n\"blocka\"\n\narea\n\n\"block\"\n\n\"bouncy\"\n\npoints\n\nA game object definition in Kaboom is a list of components, tags, and custom attributes.", "start_char_idx": 0, "end_char_idx": 4085, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3796373e-b5db-4dce-bf3e-02e5f766a3ca": {"__data__": {"id_": "3796373e-b5db-4dce-bf3e-02e5f766a3ca", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f416a35922273a98c1368975bf1853ef3137d72b08e3c22ad571aea9935230b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ae6a545f-61ee-4e6c-854e-550cd89862cf", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "fca2482f6e319de36f8e915068fcc0340eb1b8c796267e1ed7e9e3c3a15c8f49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "916a79c0-6d46-484a-acd5-506889c7c6ff", "node_type": "1", "metadata": {}, "hash": "fb8826e724df0920ce63b01e721ec7d6582a352a84916b4eeeb45ab7aafb2972", "class_name": "RelatedNodeInfo"}}, "hash": "f41ec621fa48f41e8fa4b2661ebfeea969a9cf9af863d20fb30d0a2db1377c5f", "text": "=>\n\n// ball\n\nsprite\n\n\"ball\"\n\ncolor\n\nWHITE\n\narea\n\norigin\n\n\"center\"\n\n\"ball\"\n\nhspeed\n\n100\n\nvspeed\n\n50\n\nLet's take a closer look at each of these definitions, starting with the first block object.\n\n\"a\"\n\n=>\n\n// block\n\nsprite\n\n\"blocka\"\n\narea\n\n\"block\"\n\n\"bouncy\"\n\npoints\n\nA game object definition in Kaboom is a list of components, tags, and custom attributes.\n\nComponents are a core part of Kaboom \u2013 they provide different functionality to game objects, from an object's appearance to functionality such as collision detection. In this case, we have two components: sprite(), which tells the object which sprite to represent itself with and area(), which gives the object the ability to collide with other objects.\n\nWhile components come with prepackaged behaviors, tags are just labels that we can use to define our own behavior. This object has the tag \"block\", which we'll use to give it block-specific behaviors, such as being destroyed by the ball and giving the player points. It also has the tag \"bouncy\", which we'll use to make the ball bounce off it.\n\nLastly, our block has a custom points attribute, which will determine how many points it will give the player when it is destroyed. Our four block objects use different sprites and have different point values, but are otherwise identical.\n\nNext, let's look at the paddle object:\n\n\"@\"\n\n=>\n\n// paddle\n\nsprite\n\n\"paddle\"\n\narea\n\norigin\n\n\"center\"\n\n\"paddle\"\n\n\"bouncy\"\n\nspeed\n\n400\n\nLike our block objects, the paddle has both sprite() and area() components. We've also given it the \"bouncy\" tag, so that the ball will bounce off it. Using tags like this is a great way to avoid writing the same code multiple times. Unlike our block objects, the paddle has an origin component, set to \"center\" \u2013 this will allow us to move the object from its center rather than its top-left corner.\n\nThe paddle object also has a speed attribute, which will determine how fast it moves across the screen.\n\nOur last object is the ball.\n\n\".\"\n\n=>\n\n// ball\n\nsprite\n\n\"ball\"\n\narea\n\norigin\n\n\"center\"\n\n\"ball\"\n\nhspeed\n\n100\n\nvspeed\n\n50\n\nAs a moving object, this is largely similar to the paddle. The main difference is that we give it both horizontal and vertical speed attributes, as it will be moving in all directions, whereas the paddle only moves left and right.\n\nNow that we've defined our level layouts and the objects that will populate them, we can create our game scene. In Kaboom, a scene is a unique screen with its own objects and game rules. We can use scenes to separate gameplay from menus and information screens, or even to separate different kinds of minigames in the same project. As scenes can take arguments, we can use a single \"game\" scene to represent all of our levels. Add the following code below your LEVELOPT definition:\n\nscene\n\n\"game\"\n\nlevelIndex\n\nscore\n\nlives\n\n=>\n\naddLevel\n\nLEVELS\n\nlevelIndex\n\nLEVELOPT\n\nIn addition to providing the level number as an argument (levelIndex), we provide both score and lives. This will allow us to preserve both values when the player defeats one level and moves to the next.\n\nThen add this code to the bottom of the main code file to define and call game start function. This function will go() to the first level, setting the player's score to 0 and their lives to 3. In addition to calling it when the game first loads, we will call this function when we need to restart after a game over.\n\n// start game on first level\n\nfunction\n\nstart\n\ngo\n\n\"game\"\n\nlevelIndex\n\nscore\n\nlives\n\nstart\n\nRun your repl now. You should see our first level, with its colorful blocks, paddle and ball, frozen in amber. In the next section, we'll add some motion.\n\nMoving the paddle\u200b\n\nLet's write some code to control the player's paddle. First, we need to retrieve a reference to the paddle using get(). We'll place this code inside the \"game\" scene, below addLevel:\n\n// player's paddle\n\nconst\n\npaddle\n\nget\n\n\"paddle\"\n\nNow we'll add code to move the paddle left and right. We could do this with the left and right arrow keys, which would give our game a retro feeling, but most modern browser-based block-breaking games have a mouse-controlled paddle. Moreover, as Kaboom automatically translates touch events to mouse events, implementing mouse controls will make our game playable on mobile devices without keyboards.", "start_char_idx": 3733, "end_char_idx": 8014, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "916a79c0-6d46-484a-acd5-506889c7c6ff": {"__data__": {"id_": "916a79c0-6d46-484a-acd5-506889c7c6ff", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f416a35922273a98c1368975bf1853ef3137d72b08e3c22ad571aea9935230b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3796373e-b5db-4dce-bf3e-02e5f766a3ca", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f41ec621fa48f41e8fa4b2661ebfeea969a9cf9af863d20fb30d0a2db1377c5f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdd14e40-5658-47c1-909d-c0630e16b4d8", "node_type": "1", "metadata": {}, "hash": "4cee0c1b4473f0b21fd62eb9c837e0e9b3cba507429081e4749325ec6a1667cb", "class_name": "RelatedNodeInfo"}}, "hash": "fb8826e724df0920ce63b01e721ec7d6582a352a84916b4eeeb45ab7aafb2972", "text": "You should see our first level, with its colorful blocks, paddle and ball, frozen in amber. In the next section, we'll add some motion.\n\nMoving the paddle\u200b\n\nLet's write some code to control the player's paddle. First, we need to retrieve a reference to the paddle using get(). We'll place this code inside the \"game\" scene, below addLevel:\n\n// player's paddle\n\nconst\n\npaddle\n\nget\n\n\"paddle\"\n\nNow we'll add code to move the paddle left and right. We could do this with the left and right arrow keys, which would give our game a retro feeling, but most modern browser-based block-breaking games have a mouse-controlled paddle. Moreover, as Kaboom automatically translates touch events to mouse events, implementing mouse controls will make our game playable on mobile devices without keyboards. So let's add some code to have our paddle follow the mouse cursor:\n\n// mouse controls\n\nonUpdate\n\n=>\n\nif\n\nmousePos\n\n&&\n\nmousePos\n\nwidth\n\n&&\n\nmousePos\n\n&&\n\nmousePos\n\nheight\n\nif\n\nmousePos\n\npaddle\n\nworldArea\n\np1\n\n// left\n\npaddle\n\nmove\n\npaddle\n\nspeed\n\nelse\n\nif\n\nmousePos\n\npaddle\n\nworldArea\n\np2\n\n// right\n\npaddle\n\nmove\n\npaddle\n\nspeed\n\nThis code will run every frame. First, it checks whether the mouse cursor is inside the game area. Then it checks whether the cursor is to the paddle's left or right, and moves the paddle in that direction. The paddle won't move if it is vertically in line with the cursor.\n\nRerun your repl now and try out the controls. If you have a touch screen on your device, you can also move the paddle by tapping or dragging your finger.\n\nMoving the ball\u200b\n\nNow that we can move the paddle, we need the ball to move too. Add the following code to your file with the \"game\" scene:\n\n// ball movement\n\nonUpdate\n\n\"ball\"\n\nball\n\n=>\n\nball\n\nmove\n\nball\n\nhspeed\n\nball\n\nvspeed\n\nYou'll recall that we set the ball's hspeed and vspeed in its object definition. Run your repl now, and watch as the ball flies off the screen. Our game won't last very long if the ball can leave the screen like this, so we need to add some code to have it bounce off the edges. Alter your onUpdate(\"ball\") callback to match the following:\n\nonUpdate\n\n\"ball\"\n\nball\n\n=>\n\n// bounce off screen edges\n\nif\n\nball\n\nworldArea\n\np1\n\n||\n\nball\n\nworldArea\n\np2\n\nwidth\n\nball\n\nhspeed\n\nball\n\nhspeed\n\nif\n\nball\n\nworldArea\n\np1\n\n||\n\nball\n\nworldArea\n\np2\n\nheight\n\nball\n\nvspeed\n\nball\n\nvspeed\n\n// move\n\nball\n\nmove\n\nball\n\nhspeed\n\nball\n\nvspeed\n\nIf the ball goes off the left or right edges of the screen, we reverse its horizontal direction, and if it goes off the top or bottom of the screen, we reverse its vertical direction. Run your repl now to see this effect in action.\n\nCollisions\u200b\n\nNow that the ball can move and bounce off the screen's edges, we need it to also bounce off the paddle and the blocks. To achieve this, we'll write an onCollide() event handler for the tags \"ball\" and \"bouncy\". Add the following code to the \"game\" scene, below your ball movement code:\n\n// collisions\n\nonCollide\n\n\"ball\"\n\n\"bouncy\"\n\nball\n\nbouncy\n\n=>\n\nball\n\nvspeed\n\nball\n\nvspeed\n\nif\n\nbouncy\n\nis\n\n\"paddle\"\n\n// play sound\n\nplay\n\n\"paddlehit\"\n\nNote that we're only changing the vertical direction of the ball, because that's the important one for our gameplay. While we could implement more complex bounce physics by taking into account which sides the collision occurred on, changing the vertical direction alone gets us the type of ball movement players expect from a block-breaking game.\n\nNow that the player can actually hit the ball with their paddle, we shouldn't have the ball bounce off the bottom of the screen anymore. Find your onUpdate(\"ball\") callback and remove second condition from the second if statement.", "start_char_idx": 7223, "end_char_idx": 10879, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdd14e40-5658-47c1-909d-c0630e16b4d8": {"__data__": {"id_": "fdd14e40-5658-47c1-909d-c0630e16b4d8", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f416a35922273a98c1368975bf1853ef3137d72b08e3c22ad571aea9935230b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "916a79c0-6d46-484a-acd5-506889c7c6ff", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "fb8826e724df0920ce63b01e721ec7d6582a352a84916b4eeeb45ab7aafb2972", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "210c0f9f-2f12-4bc8-8b3e-9b259c9ade0b", "node_type": "1", "metadata": {}, "hash": "c04f5810b7785f1ae2b0501a676723ae30c0bc4caaeacbeb5bbf7c97fad331b3", "class_name": "RelatedNodeInfo"}}, "hash": "4cee0c1b4473f0b21fd62eb9c837e0e9b3cba507429081e4749325ec6a1667cb", "text": "Add the following code to the \"game\" scene, below your ball movement code:\n\n// collisions\n\nonCollide\n\n\"ball\"\n\n\"bouncy\"\n\nball\n\nbouncy\n\n=>\n\nball\n\nvspeed\n\nball\n\nvspeed\n\nif\n\nbouncy\n\nis\n\n\"paddle\"\n\n// play sound\n\nplay\n\n\"paddlehit\"\n\nNote that we're only changing the vertical direction of the ball, because that's the important one for our gameplay. While we could implement more complex bounce physics by taking into account which sides the collision occurred on, changing the vertical direction alone gets us the type of ball movement players expect from a block-breaking game.\n\nNow that the player can actually hit the ball with their paddle, we shouldn't have the ball bounce off the bottom of the screen anymore. Find your onUpdate(\"ball\") callback and remove second condition from the second if statement. Your callback should now look like this:\n\n// ball movement\n\nonUpdate\n\n\"ball\"\n\nball\n\n=>\n\n// bounce off screen edges\n\nif\n\nball\n\nworldArea\n\np1\n\n||\n\nball\n\nworldArea\n\np2\n\nwidth\n\nball\n\nhspeed\n\nball\n\nhspeed\n\nif\n\nball\n\nworldArea\n\np1\n\n// <-- second condition removed\n\nball\n\nvspeed\n\nball\n\nvspeed\n\n// move\n\nball\n\nmove\n\nball\n\nhspeed\n\nball\n\nvspeed\n\nThe other important collision event that we need to implement is having the ball destroy blocks it hits. Add the following code below the onCollide(\"ball\", \"bouncy\") callback.\n\nonCollide\n\n\"ball\"\n\n\"block\"\n\nball\n\nblock\n\n=>\n\nblock\n\ndestroy\n\nscore\n\n+=\n\nblock\n\npoints\n\nplay\n\n\"blockbreak\"\n\n// play sound\n\nHere we use the destroy() function to remove the block object from play, and then increment our score by the block's points value.\n\nNow that we're changing the score variable, it's important that we display it on the screen, along with lives. Add the following code to the \"game\" scene, below your collision code:\n\n// ui\n\nonDraw\n\n=>\n\ndrawText\n\ntext\n\nSCORE:\n\n${\n\nscore\n\nsize\n\n16\n\npos\n\nvec2\n\nfont\n\n\"breakout\"\n\ncolor\n\nWHITE\n\ndrawText\n\ntext\n\nLIVES:\n\n${\n\nlives\n\nsize\n\n16\n\npos\n\nvec2\n\nwidth\n\n13\n\n16\n\nfont\n\n\"breakout\"\n\ncolor\n\nWHITE\n\nWe've added an onDraw() callback, which will run every frame, after all onUpdate() callbacks have run. The onDraw() callbacks are the only place we can use drawing functions such as drawText(). Also note that we've used the font we defined at the start of this tutorial.\n\nRun your repl now, and you should be able to hit the ball with your paddle, destroy blocks, and get points. Our core gameplay is implemented.\n\nWinning and losing\u200b\n\nAs it stands, our game is both unforgiving and unrewarding. If you let the ball go off the bottom of the screen, it's permanently gone, and you have to refresh your browser to try again. If you manage to destroy all the blocks, the game continues without moving to the next level or acknowledging your victory.\n\nLet's fix these deficiencies now by implementing lives, as well as win and lose conditions. We'll implement lives in the onUpdate(\"ball\") callback that deals with ball movement. Find this callback and add the following new code just below the second if statement:\n\nonUpdate\n\n\"ball\"\n\nball\n\n=>\n\n// bounce off screen edges\n\nif\n\nball\n\nworldArea\n\np1\n\n||\n\nball\n\nworldArea\n\np2\n\nwidth\n\nball\n\nhspeed\n\nball\n\nhspeed\n\nif\n\nball\n\nworldArea\n\np1\n\nball\n\nvspeed\n\nball\n\nvspeed\n\n// fall off screen -- NEW CODE BELOW\n\nif\n\nball\n\npos\n\nheight\n\nlives\n\n=\n\nif\n\nlives\n\n<=\n\ngo\n\n\"lose\"\n\nscore\n\nscore\n\nelse\n\nball\n\npos\n\nwidth\n\nball\n\npos\n\nheight\n\n// END OF NEW CODE\n\n// move\n\nball\n\nmove\n\nball\n\nhspeed\n\nball\n\nvspeed\n\nThis code checks whether the ball has fallen of the screen, and if so, decrements lives. If there are lives remaining, it moves the ball back to the middle of the screen. Otherwise, it sends the player to the \"lose\" scene, which we'll define soon. But first, we need to provide for the game's win condition.\n\nWe'll consider a level won once all the blocks have been destroyed. To determine this, we can check whether the number of blocks in the level is 0.", "start_char_idx": 10075, "end_char_idx": 13927, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "210c0f9f-2f12-4bc8-8b3e-9b259c9ade0b": {"__data__": {"id_": "210c0f9f-2f12-4bc8-8b3e-9b259c9ade0b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f416a35922273a98c1368975bf1853ef3137d72b08e3c22ad571aea9935230b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdd14e40-5658-47c1-909d-c0630e16b4d8", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "4cee0c1b4473f0b21fd62eb9c837e0e9b3cba507429081e4749325ec6a1667cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "916a8292-bc56-44c3-a0d3-1e61740fdd2a", "node_type": "1", "metadata": {}, "hash": "b8516e6a6f3cc32f87dc3b4419f83974e6c19f235b9563f21fa909a7ce868165", "class_name": "RelatedNodeInfo"}}, "hash": "c04f5810b7785f1ae2b0501a676723ae30c0bc4caaeacbeb5bbf7c97fad331b3", "text": "If there are lives remaining, it moves the ball back to the middle of the screen. Otherwise, it sends the player to the \"lose\" scene, which we'll define soon. But first, we need to provide for the game's win condition.\n\nWe'll consider a level won once all the blocks have been destroyed. To determine this, we can check whether the number of blocks in the level is 0. We'll put this check in the ball and block collision callback, after the block is destroyed. Find this code and alter it to resemble the following:\n\nonCollide\n\n\"ball\"\n\n\"block\"\n\nball\n\nblock\n\n=>\n\nblock\n\ndestroy\n\nscore\n\n+=\n\nblock\n\npoints\n\nplay\n\n\"blockbreak\"\n\n// level end -- NEW CODE BELOW\n\nif\n\nget\n\n\"block\"\n\nlength\n\n===\n\n// next level\n\nif\n\nlevelIndex\n\nLEVELS\n\nlength\n\ngo\n\n\"game\"\n\nlevelIndex\n\nlevelIndex\n\nscore\n\nscore\n\nlives\n\nlives\n\nelse\n\n// win\n\ngo\n\n\"win\"\n\nscore\n\nscore\n\nNow we need to create our \"win\" and \"lose\" scenes. Add the following code for both scenes below the \"game\" scene and above the start function definition:\n\n// gameover screens\n\nscene\n\n\"lose\"\n\nscore\n\n=>\n\nadd\n\ntext\n\nGAME OVER\\n\\nYOUR FINAL SCORE WAS\n\n${\n\nscore\n\nsize\n\n32\n\nwidth\n\nwidth\n\nfont\n\n\"breakout\"\n\npos\n\n12\n\nadd\n\ntext\n\nPRESS ANY KEY TO RESTART\n\nsize\n\n16\n\nwidth\n\nwidth\n\nfont\n\n\"breakout\"\n\npos\n\nwidth\n\nheight\n\nonKeyPress\n\nstart\n\nonMousePress\n\nstart\n\nscene\n\n\"win\"\n\nscore\n\n=>\n\nadd\n\ntext\n\nCONGRATULATIONS, YOU WIN!\\n\\nYOUR FINAL SCORE WAS\n\n${\n\nscore\n\nsize\n\n32\n\nwidth\n\nwidth\n\nfont\n\n\"breakout\"\n\npos\n\nwidth\n\nheight\n\nadd\n\ntext\n\nPRESS ANY KEY TO RESTART\n\nsize\n\n16\n\nwidth\n\nwidth\n\nfont\n\n\"breakout\"\n\npos\n\nwidth\n\nheight\n\nonKeyPress\n\nstart\n\nonMousePress\n\nstart\n\nThese scenes are quite similar to each other: each one displays some text, including the player's final score, and prompts the player to press any key. Both onKeyPress(start) and onMousePress(start) will call the start function if any keyboard key or mouse button is pressed, or if the screen is tapped on a touch device.\n\nRun your repl now. You should now be able to play through both levels of our block-breaking game (or lose and reach the game over screen).\n\nPowerups\u200b\n\nThere's one more sprite we loaded at the start of the tutorial that we haven't used yet \u2013 the heart. This will be a powerup. We'll have it randomly appear in place of destroyed blocks and start falling. If the player catches it with their paddle, they will gain an additional life.\n\nFind your onCollide(\"ball\", \"block\") code and add the new code specified below:\n\n// collisions\n\nonCollide\n\n\"ball\"\n\n\"block\"\n\nball\n\nblock\n\n=>\n\nblock\n\ndestroy\n\nscore\n\n+=\n\nblock\n\npoints\n\nplay\n\n\"blockbreak\"\n\n// level end\n\nif\n\nget\n\n\"block\"\n\nlength\n\n===\n\n// next level\n\nif\n\nlevelIndex\n\nLEVELS\n\nlength\n\ngo\n\n\"game\"\n\nlevelIndex\n\nlevelIndex\n\nscore\n\nscore\n\nlives\n\nlives\n\nelse\n\n// win\n\ngo\n\n\"win\"\n\nscore\n\nscore\n\n// powerups -- NEW CODE BELOW\n\nif\n\nchance\n\n0.05\n\n// extra life\n\nadd\n\nsprite\n\n\"heart\"\n\npos\n\nblock\n\npos\n\narea\n\norigin\n\n\"center\"\n\ncleanup\n\n\"powerup\"\n\nspeed\n\n80\n\neffect\n\nlives\n\n++\n\nThis code uses Kaboom's chance() function to set our powerup to spawn after a block is destroyed 5% of the time. The powerup is a game object with similar components to other moving objects we've defined. The cleanup() component will ensure it's automatically destroyed when it leaves the screen. Additionally, we give it a movement speed and an effect() function, which we'll call when it hits the paddle.\n\nJust below the onCollide(\"ball\", \"block\") callback, add the following two callbacks to define our powerup's movement and collision behavior:\n\n// powerups\n\nonUpdate\n\n\"powerup\"\n\npowerup\n\n=>\n\npowerup\n\nmove\n\npowerup\n\nspeed\n\npaddle\n\nonCollide\n\n\"powerup\"\n\npowerup\n\n=>\n\npowerup\n\neffect\n\npowerup\n\ndestroy\n\nplay\n\n\"powerup\"\n\nRun your repl now and you should see the occasional extra life powerup as you play.", "start_char_idx": 13560, "end_char_idx": 17283, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "916a8292-bc56-44c3-a0d3-1e61740fdd2a": {"__data__": {"id_": "916a8292-bc56-44c3-a0d3-1e61740fdd2a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "f416a35922273a98c1368975bf1853ef3137d72b08e3c22ad571aea9935230b3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "210c0f9f-2f12-4bc8-8b3e-9b259c9ade0b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}, "hash": "c04f5810b7785f1ae2b0501a676723ae30c0bc4caaeacbeb5bbf7c97fad331b3", "class_name": "RelatedNodeInfo"}}, "hash": "b8516e6a6f3cc32f87dc3b4419f83974e6c19f235b9563f21fa909a7ce868165", "text": "The powerup is a game object with similar components to other moving objects we've defined. The cleanup() component will ensure it's automatically destroyed when it leaves the screen. Additionally, we give it a movement speed and an effect() function, which we'll call when it hits the paddle.\n\nJust below the onCollide(\"ball\", \"block\") callback, add the following two callbacks to define our powerup's movement and collision behavior:\n\n// powerups\n\nonUpdate\n\n\"powerup\"\n\npowerup\n\n=>\n\npowerup\n\nmove\n\npowerup\n\nspeed\n\npaddle\n\nonCollide\n\n\"powerup\"\n\npowerup\n\n=>\n\npowerup\n\neffect\n\npowerup\n\ndestroy\n\nplay\n\n\"powerup\"\n\nRun your repl now and you should see the occasional extra life powerup as you play.\n\nMusic\u200b\n\nAs a final touch, we'll add some music to our game. Near the bottom of your file, just above the invocation of start(), add the following code:\n\n// play music\n\nconst\n\nmusic\n\nplay\n\n\"ArcadeOddities\"\n\nmusic\n\nloop\n\nloop() will ensure that the music plays continuously.\n\nWhere next?\u200b\n\nWe've built a simple but polished block-breaking game. From here, you might want to make the following additions:\n\nExtra levels.\n\nNew powerups, such as a longer paddle, multiple balls, or even a paddle-mounted laser gun.\n\nBigger and smaller blocks, blocks that can take multiple hits, or moving blocks.\n\nYou can find our repl here.\n\n< Previous: Asteroids game with Kaboom.js\n\nNext: Flappy Bird with Kaboom.js >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nGetting started\n\nLoading assets\n\nCreating levels\n\nMoving the paddle\n\nMoving the ball\n\nCollisions\n\nWinning and losing\n\nPowerups\n\nMusic\n\nWhere next?", "start_char_idx": 16590, "end_char_idx": 18180, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"3c60be94-72cf-40a2-87ed-acef112f2ae1": {"node_ids": ["ae6a545f-61ee-4e6c-854e-550cd89862cf", "3796373e-b5db-4dce-bf3e-02e5f766a3ca", "916a79c0-6d46-484a-acd5-506889c7c6ff", "fdd14e40-5658-47c1-909d-c0630e16b4d8", "210c0f9f-2f12-4bc8-8b3e-9b259c9ade0b", "916a8292-bc56-44c3-a0d3-1e61740fdd2a"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-breakout-with-kaboom.html"}}}, "docstore/metadata": {"ae6a545f-61ee-4e6c-854e-550cd89862cf": {"doc_hash": "fca2482f6e319de36f8e915068fcc0340eb1b8c796267e1ed7e9e3c3a15c8f49", "ref_doc_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1"}, "3796373e-b5db-4dce-bf3e-02e5f766a3ca": {"doc_hash": "f41ec621fa48f41e8fa4b2661ebfeea969a9cf9af863d20fb30d0a2db1377c5f", "ref_doc_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1"}, "916a79c0-6d46-484a-acd5-506889c7c6ff": {"doc_hash": "fb8826e724df0920ce63b01e721ec7d6582a352a84916b4eeeb45ab7aafb2972", "ref_doc_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1"}, "fdd14e40-5658-47c1-909d-c0630e16b4d8": {"doc_hash": "4cee0c1b4473f0b21fd62eb9c837e0e9b3cba507429081e4749325ec6a1667cb", "ref_doc_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1"}, "210c0f9f-2f12-4bc8-8b3e-9b259c9ade0b": {"doc_hash": "c04f5810b7785f1ae2b0501a676723ae30c0bc4caaeacbeb5bbf7c97fad331b3", "ref_doc_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1"}, "916a8292-bc56-44c3-a0d3-1e61740fdd2a": {"doc_hash": "b8516e6a6f3cc32f87dc3b4419f83974e6c19f235b9563f21fa909a7ce868165", "ref_doc_id": "3c60be94-72cf-40a2-87ed-acef112f2ae1"}}}