{"docstore/data": {"db5404a8-92d8-4ecf-aae4-22c11bf7c7d6": {"__data__": {"id_": "db5404a8-92d8-4ecf-aae4-22c11bf7c7d6", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/audio.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a4fb2cf2-d89b-435e-a5fa-daa7cc470f4b", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/audio.html"}, "hash": "40df707a631ee716af0eb0527817207cb519962202007fe0a8cfcd6c9f7386d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58dcf390-1408-47c1-a8ca-67c61c692469", "node_type": "1", "metadata": {}, "hash": "f064feaf5c71dabeed1bd6863d2007db42c756ec69e9e0926a9151780c6d2f5a", "class_name": "RelatedNodeInfo"}}, "hash": "00624dd6d9159630d51d3e0dcb4d8910cdebb481aaaac85e63ce82505aea7751", "text": "import\n\nsystem\n\nfrom\n\nreplit\n\nimport\n\naudio\n\nmain_message\n\n\"\"\"\n\n+: volume up\n\n: volume down\n\nk: add loop\n\nj: remove loop\n\n<space>: play/pause\n\n\"\"\"\n\nHere we add one more import for system which we'll use to clear the screen so that the user doesn't see old information. We then define a string that will prompt the user with their options.\n\nCreating the show_status() method\u200b\n\nLet's add a method that will show the user the current status of our media player. It will take source as an input, which is what the play_media() method that we already used returns.\n\ndef\n\nshow_status\n\nsource\n\ntime\n\nsleep\n\n0.2\n\nsystem\n\n\"clear\"\n\nvbar\n\n'|'\n\nint\n\nsource\n\nvolume\n\n20\n\nvperc\n\nint\n\nsource\n\nvolume\n\n100\n\npp\n\n\"\u23f8\ufe0f\"\n\nif\n\nsource\n\npaused\n\nelse\n\n\"\u25b6\ufe0f\"\n\nprint\n\nf\"Volume:\n\nvbar\n\nvperc\n\n% \\n\"\n\nprint\n\nf\"Looping\n\nsource\n\nloops_remaining\n\ntime(s)\"\n\nprint\n\nf\"Time remaining:\n\nsource\n\nget_remaining\n\nprint\n\nf\"Playing:\n\npp\n\nprint\n\nmain_message\n\nNote that we add a time.sleep() at the top of this function. Because changing the status involves writing to the /tmp/audio file we discussed before and reading the status involves reading from this file, we want to wait a short while to ensure we don't read stale information before showing it to the user.\n\nOtherwise our function clears the screen, prints out a text-based volume bar along with the current volume percentage, and shows other information such as whether the track is currently playing or paused, how many loops are left, and how much time is left before the track finishes.\n\nFinally, we need a loop to constantly prompt the user for the next command which will also keep our repl alive and continue playing the track while we are waiting for user input. Add the following main() function to main.py and call it:\n\ndef\n\nmain\n\nsource\n\naudio\n\nplay_file\n\n\"o_fortuna.mp3\"\n\ntime\n\nsleep\n\nshow_status\n\nsource\n\nwhile\n\nTrue\n\nchoice\n\ninput\n\n\"Enter command: \"\n\nif\n\nchoice\n\n==\n\n'+'\n\nsource\n\nvolume\n\n+=\n\n0.1\n\nelif\n\nchoice\n\n==\n\n'-'\n\nsource\n\nvolume\n\n=\n\n0.1\n\nelif\n\nchoice\n\n==\n\n\"k\"\n\nsource\n\nset_loop\n\nsource\n\nloops_remaining\n\nelif\n\nchoice\n\n==\n\n\"j\"\n\nsource\n\nset_loop\n\nsource\n\nloops_remaining\n\nelif\n\nchoice\n\n==\n\n\" \"\n\nsource\n\npaused\n\nnot\n\nsource\n\npaused\n\nshow_status\n\nsource\n\nmain\n\nOnce again, you should replace the \"o_fortuna\" string if you downloaded or uploaded a different audio file.\n\nIf you run the repl now you should hear you track play and you can control it by inputting the various commands.\n\nPlaying individual tones\u200b\n\nInstead of playing audio from files, you can also play specific tones or notes with the play_tone() method. This method takes three arguments:\n\nduration: how long the tone should play for\n\npitch: the frequency of the tone (how high or low it sounds)\n\nwave form: the fundamental wave form that the tone is built on.\n\nIf you've ever played a musical instrument, you'll probably have come across notes referred to by the letters A-G. With digital audio, you'll specify the pitch in hertz (Hz). \"Middle C\" on a piano is usually 262 Hz and the A above this is 440 Hz.\n\nLet's write a program to play \"Twinkle Twinkle Little Star\". Create a new Python repl and add the following code to main.py.\n\nimport\n\ntime\n\nfrom\n\nreplit\n\nimport\n\naudio\n\ndef\n\nplay_note\n\nnote\n\nduration\n\nnote_to_freq\n\n\"C\"\n\n262\n\n\"D\"\n\n294\n\n\"E\"\n\n330\n\n\"F\"\n\n349\n\n\"G\"\n\n392\n\n\"A\"\n\n440\n\naudio\n\nplay_tone\n\nduration\n\nnote_to_freq\n\nnote\n\ntime\n\nsleep\n\nduration\n\nplay_note\n\n\"C\"\n\nAbove we set up a convenience function to play specific notes for a specific duration. It includes a dictionary mapping the names of notes to their frequencies. We've only done one octave and no sharps or flats, but you can easily extend this to add the other notes.\n\nread about in more detail.\n\nTest that you can play a single note as expected. Now you can play the first part of \"Twinkle Twinkle Little Star\" by defining all of the notes and durations, and then looping through them, calling play_note on each in turn.", "start_char_idx": 0, "end_char_idx": 3891, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58dcf390-1408-47c1-a8ca-67c61c692469": {"__data__": {"id_": "58dcf390-1408-47c1-a8ca-67c61c692469", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/audio.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "a4fb2cf2-d89b-435e-a5fa-daa7cc470f4b", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/audio.html"}, "hash": "40df707a631ee716af0eb0527817207cb519962202007fe0a8cfcd6c9f7386d2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db5404a8-92d8-4ecf-aae4-22c11bf7c7d6", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/audio.html"}, "hash": "00624dd6d9159630d51d3e0dcb4d8910cdebb481aaaac85e63ce82505aea7751", "class_name": "RelatedNodeInfo"}}, "hash": "f064feaf5c71dabeed1bd6863d2007db42c756ec69e9e0926a9151780c6d2f5a", "text": "import\n\ntime\n\nfrom\n\nreplit\n\nimport\n\naudio\n\ndef\n\nplay_note\n\nnote\n\nduration\n\nnote_to_freq\n\n\"C\"\n\n262\n\n\"D\"\n\n294\n\n\"E\"\n\n330\n\n\"F\"\n\n349\n\n\"G\"\n\n392\n\n\"A\"\n\n440\n\naudio\n\nplay_tone\n\nduration\n\nnote_to_freq\n\nnote\n\ntime\n\nsleep\n\nduration\n\nplay_note\n\n\"C\"\n\nAbove we set up a convenience function to play specific notes for a specific duration. It includes a dictionary mapping the names of notes to their frequencies. We've only done one octave and no sharps or flats, but you can easily extend this to add the other notes.\n\nread about in more detail.\n\nTest that you can play a single note as expected. Now you can play the first part of \"Twinkle Twinkle Little Star\" by defining all of the notes and durations, and then looping through them, calling play_note on each in turn.\n\nnotes\n\n\"C\"\n\n\"C\"\n\n\"G\"\n\n\"G\"\n\n\"A\"\n\n\"A\"\n\n\"G\"\n\n\"F\"\n\n\"F\"\n\n\"E\"\n\n\"E\"\n\n\"D\"\n\n\"D\"\n\n\"C\"\n\ndurations\n\nfor\n\nin\n\nrange\n\nlen\n\nnotes\n\nplay_note\n\nnotes\n\ndurations\n\nWe can also control the volume of each tone by passing a volume argument to play_tone(). As for audio files, this is a float where 1 represents 100% volume. If we wanted to implement a decrescendo (gradual decrease in volume), we could modify our code to look as follows:\n\ndef\n\nplay_note\n\nnote\n\nduration\n\nvolume\n\nnote_to_freq\n\n\"C\"\n\n262\n\n\"D\"\n\n294\n\n\"E\"\n\n330\n\n\"F\"\n\n349\n\n\"G\"\n\n392\n\n\"A\"\n\n440\n\naudio\n\nplay_tone\n\nduration\n\nnote_to_freq\n\nnote\n\nvolume\n\nvolume\n\ntime\n\nsleep\n\nduration\n\nnotes\n\n\"C\"\n\n\"C\"\n\n\"G\"\n\n\"G\"\n\n\"A\"\n\n\"A\"\n\n\"G\"\n\n\"F\"\n\n\"F\"\n\n\"E\"\n\n\"E\"\n\n\"D\"\n\n\"D\"\n\n\"C\"\n\ndurations\n\nvolume\n\nfor\n\nin\n\nrange\n\nlen\n\nnotes\n\nvolume\n\n=\n\n0.05\n\nplay_note\n\nnotes\n\ndurations\n\nvolume\n\nvolume\n\nHere we added a volume argument to our play_note() function so that we can pass it along to play_tone(). Each time around the loop we reduce the volume by 5%. Play it again and you should hear the song slowly fade out (if you add more than 20 notes, the volume will hit 0 so you'll have to reduce the step or increase the volume at some point to stop the song going silent).\n\nMake it your own\u200b\n\nIf you followed along you'll have your own version to extend, otherwise you can fork the media player repl below.\n\nNote: Playing audio from the embedded repl below is not supported. To test out this repl, click \"open in Replit\" at the top right of the embed window. The repl will open in a new window with a pop-up asking you to confirm audio activation.\n\nThe \"Twinkle Twinkle Little Star\" repl can be found at https://replit.com/@GarethDwyer1/cwr-12-audio-twinkle-twinkle.\n\nWhere next\u200b\n\nControlling your audio files through a text-based interface might feel like a downgrade from using a GUI media player, but you can use these concepts to integrate audio controls into your other applications. For example, you could create a Discord chatbot that plays different tracks and automatically pauses or reduces the volume of your music when you join a Discord voice channel. Or you could integrate audio tracks into a web application or game (e.g. playing a victory or defeat sound at a specific volume given certain conditions).\n\nOnce you can control something using code, the possibilities are pretty broad, so use your imagination!\n\n< Previous: 2D Platform Game with PyGame\n\nNext: Card game with pygame >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nUnderstanding how audio works on Replit\n\nGetting a free audio file from the Free Music Archive\n\nDownloading audio files to our project\n\nPlaying the audio file using Python\n\nAllowing the user to pause, change volume, or get information about the currently playing trackCreating the prompt menuCreating the show_status() method\n\nPlaying individual tones\n\nMake it your own\n\nWhere next", "start_char_idx": 3135, "end_char_idx": 6729, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"a4fb2cf2-d89b-435e-a5fa-daa7cc470f4b": {"node_ids": ["db5404a8-92d8-4ecf-aae4-22c11bf7c7d6", "58dcf390-1408-47c1-a8ca-67c61c692469"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/audio.html"}}}, "docstore/metadata": {"db5404a8-92d8-4ecf-aae4-22c11bf7c7d6": {"doc_hash": "00624dd6d9159630d51d3e0dcb4d8910cdebb481aaaac85e63ce82505aea7751", "ref_doc_id": "a4fb2cf2-d89b-435e-a5fa-daa7cc470f4b"}, "58dcf390-1408-47c1-a8ca-67c61c692469": {"doc_hash": "f064feaf5c71dabeed1bd6863d2007db42c756ec69e9e0926a9151780c6d2f5a", "ref_doc_id": "a4fb2cf2-d89b-435e-a5fa-daa7cc470f4b"}}}