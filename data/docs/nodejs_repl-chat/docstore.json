{"docstore/data": {"c7d5cde1-5f98-4b83-8de3-5a60b9d7ad0a": {"__data__": {"id_": "c7d5cde1-5f98-4b83-8de3-5a60b9d7ad0a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "238fd77e-4acd-4a21-8f61-84068bc768a6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "hash": "e05b7111bd65c4e71200c4fe4845891ca183633e8ce727b250cce77cd7f6c15d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "48b61af6-6c81-4161-a3e1-44e64922a6f2", "node_type": "1", "metadata": {}, "hash": "eec479d11bdd586b6d106399719ef080d518ea7a031c676173c5578c4a599bee", "class_name": "RelatedNodeInfo"}}, "hash": "5e90914337efd144c55d603fa0c2ee4abb435d3e5edef7231a9b6c5567cad04e", "text": "Start up and test the server\u200b\n\nFinally, we need to start up our chat server to listen for connections. Add this code to start the server:\n\nserver\n\nlisten\n\n3000\n\nfunction\n\nconsole\n\nlog\n\n\"listening on port 3000\"\n\nTo test the server, click the big \"Run\" button at the top of your repl. You should see it installing packages, output the connection, and finally write listening on port 3000.\n\nComplete server code\u200b\n\nThe server code is done! Your completed code should look like this:\n\nconst\n\nexpress\n\nrequire\n\n\"express\"\n\nconst\n\napp\n\nexpress\n\nconst\n\nhttp\n\nrequire\n\n\"http\"\n\nconst\n\nserver\n\nhttp\n\nServer\n\napp\n\nconst\n\nsockets\n\nrequire\n\n\"socket.io\"\n\nio\n\nsockets\n\nserver\n\nio\n\non\n\n\"connection\"\n\nfunction\n\nconnection\n\nconnection\n\non\n\n\"message\"\n\nfunction\n\ndata\n\nconsole\n\nlog\n\n\"new message: \"\n\ndata\n\nio\n\nemit\n\n\"broadcast\"\n\ndata\n\nserver\n\nlisten\n\n3000\n\nfunction\n\nconsole\n\nlog\n\n\"listening on 3000\"\n\nBuilding the Chat Client\u200b\n\nCreate a new repl with Node.js as the chosen language. Give this repl a name, like \"repl-chat-client\".\n\nAdd the Socket client and readline modules\u200b\n\nAdd the Socket.io-client and readline module to the index.js file:\n\nconst\n\nio\n\nrequire\n\n\"socket.io-client\"\n\nconst\n\nreadline\n\nrequire\n\n\"readline\"\n\nCreate a new connection to the chat server\u200b\n\nAdd a connection to your chat server repl by adding the line:\n\nvar\n\nsocket\n\nio\n\n\"https://repl-chat-server.<your username>.repl.co\"\n\nReplace <your username> in the line above with your actual Replit username.\n\nSetup a console interface\u200b\n\nBecause we are creating this chat app purely in the repl console, we need to be able to read and write messages from the console. To help us do this, we'll use the readline module. Create the interface by adding this code:\n\nconst\n\nchat_interface\n\nreadline\n\ncreateInterface\n\ninput\n\nprocess\n\nstdin\n\noutput\n\nprocess\n\nstdout\n\nThe line input: process.stdin means that we will be getting user input from the Standard Input, which commonly means the console. Likewise, output: process.stdout means we will output messages to the Standard Output, i.e. the console.\n\nUser and message variables\u200b\n\nTo remember the user's chat handle (username) and the message they want to send, we'll set up two variables. Add this to your code:\n\nvar\n\nchat_handle\n\n\"\"\n\nvar\n\nmessage_to_send\n\n\"\"\n\nHandle Socket events\u200b\n\nWe are interested in two main events:\n\nWhen we successfully connect to the chat server.\n\nWhen the server broadcasts messages to us.\n\nAdd this code to connect to these events:\n\nsocket\n\non\n\n\"connect\"\n\nfunction\n\nget_chat_handle\n\nsocket\n\non\n\n\"broadcast\"\n\ndisplay_message\n\nYou'll notice this code calls two methods: get_chat_handle and display_message. We'll define these next.\n\nGetting the user chat handle\u200b\n\nOnce we're successfully connected to the server, we'll want to introduce the user. Add this function to your code:\n\n// Gets the user's name, so we can introduce and prepend each message with their name\n\nfunction\n\nget_chat_handle\n\nchat_interface\n\nquestion\n\nHello! What's your chat handle?\n\nfunction\n\nanswer\n\nchat_handle\n\nanswer\n\nsocket\n\nemit\n\n\"message\"\n\nchat_handle\n\n\" has entered the chat\"\n\nchat\n\nThis uses the interface we set up earlier to ask a question to the user: \"What's your chat handle?\". When we get the answer, we store it in the variable chat_handle that we added earlier. We then send this to the server using socket.emit(\"message\"). The server will get the message, and then broadcast it to all the other chat clients.\n\nFinally, we call the chat() function, which we will set up next.\n\nWaiting and sending user messages\u200b\n\nNow we'll implement the chat() function, which waits for a user's message and sends it to the server. Add this function to your code:\n\n// Waits for a new message to send\n\nfunction\n\nchat\n\nchat_interface\n\nquestion\n\nchat_handle\n\n\": \"\n\nfunction\n\nmessage\n\nmessage_to_send\n\nchat_handle\n\n\": \"\n\nmessage\n\nsocket\n\nemit\n\n\"message\"\n\nmessage_to_send\n\nchat\n\nThis code adds a prompt to the console with the user's chat_handle, and waits for them to enter a message. This is done through the chat_interface.question method. When they enter a message, we prepend it with the user's chat handle and save it to the variable message_to_send that we added earlier. Then we send this combined user chat handle and message to the server using socket.emit.", "start_char_idx": 0, "end_char_idx": 4248, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "48b61af6-6c81-4161-a3e1-44e64922a6f2": {"__data__": {"id_": "48b61af6-6c81-4161-a3e1-44e64922a6f2", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "238fd77e-4acd-4a21-8f61-84068bc768a6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "hash": "e05b7111bd65c4e71200c4fe4845891ca183633e8ce727b250cce77cd7f6c15d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c7d5cde1-5f98-4b83-8de3-5a60b9d7ad0a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "hash": "5e90914337efd144c55d603fa0c2ee4abb435d3e5edef7231a9b6c5567cad04e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2acdd917-b11a-4307-a687-f144d23fc209", "node_type": "1", "metadata": {}, "hash": "65c1e9ad8a32189843096c28c451e451d04ea9fa2a6227bb296bae75b63cc88c", "class_name": "RelatedNodeInfo"}}, "hash": "eec479d11bdd586b6d106399719ef080d518ea7a031c676173c5578c4a599bee", "text": "Finally, we call the chat() function, which we will set up next.\n\nWaiting and sending user messages\u200b\n\nNow we'll implement the chat() function, which waits for a user's message and sends it to the server. Add this function to your code:\n\n// Waits for a new message to send\n\nfunction\n\nchat\n\nchat_interface\n\nquestion\n\nchat_handle\n\n\": \"\n\nfunction\n\nmessage\n\nmessage_to_send\n\nchat_handle\n\n\": \"\n\nmessage\n\nsocket\n\nemit\n\n\"message\"\n\nmessage_to_send\n\nchat\n\nThis code adds a prompt to the console with the user's chat_handle, and waits for them to enter a message. This is done through the chat_interface.question method. When they enter a message, we prepend it with the user's chat handle and save it to the variable message_to_send that we added earlier. Then we send this combined user chat handle and message to the server using socket.emit. Finally, we call our chat() function again, to set up a prompt and wait for the next message.\n\nShowing messages from other users\u200b\n\nOur last function writes out messages that we receive from the server. We get these messages in this code we added earlier: socket.on('broadcast', display_message);\n\nThis code listened for any broadcast message, and then called the function display_message. We'll implement this function now.\n\nAdd the display_message function to your code:\n\n// Handles an incoming message, and checks to see that it is not the one we sent.\n\n// Shows it on the console if it is from another user.\n\nfunction\n\ndisplay_message\n\nmessage\n\nif\n\nmessage_to_send\n\n!=\n\nmessage\n\nconsole\n\nlog\n\n\"\\n\"\n\nmessage\n\nchat\n\nAs noted in the comment above the function declaration, this function first compares the incoming message to the last message the user sent, stored in the message_to_send variable. If the incoming message matches, the function ignores it and doesn't write it out. It would look pretty weird if a user sent a message, and then had it sent right back to them!\n\nIf it doesn't match (i.e it is a message from another user), then we write it to the console with a newline \\n preceding it. Then we wait for our user to send a reply by calling our chat() function again.\n\nComplete client code\u200b\n\nWe are done with the chat client code! The completed code should look like this:\n\nconst\n\nio\n\nrequire\n\n\"socket.io-client\"\n\nconst\n\nreadline\n\nrequire\n\n\"readline\"\n\nvar\n\nsocket\n\nio\n\n\"https://repl-chat-server.<your username>.repl.co\"\n\nconst\n\nchat_interface\n\nreadline\n\ncreateInterface\n\ninput\n\nprocess\n\nstdin\n\noutput\n\nprocess\n\nstdout\n\nvar\n\nchat_handle\n\n\"\"\n\nvar\n\nmessage_to_send\n\n\"\"\n\nsocket\n\non\n\n\"connect\"\n\nfunction\n\nget_chat_handle\n\nsocket\n\non\n\n\"broadcast\"\n\ndisplay_message\n\n// Gets the user's name, so we can introduce and append each message with their name\n\nfunction\n\nget_chat_handle\n\nchat_interface\n\nquestion\n\nHello! What's your chat handle?\n\nfunction\n\nanswer\n\nchat_handle\n\nanswer\n\nsocket\n\nemit\n\n\"message\"\n\nchat_handle\n\n\" has entered the chat\"\n\nchat\n\n// Waits for a new message to send\n\nfunction\n\nchat\n\nchat_interface\n\nquestion\n\nchat_handle\n\n\": \"\n\nfunction\n\nmessage\n\nmessage_to_send\n\nchat_handle\n\n\": \"\n\nmessage\n\nsocket\n\nemit\n\n\"message\"\n\nmessage_to_send\n\nchat\n\n// Handles an incoming message, and checks to see that it is not the one we sent.\n\n// Shows it on the console if it is from another user.\n\nfunction\n\ndisplay_message\n\nmessage\n\nif\n\nmessage_to_send\n\n!=\n\nmessage\n\nconsole\n\nlog\n\n\"\\n\"\n\nmessage\n\nchat\n\nRemember to replace <your username> in the Socket connection with your actual username on Replit!\n\nRunning the client app\u200b\n\nNow you can click the \"Run\" button at the top of the chat client repl to test the client app. You should see it installing packages, output the connection, and finally ask Hello! What's your chat handle?.\n\nThis assumes you are still running the chat server we created earlier.\n\nIf you type in a message to your client, you should see it logged on the server. The image below shows the repl console of the client on the left, and the repl console of the server on the right.\n\nChatting With a Friend\u200b\n\nNow that we've built a server and a client, we can chat with a buddy. Get a friend to copy the client code and run it in their own Replit account so that they can chat with you. Alternatively, share a link with them to your chat client repl.\n\nRun the chat server app. Then run your client app, and your friend's client app.", "start_char_idx": 3414, "end_char_idx": 7701, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2acdd917-b11a-4307-a687-f144d23fc209": {"__data__": {"id_": "2acdd917-b11a-4307-a687-f144d23fc209", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "238fd77e-4acd-4a21-8f61-84068bc768a6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "hash": "e05b7111bd65c4e71200c4fe4845891ca183633e8ce727b250cce77cd7f6c15d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "48b61af6-6c81-4161-a3e1-44e64922a6f2", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}, "hash": "eec479d11bdd586b6d106399719ef080d518ea7a031c676173c5578c4a599bee", "class_name": "RelatedNodeInfo"}}, "hash": "65c1e9ad8a32189843096c28c451e451d04ea9fa2a6227bb296bae75b63cc88c", "text": "Running the client app\u200b\n\nNow you can click the \"Run\" button at the top of the chat client repl to test the client app. You should see it installing packages, output the connection, and finally ask Hello! What's your chat handle?.\n\nThis assumes you are still running the chat server we created earlier.\n\nIf you type in a message to your client, you should see it logged on the server. The image below shows the repl console of the client on the left, and the repl console of the server on the right.\n\nChatting With a Friend\u200b\n\nNow that we've built a server and a client, we can chat with a buddy. Get a friend to copy the client code and run it in their own Replit account so that they can chat with you. Alternatively, share a link with them to your chat client repl.\n\nRun the chat server app. Then run your client app, and your friend's client app.\n\nYou should see the client apps prompt for your usernames. After you send them, they'll be shown on both clients and in the server logs. Now you can message each other from the repl console! Once you're comfortable that it works with a friend, you can invite others to join, too.\n\nMake it Your Own\u200b\n\nIf you followed along, you'll already have your own version of the chat server and chat client repl to extend. If not, start from ours. Fork the chat server or chat client from the repls embedded below.\n\nChat server\u200b\n\nChat client\u200b\n\nThings to Try Next\u200b\n\nYou can try some interesting things to spice up your chat app.\n\nTry using different colors on the message outputs \u2013 one for the user, and another for their chat friends. There are many modules available for this, one of them being colors.\n\nTry logging the server messages to the Replit database, so that you can restore previous chats.\n\n< Previous: Predictive text engine\n\nNext: Kaboom.js >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nOverview and Requirements\n\nCreate a Chat ServerAdd a web frameworkAdd a web serverExtend the server with Socket.ioListen for new connections and messagesStart up and test the serverComplete server code\n\nBuilding the Chat ClientAdd the Socket client and readline modulesCreate a new connection to the chat serverSetup a console interfaceUser and message variablesHandle Socket eventsGetting the user chat handleWaiting and sending user messagesShowing messages from other usersComplete client codeRunning the client app\n\nChatting With a Friend\n\nMake it Your OwnChat serverChat client\n\nThings to Try Next", "start_char_idx": 6853, "end_char_idx": 9298, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"238fd77e-4acd-4a21-8f61-84068bc768a6": {"node_ids": ["c7d5cde1-5f98-4b83-8de3-5a60b9d7ad0a", "48b61af6-6c81-4161-a3e1-44e64922a6f2", "2acdd917-b11a-4307-a687-f144d23fc209"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/repl-chat.html"}}}, "docstore/metadata": {"c7d5cde1-5f98-4b83-8de3-5a60b9d7ad0a": {"doc_hash": "5e90914337efd144c55d603fa0c2ee4abb435d3e5edef7231a9b6c5567cad04e", "ref_doc_id": "238fd77e-4acd-4a21-8f61-84068bc768a6"}, "48b61af6-6c81-4161-a3e1-44e64922a6f2": {"doc_hash": "eec479d11bdd586b6d106399719ef080d518ea7a031c676173c5578c4a599bee", "ref_doc_id": "238fd77e-4acd-4a21-8f61-84068bc768a6"}, "2acdd917-b11a-4307-a687-f144d23fc209": {"doc_hash": "65c1e9ad8a32189843096c28c451e451d04ea9fa2a6227bb296bae75b63cc88c", "ref_doc_id": "238fd77e-4acd-4a21-8f61-84068bc768a6"}}}