{"docstore/data": {"59163673-874c-4c59-8423-0f858fb3fd20": {"__data__": {"id_": "59163673-874c-4c59-8423-0f858fb3fd20", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76181b96-bedb-40e4-86ef-5fc8859db881", "node_type": "1", "metadata": {}, "hash": "02b62a0e4f9f378b95dc31c7146dc14b99cd5d6f99af3eb14ade4cd6de8465f3", "class_name": "RelatedNodeInfo"}}, "hash": "fd3441d583cb01e67af5f9340e8ac0911ab2a8fa49ea529820bbaf22f2eb4ee0", "text": "script.js\n\n</\n\nscript\n\n</\n\nbody\n\n</\n\nhtml\n\nNow we add the following CSS to our style.css file:\n\nWith this code, we are:\n\nbox-sizing\n\nborder-box\n\nbody\n\nmargin\n\npadding\n\n20\n\nrem\n\noverflow-x\n\nhidden\n\noverflow-y\n\nscroll\n\nbackground\n\n#262626\n\ncolor\n\nwhite\n\nfont-family\n\n\"Roboto\"\n\nsans-serif\n\ntext-rendering\n\noptimizeLegibility\n\nWith this code, we are:\n\nOverriding the default browser margins and padding applied to the <body> element.\n\nUsing overflow properties to prevent content from overflowing horizontally.\n\nForcing a scroll bar, regardless of whether vertical content overflows. This prevents interface elements from jumping around as the scroll bar appears and disappears.\n\nAdding some background and foreground colours.\n\nAdding routing\u200b\n\nAt the end of part 1, we loaded all our data at once. While this was helpful to validate that we can retrieve the data required, it doesn't provide the best user experience. We'll split the loading of data into specific pages or views as required.\n\nRouting is usually done by means of URL paths that correspond to specific HTML files located on a server. Alternatively, the server can also intercept HTTP requests and send back generated HTML to the browser. In our case, we want all routing to happen directly in the browser without sending new HTTP requests as pages change.\n\nTo accomplish this, we'll use hash routing. By placing a hash (# ) in our URL, we convert everything (including any URL paths) after the hash into a single string. Hashing functionality was originally added to URLs in order to have links scroll to specific positions on pages. For example, you can go directly to this section in the guide by following the #adding-routing link. Hashes are also super useful for emulating traditional routing in single-page applications. Nowadays, it is included under the hood in several routing libraries like React Router and the official Vue Router.\n\nBefore creating our routing function, let's first find and store our <main> HTML node using the \"app\" ID. This element will serve as the content area of our website (the area that is wrapped by the app shell and changes when the route changes).\n\nconst\n\nappNode\n\ndocument\n\nquerySelector\n\n\"#app\"\n\nThen we need to create a JavaScript object that maps the relationship between specific routes and the functions that create their HTML. For now, we will simply display the name of the page on the screen. Our map will end up looking something like this:\n\nconst\n\nroutesMap\n\nepisodes\n\n=>\n\n\"<div>episodes</div>\"\n\ntopics\n\n=>\n\n\"<div>topics</div>\"\n\nguests\n\n=>\n\n\"<div>guests</div>\"\n\nresources\n\n=>\n\n\"<div>resources</div>\"\n\nsponsors\n\n=>\n\n\"<div>sponsors</div>\"\n\nid\n\nid\n\n=>\n\n<div>single episode:\n\n${\n\nid\n\n</div>\n\nThen we get to the real task at hand; the routing function itself (called handleRouting):\n\nExtract the URL hash directly from the window.location object.\n\nUse a regular expression to remove the trailing characters at the start and the end of the hash string. For example, if we have #/id/21w67g2fi/ it will be converted into `id/21w67g2fi.\n\nSplit the value into an array based on all forward-slash characters (/). This means that our example would be split into ['id', '21w67g2fi'].\n\nOnce we've destructured the page name (the first \"folder\" in the path) and the optional trailing id value (the second \"folder\" in the path), we then retrieve the function that corresponds to that page. We proceed by calling it and passing an id value (if present). If no page value is supplied, the episodes page will be shown (which serves as the homepage and general fallback page). Furthermore, if you have a hash with no ID \u2013 for example, #/guests \u2013 then null will simply be passed to the specific route function as the ID.\n\nAfter the above, our function should look something like this:\n\nconst\n\nhandleRouting\n\nasync\n\n=>\n\nconst\n\nhash\n\nwindow\n\nlocation\n\nconst\n\npage\n\nid\n\nhash\n\nreplace\n\n^#\\/\n\n\"\"\n\nreplace\n\n\\/$\n\n\"\"\n\nsplit\n\n\"/\"\n\nconst\n\nrouteFn\n\nROUTES_MAP\n\npage\n\n||\n\n\"episodes\"\n\nappNode\n\ninnerText\n\nrouteFn\n\nid\n\n||\n\nnull\n\nBut our JavaScript doesn't do anything just yet. We need to manually call the routing function once the website loads. We also need to configure an event listener to fire the handleRouting function each time the URL hash changes.", "start_char_idx": 0, "end_char_idx": 4237, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76181b96-bedb-40e4-86ef-5fc8859db881": {"__data__": {"id_": "76181b96-bedb-40e4-86ef-5fc8859db881", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59163673-874c-4c59-8423-0f858fb3fd20", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "fd3441d583cb01e67af5f9340e8ac0911ab2a8fa49ea529820bbaf22f2eb4ee0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "33d6e394-cfa7-4dcf-9366-4b68e936c834", "node_type": "1", "metadata": {}, "hash": "58ef6d0b2cfcebee6afb75a7d1ab1ce9338ca5b8394bde1054d7cfda2668c5fe", "class_name": "RelatedNodeInfo"}}, "hash": "02b62a0e4f9f378b95dc31c7146dc14b99cd5d6f99af3eb14ade4cd6de8465f3", "text": "If no page value is supplied, the episodes page will be shown (which serves as the homepage and general fallback page). Furthermore, if you have a hash with no ID \u2013 for example, #/guests \u2013 then null will simply be passed to the specific route function as the ID.\n\nAfter the above, our function should look something like this:\n\nconst\n\nhandleRouting\n\nasync\n\n=>\n\nconst\n\nhash\n\nwindow\n\nlocation\n\nconst\n\npage\n\nid\n\nhash\n\nreplace\n\n^#\\/\n\n\"\"\n\nreplace\n\n\\/$\n\n\"\"\n\nsplit\n\n\"/\"\n\nconst\n\nrouteFn\n\nROUTES_MAP\n\npage\n\n||\n\n\"episodes\"\n\nappNode\n\ninnerText\n\nrouteFn\n\nid\n\n||\n\nnull\n\nBut our JavaScript doesn't do anything just yet. We need to manually call the routing function once the website loads. We also need to configure an event listener to fire the handleRouting function each time the URL hash changes. This will look like:\n\nhandleRouting\n\nwindow\n\naddEventListener\n\n\"hashchange\"\n\nhandleRouting\n\nWith the above functionality set up, we now need some way to trigger the page changes. We can add a simple header with links as below. Note that the header is part of the app shell and therefore goes above the <main id=\"app\"></main> element:\n\nheader\n\nnav\n\nul\n\nli\n\nhref\n\n#/episodes\n\nEpisodes\n\n</\n\n</\n\nli\n\nli\n\nhref\n\n#/topics\n\nTopics\n\n</\n\n</\n\nli\n\nli\n\nhref\n\n#/guests\n\nGuests\n\n</\n\n</\n\nli\n\nli\n\nhref\n\n#/resources\n\nResources\n\n</\n\n</\n\nli\n\nli\n\nhref\n\n#/sponsors\n\nSponsors\n\n</\n\n</\n\nli\n\n</\n\nul\n\n</\n\nnav\n\n</\n\nheader\n\nmain\n\nid\n\napp\n\n</\n\nmain\n\nWhen running your code, you will see the following:\n\nNote how the name of the route is both shown inside the <main id=\"app\"></main> element and updated in the URL as a user navigates to a new hash-based route.\n\nAdding styling\u200b\n\nWhile the above works, it isn't the most pleasing user experience. To this end, let's add some basic CSS class names.\n\nI'm using the BEM naming convention in my HTML class names. If you are unfamiliar with BEM and want to learn more, visit the BEM documentation at https://bem.info. For now, all you need to know about BEM is that it provides us with a systematic way of naming our CSS classes to manage them more easily. Within a static web project, BEM might be a bit overkill, but whenever you are working with an considerable amount of interactivity, BEM really helps to keep your CSS organized.", "start_char_idx": 3451, "end_char_idx": 5685, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "33d6e394-cfa7-4dcf-9366-4b68e936c834": {"__data__": {"id_": "33d6e394-cfa7-4dcf-9366-4b68e936c834", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "76181b96-bedb-40e4-86ef-5fc8859db881", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "02b62a0e4f9f378b95dc31c7146dc14b99cd5d6f99af3eb14ade4cd6de8465f3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "454e38a2-2e86-4162-848d-a8ff12115fb4", "node_type": "1", "metadata": {}, "hash": "3d437495fff9e0832277788626458057e755beea7651e55fb8a6420bd961566d", "class_name": "RelatedNodeInfo"}}, "hash": "58ef6d0b2cfcebee6afb75a7d1ab1ce9338ca5b8394bde1054d7cfda2668c5fe", "text": "Adding styling\u200b\n\nWhile the above works, it isn't the most pleasing user experience. To this end, let's add some basic CSS class names.\n\nI'm using the BEM naming convention in my HTML class names. If you are unfamiliar with BEM and want to learn more, visit the BEM documentation at https://bem.info. For now, all you need to know about BEM is that it provides us with a systematic way of naming our CSS classes to manage them more easily. Within a static web project, BEM might be a bit overkill, but whenever you are working with an considerable amount of interactivity, BEM really helps to keep your CSS organized.\n\nheader\n\nclass\n\nheader\n\ndiv\n\nclass\n\nheader__content\n\nh1\n\nclass\n\nheader__logo\n\nclass\n\nheader__link\n\nhref\n\nspan\n\nclass\n\nheader__large\n\nGraphQL\n\n</\n\nspan\n\nspan\n\nFM\n\n</\n\nspan\n\n</\n\nh1\n\n</\n\nnav\n\nclass\n\nheader__menu\n\nid\n\nmenu\n\nclass\n\nheader__button header__button_disabled\n\nhref\n\n#/episodes\n\nEpisodes\n\n</\n\nclass\n\nheader__button header__button_disabled\n\nhref\n\n#/topics\n\nTopics\n\n</\n\nclass\n\nheader__button header__button_disabled\n\nhref\n\n#/guests\n\nGuests\n\n</\n\nclass\n\nheader__button header__button_disabled\n\nhref\n\n#/resources\n\nResources\n\n</\n\nclass\n\nheader__button header__button_disabled\n\nhref\n\n#/sponsors\n\nSponsors\n\n</\n\n</\n\nnav\n\n</\n\ndiv\n\n</\n\nheader\n\nmain\n\nid\n\napp\n\n</\n\nmain\n\nWe can then apply the following CSS styling to our style.css file:\n\n.header\n\nbackground\n\nwhite\n\nposition\n\nrelative\n\n.header__logo\n\nfont-size\n\n1.5\n\nrem\n\nfont-weight\n\n900\n\nfont-style\n\nitalic\n\nuser-select\n\nnone\n\n.header__link\n\ntext-decoration\n\nnone\n\ncolor\n\n#c0a\n\n.header__link\n\n:hover\n\ncolor\n\n#95067d\n\n.header__content\n\nmax-width\n\n1200\n\npx\n\nmargin\n\nauto\n\ndisplay\n\nflex\n\nalign-items\n\ncenter\n\npadding\n\nrem\n\njustify-content\n\nspace-between\n\n.header__menu\n\nbackground\n\nwhite\n\ntop\n\n100\n\nleft\n\ndisplay\n\nflex\n\njustify-content\n\nflex-end\n\nz-index\n\ntransform-origin\n\ntop\n\n.header__large\n\nfont-size\n\nrem\n\nletter-spacing\n\n2\n\npx\n\n.header__button\n\ntext-align\n\ncenter\n\ntransition\n\nbackground\n\n0.3\n\nbackground\n\nnone\n\nborder\n\nnone\n\nfont-size\n\nrem\n\npadding\n\n2.5\n\nrem\n\nrem\n\nmargin\n\nfont-family\n\n\"Roboto\"\n\nsans-serif\n\ntext-rendering\n\noptimizeLegibility\n\ncolor\n\nblack\n\ntext-decoration\n\nnone\n\ndisplay\n\nblock\n\nwidth\n\n100\n\n.header__button_disabled\n\nopacity\n\n0.25\n\ncursor\n\ndefault\n\n.header__button\n\n:not\n\n.header__button_disabled\n\n:hover\n\nbackground\n\n#eee\n\ncursor\n\npointer\n\nThe above should provide us with a nicely designed app shell:\n\nMaking our web app responsive\u200b\n\nAs you resize your browser, you might notice that the above isn't fully responsive.\n\nUnfortunately, accommodating the above on mobile viewports will be a bit challenging due to restricted space. Luckily, we can add a \"Navigate\" button between the logo and the menu items. This button will open and close a vertically aligned list of pages when clicked, and will hide the list when clicked again. This is called progressive disclosure within the world of user experience.\n\nbutton\n\nclass\n\nheader__navigate\n\nid\n\nnavigate\n\nNavigate\n\n</\n\nbutton\n\nLet's adjust some of our existing CSS in order to make it a bit more usable on mobile:\n\n.header__logo\n\nfont-size\n\n1.5\n\nrem\n\nfont-weight\n\n900\n\nfont-style\n\nitalic\n\nuser-select\n\nnone\n\ndisplay\n\nnone\n\n.header__content\n\nmax-width\n\n1200\n\npx\n\nmargin\n\nauto\n\ndisplay\n\nflex\n\nalign-items\n\ncenter\n\npadding\n\nrem\n\njustify-content\n\ncenter\n\n.header__menu\n\nbackground\n\nwhite\n\nposition\n\nabsolute\n\ntop\n\n100\n\nleft\n\ndisplay\n\nflex\n\nflex-direction\n\ncolumn\n\njustify-content\n\nflex-end\n\nwidth\n\n100\n\ntransition\n\ntransform\n\n0.3\n\ntransform\n\nscaleY\n\nz-index\n\ntransform-origin\n\ntop\n\nborder-top\n\npx\n\nsolid\n\n#ccc\n\n.header__menu_active\n\ntransform\n\nscaleY\n\nWe'll also need to add some additional CSS for the HTML elements we just added. Further, we must add some media queries in order to transition between the above full-screen functionality and the mobile approach.", "start_char_idx": 5069, "end_char_idx": 8863, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "454e38a2-2e86-4162-848d-a8ff12115fb4": {"__data__": {"id_": "454e38a2-2e86-4162-848d-a8ff12115fb4", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "33d6e394-cfa7-4dcf-9366-4b68e936c834", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "58ef6d0b2cfcebee6afb75a7d1ab1ce9338ca5b8394bde1054d7cfda2668c5fe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a85cff3-2de6-4749-8b11-a9b30a5230c0", "node_type": "1", "metadata": {}, "hash": "4600246d16fc5cf09523f9441ef97bccb7dcd590c9b0f5524515884a433a8326", "class_name": "RelatedNodeInfo"}}, "hash": "3d437495fff9e0832277788626458057e755beea7651e55fb8a6420bd961566d", "text": "Further, we must add some media queries in order to transition between the above full-screen functionality and the mobile approach. Also note that we are using pseudo-elements to control the arrow in the button:\n\n.header__navigate\n\ndisplay\n\nflex\n\nalign-items\n\ncenter\n\nbackground\n\n#c0a\n\ncolor\n\nwhite\n\nfont-weight\n\n900\n\nfont-family\n\n\"Roboto\"\n\nsans-serif\n\ntext-rendering\n\noptimizeLegibility\n\npadding\n\nrem\n\n1.5\n\nrem\n\nborder\n\nnone\n\nfont-size\n\nrem\n\nborder-radius\n\n32\n\npx\n\ntext-transform\n\nuppercase\n\nletter-spacing\n\npx\n\ncursor\n\npointer\n\nmargin\n\nrem\n\n.header__navigate\n\n::after\n\ncontent\n\n\"\"\n\nmargin-left\n\nrem\n\ndisplay\n\nblock\n\nwidth\n\nheight\n\nborder\n\n0.5\n\nrem\n\nsolid\n\ntransparent\n\nborder-top-color\n\nwhite\n\ntransition\n\ntransform\n\n0.3\n\ntransform\n\nrotate\n\ndeg\n\ntranslateY\n\n0.25\n\nrem\n\n.header__navigate_active\n\n::after\n\ntransform\n\nrotate\n\n180\n\ndeg\n\ntranslateY\n\n0.4\n\nrem\n\n@media\n\nmin-width\n\n500\n\npx\n\n.header__logo\n\ndisplay\n\nblock\n\n@media\n\nmin-width\n\n500\n\npx\n\n.header__content\n\njustify-content\n\nspace-between\n\n@media\n\nmin-width\n\n900\n\npx\n\n.header__menu\n\nborder-top\n\nnone\n\ntransform\n\nscaleY\n\nflex-direction\n\nrow\n\nposition\n\nstatic\n\nwidth\n\nauto\n\n@media\n\nmin-width\n\n900\n\npx\n\n.header__navigate\n\ndisplay\n\nnone\n\nBy adding the above, our app shell will now work as follows on different screen sizes:\n\nWe're now controlling our routing exclusively through JavaScript instead of the default browser behaviour of loading a new HTML file. This means we need to toggle the CSS styling that indicates what page you are viewing. We'll do this using JavaScript in our routing function as follows:\n\nconst\n\nappNode\n\ndocument\n\nquerySelector\n\n\"#app\"\n\nconst\n\nnavigateNode\n\ndocument\n\nquerySelector\n\n\"#navigate\"\n\nconst\n\nmenuApp\n\ndocument\n\nquerySelector\n\n\"#menu\"\n\nlet\n\nnavigating\n\nfalse\n\nconst\n\ntoggleNavigate\n\nstate\n\n=>\n\nnavigateNode\n\nclassList\n\ntoggle\n\n\"header__navigate_active\"\n\nmenuApp\n\nclassList\n\ntoggle\n\n\"header__menu_active\"\n\nnavigate\n\nstate\n\n===\n\nundefined\n\nnavigate\n\nstate\n\nconst\n\nhandleRouting\n\nasync\n\n=>\n\nconst\n\nhash\n\nwindow\n\nlocation\n\nappNode\n\ninnerHTML\n\n\"Loading...\"\n\nconst\n\npage\n\nid\n\nhash\n\nreplace\n\n^#\\/\n\n\"\"\n\nreplace\n\n\\/$\n\n\"\"\n\nsplit\n\n\"/\"\n\nmenuApp\n\nquerySelectorAll\n\n\"a\"\n\nforEach\n\nnode\n\n=>\n\nconst\n\nvalue\n\nnode\n\ninnerText\n\ntoLowerCase\n\nif\n\nvalue\n\n===\n\npage\n\n||\n\nhash\n\n&&\n\nvalue\n\n===\n\n\"episodes\"\n\nnode\n\nclassList\n\nadd\n\n\"header__button_disabled\"\n\nelse\n\nnode\n\nclassList\n\nremove\n\n\"header__button_disabled\"\n\nconst\n\nroutesMap\n\nepisodes\n\n=>\n\n\"<div>episodes</div>\"\n\ntopics\n\n=>\n\n\"<div>topics</div>\"\n\nguests\n\n=>\n\n\"<div>guests</div>\"\n\nresources\n\n=>\n\n\"<div>resources</div>\"\n\nsponsors\n\n=>\n\n\"<div>sponsors</div>\"\n\nid\n\nid\n\n=>\n\n<div>single episode:\n\n${\n\nid\n\n</div>\n\nconst\n\nrouteFn\n\nroutesMap\n\npage\n\n||\n\n\"episodes\"\n\nappNode\n\ninnerHTML\n\nawait\n\nrouteFn\n\nid\n\n||\n\nnull\n\nif\n\nmenuApp\n\nclassList\n\ncontains\n\n\"header__menu_active\"\n\ntoggleNavigate\n\nfalse\n\nnavigateNode\n\naddEventListener\n\n\"click\"\n\ntoggleNavigate\n\nThe above retrieves all HTML elements with the class of header__button and then loops over them, converting their text value to lowercase and comparing it against the current route. If it matches the current route, then it is disabled since you can't go to the current page if you are already on it. However, this also serves as a (commonly used) visual cue to which page you are on at the moment. Furthermore, if the user is on mobile and the navigation list is open, then it is automatically closed upon loading the new page. Lastly, we are also adding a event listener to toggle the menu on mobile when a user clicks the navigate button.\n\nCreating Reusable Blocks\u200b\n\nNow that we have a working app shell, it's time to create the actual page content. A common approach is to create basic reusable HTML blocks to render your interface. This keeps our codeDRY. Luckily, BEM already provides us with a mental model to scope areas of HTML and CSS to specific reusable blocks.", "start_char_idx": 8732, "end_char_idx": 12561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a85cff3-2de6-4749-8b11-a9b30a5230c0": {"__data__": {"id_": "0a85cff3-2de6-4749-8b11-a9b30a5230c0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "454e38a2-2e86-4162-848d-a8ff12115fb4", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "3d437495fff9e0832277788626458057e755beea7651e55fb8a6420bd961566d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f72aa699-a7b2-4ea3-b4df-96fcc6abd75a", "node_type": "1", "metadata": {}, "hash": "8b5fd85a1d9037cae159758c82b0058795ee2068ee63415db7e3361d1a29df12", "class_name": "RelatedNodeInfo"}}, "hash": "4600246d16fc5cf09523f9441ef97bccb7dcd590c9b0f5524515884a433a8326", "text": "If it matches the current route, then it is disabled since you can't go to the current page if you are already on it. However, this also serves as a (commonly used) visual cue to which page you are on at the moment. Furthermore, if the user is on mobile and the navigation list is open, then it is automatically closed upon loading the new page. Lastly, we are also adding a event listener to toggle the menu on mobile when a user clicks the navigate button.\n\nCreating Reusable Blocks\u200b\n\nNow that we have a working app shell, it's time to create the actual page content. A common approach is to create basic reusable HTML blocks to render your interface. This keeps our codeDRY. Luckily, BEM already provides us with a mental model to scope areas of HTML and CSS to specific reusable blocks.\n\nBy consulting the information architecture we created in part 1, we can split our interface into the following reusable blocks:\n\nA hero section at the top of each page that contains either a title or the latest episode.\n\nA grid of card-like components that can be used to present a list of items as independent units.\n\nA details section that contains extra textual information about a specific subject.\n\nA divider component that we'll be using to divide different sections.\n\nAdding a hero image\u200b\n\nLet's start with the top-most block on our pages, often called a hero in web and print design. Starting out, we can create a simple implementation that merely displays the name of a page. We will also add an image in order to create a strong visual anchor.\n\nWe can add the following HTML:\n\ndiv\n\nclass\n\nhero\n\ndiv\n\nclass\n\nhero__content\n\nimg\n\nclass\n\nhero__image\n\nsrc\n\nhttps://images.unsplash.com/photo-1581368135153-a506cf13b1e1\n\n/>\n\nh2\n\nclass\n\nhero__title\n\nExample Title\n\n</\n\nh2\n\n</\n\ndiv\n\n</\n\ndiv\n\nWith the following CSS:\n\n.hero\n\nposition\n\nrelative\n\n.hero__image\n\nz-index\n\n1\n\nposition\n\nabsolute\n\nobject-fit\n\ncover\n\ntop\n\nleft\n\nwidth\n\n100\n\nheight\n\n100\n\nopacity\n\n0.2\n\n.hero__content\n\npadding\n\nrem\n\nrem\n\ntext-align\n\ncenter\n\nmax-width\n\n1200\n\npx\n\nmargin\n\nauto\n\n.hero__title\n\nfont-size\n\nrem\n\ncolor\n\nwhite\n\nfont-weight\n\n900\n\nletter-spacing\n\npx\n\nmargin\n\nWe are using postion: relative and z-index: -1 to position the image underneath the hero component. While you are able to achieve the same result by using background-image, we want to earmark the image as semantically meaningful. This means that accessibility devices and search engines will recognize the above as an image.\n\nThe above should now look like this.\n\nHowever, we want to include another variant of our hero block (to be used on the homepage and on single episode pages). This variant will embed a specific audio file and call to actions as required. To do this, we can modify our hero HTML code from above as follows:\n\ndiv\n\nclass\n\nhero\n\nimg\n\nclass\n\nhero__image\n\nsrc\n\nhttps://images.unsplash.com/photo-1581368135153-a506cf13b1e1\n\n/>\n\ndiv\n\nclass\n\nhero__content\n\nh2\n\nclass\n\nhero__subtitle\n\nExample Title\n\n</\n\nh2\n\ndiv\n\nclass\n\nhero__title\n\nAudio Title\n\n</\n\ndiv\n\naudio\n\nclass\n\nhero__player\n\ncontrols\n\ncontrols\n\nsource\n\nsrc\n\ntype\n\naudio/mp3\n\n/>\n\n</\n\naudio\n\ndiv\n\nclass\n\nhero__buttons-area\n\nclass\n\nhero__button\n\nhref\n\nClick me!", "start_char_idx": 11771, "end_char_idx": 14934, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f72aa699-a7b2-4ea3-b4df-96fcc6abd75a": {"__data__": {"id_": "f72aa699-a7b2-4ea3-b4df-96fcc6abd75a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a85cff3-2de6-4749-8b11-a9b30a5230c0", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "4600246d16fc5cf09523f9441ef97bccb7dcd590c9b0f5524515884a433a8326", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4dff8e96-9c44-4441-ab47-270e704b8018", "node_type": "1", "metadata": {}, "hash": "a9773b0c0601df39554f99d8cad9885b820d84bf2e25ee452e3d9ffbff1a1a0c", "class_name": "RelatedNodeInfo"}}, "hash": "8b5fd85a1d9037cae159758c82b0058795ee2068ee63415db7e3361d1a29df12", "text": "The above should now look like this.\n\nHowever, we want to include another variant of our hero block (to be used on the homepage and on single episode pages). This variant will embed a specific audio file and call to actions as required. To do this, we can modify our hero HTML code from above as follows:\n\ndiv\n\nclass\n\nhero\n\nimg\n\nclass\n\nhero__image\n\nsrc\n\nhttps://images.unsplash.com/photo-1581368135153-a506cf13b1e1\n\n/>\n\ndiv\n\nclass\n\nhero__content\n\nh2\n\nclass\n\nhero__subtitle\n\nExample Title\n\n</\n\nh2\n\ndiv\n\nclass\n\nhero__title\n\nAudio Title\n\n</\n\ndiv\n\naudio\n\nclass\n\nhero__player\n\ncontrols\n\ncontrols\n\nsource\n\nsrc\n\ntype\n\naudio/mp3\n\n/>\n\n</\n\naudio\n\ndiv\n\nclass\n\nhero__buttons-area\n\nclass\n\nhero__button\n\nhref\n\nClick me!\n\n</\n\n</\n\ndiv\n\n</\n\ndiv\n\n</\n\ndiv\n\nWe also need to add the following CSS to our style.css file:\n\n.hero__subtitle\n\nopacity\n\n0.5\n\nfont-size\n\nrem\n\ntext-transform\n\nuppercase\n\nletter-spacing\n\npx\n\ncolor\n\nwhite\n\nfont-weight\n\n400\n\nmargin\n\n.hero__player\n\nmargin\n\nrem\n\nrem\n\nwidth\n\n100\n\n.hero__buttons-area\n\ndisplay\n\nflex\n\njustify-content\n\ncenter\n\n.hero__button\n\ntext-decoration\n\nnone\n\nbackground\n\n#c0a\n\ncolor\n\nwhite\n\nfont-weight\n\n900\n\nfont-family\n\n\"Roboto\"\n\nsans-serif\n\ntext-rendering\n\noptimizeLegibility\n\npadding\n\nrem\n\n1.5\n\nrem\n\nborder\n\nnone\n\nfont-size\n\nrem\n\nborder-radius\n\n32\n\npx\n\ntext-transform\n\nuppercase\n\nletter-spacing\n\npx\n\ntransition\n\ntransform\n\n0.3\n\nbackground\n\n0.3\n\ntransform\n\nscale\n\n.hero__button_disabled\n\nopacity\n\n0.25\n\nbackground\n\ngrey\n\n.hero__button\n\n:not\n\n.hero__button_disabled\n\n:hover\n\nbackground\n\n#95067d\n\ncursor\n\npointer\n\ntransform\n\nscale\n\n1.1\n\nBy making the above changes, we are able to use the hero as follows as well:\n\nAdding a grid of cards\u200b\n\nNext, we'll look at ways of displaying items on the screen in a grid-like format. We will create a basic column-like structure. The key goal here is that the number of columns should change depending on the size of the screen:\n\nul\n\nclass\n\ncards\n\nli\n\nclass\n\ncards__wrap\n\nThis is a Card\n\n</\n\nli\n\nli\n\nclass\n\ncards__wrap\n\nThis is a Card\n\n</\n\nli\n\nli\n\nclass\n\ncards__wrap\n\nThis is a Card\n\n</\n\nli\n\nli\n\nclass\n\ncards__wrap\n\nThis is a Card\n\n</\n\nli\n\n</\n\nul\n\nBy adding the following CSS, we can set our grid to alternate between a single column, two or even three columns (depending on the available space):\n\n.cards\n\ndisplay\n\nflex\n\nflex-wrap\n\nwrap\n\nmargin\n\nauto\n\npadding\n\nmax-width\n\n1200\n\npx\n\nlist-style\n\nnone\n\nalign-items\n\ncenter\n\n.cards__wrap\n\npadding\n\nrem\n\nwidth\n\n100\n\n@media\n\nmin-width\n\n40\n\nrem\n\n.cards__wrap\n\nwidth\n\n50\n\n@media\n\nmin-width\n\n60\n\nrem\n\n.cards__wrap\n\nwidth\n\n33.33333333333333\n\nAfter adding the above, we should see the following behavior in our HTML:\n\nHowever, we still need to populate the columns with card components. We can create a single card with the code below. This element will then be repeated within the grid cells:\n\nsection\n\nclass\n\ncards__item\n\nimg\n\nclass\n\ncards__image\n\nsrc\n\nhttps://images.unsplash.com/photo-1581368135153-a506cf13b1e1\n\n/>\n\ndiv\n\nclass\n\ncards__content\n\nspan\n\nclass\n\ncard__subtitle\n\nExample Subtitle\n\n</\n\nspan\n\nh3\n\nclass\n\ncards__title\n\nExample Title\n\n</\n\nh3\n\nclass\n\ncards__button\n\nhref\n\nClick me!", "start_char_idx": 14229, "end_char_idx": 17317, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4dff8e96-9c44-4441-ab47-270e704b8018": {"__data__": {"id_": "4dff8e96-9c44-4441-ab47-270e704b8018", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f72aa699-a7b2-4ea3-b4df-96fcc6abd75a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "8b5fd85a1d9037cae159758c82b0058795ee2068ee63415db7e3361d1a29df12", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8b1f35c7-3fd0-4018-814b-611c05ad197b", "node_type": "1", "metadata": {}, "hash": "ea57f58ef546494f3b112e44075fca5908ecf13c8894b8e06b5b63edee337dc8", "class_name": "RelatedNodeInfo"}}, "hash": "a9773b0c0601df39554f99d8cad9885b820d84bf2e25ee452e3d9ffbff1a1a0c", "text": "We can create a single card with the code below. This element will then be repeated within the grid cells:\n\nsection\n\nclass\n\ncards__item\n\nimg\n\nclass\n\ncards__image\n\nsrc\n\nhttps://images.unsplash.com/photo-1581368135153-a506cf13b1e1\n\n/>\n\ndiv\n\nclass\n\ncards__content\n\nspan\n\nclass\n\ncard__subtitle\n\nExample Subtitle\n\n</\n\nspan\n\nh3\n\nclass\n\ncards__title\n\nExample Title\n\n</\n\nh3\n\nclass\n\ncards__button\n\nhref\n\nClick me!\n\n</\n\n</\n\ndiv\n\n</\n\nsection\n\nLet's add the following styling for our card components:\n\n.cards__item\n\ncolor\n\nrgba\n\n0.87\n\nbackground\n\nwhite\n\nborder-radius\n\npx\n\noverflow\n\nhidden\n\n.cards__content\n\npadding\n\nrem\n\n.cards__image\n\nwidth\n\n100\n\nheight\n\n200\n\npx\n\nobject-fit\n\ncover\n\n.cards__subtitle\n\ncolor\n\nrgba\n\n0.54\n\nfont-size\n\n0.75\n\nrem\n\ntext-transform\n\nuppercase\n\nline-height\n\nmargin\n\n0.25\n\nrem\n\n.cards__title\n\nfont-size\n\n1.5\n\nrem\n\nmargin\n\n0.25\n\nrem\n\nline-height\n\nword-break\n\nbreak-all\n\n.cards__button\n\ntext-decoration\n\nnone\n\ncursor\n\npointer\n\ndisplay\n\ninline-block\n\npadding\n\nrem\n\n1.5\n\nrem\n\nfont-size\n\nrem\n\nmargin\n\nrem\n\nrem\n\nborder\n\npx\n\n#c0a\n\nsolid\n\ntext-transform\n\nuppercase\n\ncolor\n\n#c0a\n\nbackground\n\nnone\n\nborder-radius\n\n32\n\npx\n\nfont-weight\n\n900\n\nfont-family\n\n\"Roboto\"\n\nsans-serif\n\ntext-rendering\n\noptimizeLegibility\n\ntransition\n\ntransform\n\n0.3\n\nbackground\n\n0.3\n\ntransform\n\nscale\n\n.cards__button\n\n:hover\n\nbackground\n\n#cc00aa24\n\ntransform\n\nscale\n\n1.1\n\nThe above should create a single card element as follows:\n\nAdding some details\u200b\n\nA lot of the content returned from our endpoint will be in markdown format. We've included the Markdown It library in our HTML app shell. However, we are pushing up against the limits of the BEM methodology here (which is not uncommon) because we aren't able to assign CSS class names directly to the HTML elements created by Markdown It.\n\nTo that end, we will wrap all the element tag selectors (which is not allowed by BEM), inside a block called \"details\". We'll do it as follows:\n\n.details\n\ndisplay\n\nflex\n\nflex-wrap\n\nwrap\n\nmargin\n\nauto\n\npadding\n\nrem\n\nmax-width\n\n1200\n\npx\n\nlist-style\n\nnone\n\ncolor\n\nwhite\n\nflex-direction\n\ncolumn\n\n.details\n\ncolor\n\nwhite\n\n.details\n\n:hover\n\nmargin\n\n0.5\n\nrem\n\n0.25\n\nrem\n\npadding\n\n0.5\n\nrem\n\n0.25\n\nrem\n\nbackground\n\nrgba\n\n255\n\n255\n\n255\n\n0.2\n\nborder-radius\n\npx\n\n.details\n\nul\n\npadding-left\n\nrem\n\n.details\n\nli\n\nline-height\n\n1.75\n\nWe can then add the following HTML in order to test the above approach:\n\ndiv\n\nclass\n\ndetails\n\ndiv\n\nclass\n\ndetails__description\n\nHello World!\n\n</\n\nhref\n\nClick me!\n\n</\n\nul\n\nli\n\nItem 1\n\n</\n\nli\n\nli\n\nItem 2\n\n</\n\nli\n\n</\n\nul\n\n</\n\ndiv\n\n</\n\ndiv\n\nThis should render the following within our interface:\n\nAdding a divider to separate sections\u200b\n\nNext, we'll add an HTML block that allows us to separate different sections on a page.\n\ndiv\n\nclass\n\n\"divider\"\n\ndiv\n\nclass\n\n\"diver__content\"\n\nh2\n\nclass\n\n\"divider__title\"\n\nExample\n\nTitle\n\nh2\n\nimg\n\nclass\n\n\"divider__image\"\n\nsrc\n\n\"https://images.unsplash.com/photo-1581368135153-a506cf13b1e1\"\n\ndiv\n\ndiv\n\n.divider\n\ncolor\n\nwhite\n\nmax-width\n\n1200\n\npx\n\nmargin\n\nauto\n\npadding\n\nrem\n\nrem\n\n0.5\n\nrem\n\n.diver__content\n\njustify-content\n\nspace-between\n\nalign-items\n\nflex-end\n\nborder-bottom\n\npx\n\ngrey\n\nsolid\n\ndisplay\n\nflex\n\npadding-bottom\n\n0.5\n\nrem\n\n.divider__title\n\nmargin\n\n.divider__image\n\nmargin-top\n\nrem\n\nborder-radius\n\n50\n\nwidth\n\n10\n\nrem\n\nheight\n\n10\n\nrem\n\nobject-fit\n\ncover\n\nAdding a loader\u200b\n\nLastly, we'll want to display some type of animated loader to users when data is being loaded from the endpoint.", "start_char_idx": 16913, "end_char_idx": 20322, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8b1f35c7-3fd0-4018-814b-611c05ad197b": {"__data__": {"id_": "8b1f35c7-3fd0-4018-814b-611c05ad197b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4dff8e96-9c44-4441-ab47-270e704b8018", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a9773b0c0601df39554f99d8cad9885b820d84bf2e25ee452e3d9ffbff1a1a0c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "db254db0-33c2-4286-8dca-8eace247b8c2", "node_type": "1", "metadata": {}, "hash": "f4a295059105773ebd55f3ee95a2603fe4df2db708573e2832c6d19ef9853109", "class_name": "RelatedNodeInfo"}}, "hash": "ea57f58ef546494f3b112e44075fca5908ecf13c8894b8e06b5b63edee337dc8", "text": "span\n\nclass\n\nloader\n\n</\n\nspan\n\n@keyframes\n\nspin\n\n0%\n\ntransform\n\nrotate\n\ndeg\n\n100%\n\ntransform\n\nrotate\n\n360\n\ndeg\n\n.loader\n\nanimation\n\nspin\n\n0.6\n\nlinear\n\ninfinite\n\ndisplay\n\nblock\n\nborder\n\npx\n\nsolid\n\ngrey\n\nborder-top\n\npx\n\nsolid\n\nwhite\n\nborder-radius\n\n50\n\nwidth\n\nrem\n\nheight\n\nrem\n\nmargin\n\nrem\n\nauto\n\nUp to now, we've been showing users a \"Loading...\" piece of text. To have our website start off as loading we need to add the loader into our <main> element in the HTML. We also want to replace the current app node with a loader when a user changes the current page. You can achieve this with:\n\nappNode\n\ninnerHTML\n\n'<span class=\"loader\"></span>'\n\nAdding Some Final Touches\u200b\n\nMost of the preparatory work is done and we can get down to actually linking our GraphQL endpoint to our routes. We will do this by creating a date-specific conversion utility function and then creating functions that return our reusable HTML blocks (based on data passed to the function). Lastly, we will tie all of the above together by creating an asynchronous function for each route.\n\nDoing date conversion\u200b\n\nAll date-specific data is stored on GraphCMS as ISO 8601 strings.", "start_char_idx": 20324, "end_char_idx": 21473, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "db254db0-33c2-4286-8dca-8eace247b8c2": {"__data__": {"id_": "db254db0-33c2-4286-8dca-8eace247b8c2", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8b1f35c7-3fd0-4018-814b-611c05ad197b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "ea57f58ef546494f3b112e44075fca5908ecf13c8894b8e06b5b63edee337dc8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c4f9bd8-f6a7-4633-bca0-bf3f72bcb021", "node_type": "1", "metadata": {}, "hash": "cd776c6c617dfb09f52194777a01d64f5816e61ed188e2dd7bc33d1ded0782fa", "class_name": "RelatedNodeInfo"}}, "hash": "f4a295059105773ebd55f3ee95a2603fe4df2db708573e2832c6d19ef9853109", "text": "To have our website start off as loading we need to add the loader into our <main> element in the HTML. We also want to replace the current app node with a loader when a user changes the current page. You can achieve this with:\n\nappNode\n\ninnerHTML\n\n'<span class=\"loader\"></span>'\n\nAdding Some Final Touches\u200b\n\nMost of the preparatory work is done and we can get down to actually linking our GraphQL endpoint to our routes. We will do this by creating a date-specific conversion utility function and then creating functions that return our reusable HTML blocks (based on data passed to the function). Lastly, we will tie all of the above together by creating an asynchronous function for each route.\n\nDoing date conversion\u200b\n\nAll date-specific data is stored on GraphCMS as ISO 8601 strings. This means that we need to run the following function on dates in order to convert them into a more human readable format (for example: \"20 October 2015\"):\n\nconst\n\nMONTHS\n\n\"January\"\n\n\"February\"\n\n\"March\"\n\n\"April\"\n\n\"May\"\n\n\"June\"\n\n\"July\"\n\n\"August\"\n\n\"September\"\n\n\"October\"\n\n\"November\"\n\n\"December\"\n\nconst\n\nconvertToPrettyDate\n\ndateString\n\n=>\n\nconst\n\ndateObj\n\nnew\n\nDate\n\ndateString\n\nconst\n\nday\n\ndateObj\n\ngetDate\n\nconst\n\nmonth\n\nMONTHS\n\ndateObj\n\ngetMonth\n\nconst\n\nyear\n\ndateObj\n\ngetFullYear\n\nreturn\n\n${\n\nday\n\n${\n\nmonth\n\n${\n\nyear\n\nAdding reusable block functions\u200b\n\nGiven that we've already created all our lower-level reusable HTML blocks, we can create the following four functions that create them programmatically:\n\nconst\n\ncreateHeroBlock\n\nprops\n\n=>\n\nconst\n\nimageUrl\n\ntitle\n\nsubtitle\n\nfile\n\nmime\n\nbuttons\n\nprops\n\nif\n\nimageUrl\n\n||\n\ntitle\n\nthrow\n\nnew\n\nError\n\n'No \"imageUrl\" and/or \"title\" values supplied'\n\nconst\n\naudioHtml\n\nfile\n\n||\n\nmime\n\n\"\"\n\n<audio class=\"hero__player\" controls=\"controls\">\n\n<source src=\"\n\n${\n\nencodeURI\n\nfile\n\n\" type=\"\n\n${\n\nmime\n\n\"/>\n\n</audio>\n\nconst\n\nsubtitleHtml\n\nsubtitle\n\n\"\"\n\n<span class=\"hero__subtitle\">\n\n${\n\nsubtitle\n\n</span>\n\nconst\n\nbuttonsHtml\n\nbuttons\n\nlength\n\n\"\"\n\n<div class=\"hero__buttons-area\">\n\n${\n\nbuttons\n\nmap\n\nlabel\n\nlink\n\n\"\"\n\ndisabled\n\n=>\n\n${\n\ndisabled\n\n\"span\"\n\n\"a\"\n\nclass=\"hero__button\n\n${\n\ndisabled\n\n\"hero__button_disabled\"\n\n\"\"\n\nhref=\"\n\n${\n\nencodeURI\n\nlink\n\n${\n\nlabel\n\n</\n\n${\n\ndisabled\n\n\"span\"\n\n\"a\"\n\njoin\n\n\"\"\n\n</div>\n\nreturn\n\n<div class=\"hero\">\n\n<img\n\nclass=\"hero__image\"\n\nsrc=\"\n\n${\n\nencodeURI\n\nimageUrl\n\n<div class=\"hero__content\">\n\n${\n\nsubtitleHtml\n\n<h2 class=\"hero__title\">\n\n${\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\n</h2>\n\n${\n\naudioHtml\n\n${\n\nbuttonsHtml\n\n</div>\n\n</div>\n\nconst\n\ncreateCardsGridBlock\n\nprops\n\n=>\n\nconst\n\ncards\n\nprops\n\nif\n\ncards\n\n||\n\ncards\n\nlength\n\nthrow\n\nnew\n\nError\n\n\"No cards supplied\"\n\nreturn\n\n<ul class=\"cards\">\n\n${\n\ncards\n\nmap\n\ntitle\n\nsubtitle\n\nimageUrl\n\nlinkLabel\n\nlinkUrl\n\n=>\n\nif\n\ntitle\n\nthrow\n\nnew\n\nError\n\n'No \"title\" value supplied'\n\nconst\n\nlinkHtml\n\nlinkLabel\n\n||\n\nlinkUrl\n\n\"\"\n\n<a class=\"cards__button\" href=\"\n\n${\n\nlinkUrl\n\n\">\n\n${\n\nlinkLabel\n\n</a>\n\nconst\n\nsubtitleHtml\n\nsubtitle\n\n\"\"\n\n<span class=\"cards__subtitle\">\n\n${\n\nsubtitle\n\n</span>\n\nconst\n\nimageHtml\n\nimageUrl\n\n\"\"\n\n<img class=\"cards__image\" src=\"\n\n${\n\nimageUrl\n\n\">\n\nreturn\n\n<li class=\"cards__wrap\">\n\n<section class=\"cards__item\">\n\n${\n\nimageHtml\n\n<div class=\"cards__content\">\n\n${\n\nsubtitleHtml\n\n<h3 class=\"cards__title\">\n\n${\n\ntitle\n\n</h3>\n\n${\n\nlinkHtml\n\n</div>\n\n</section>\n\n</li>\n\njoin\n\n\"\"\n\n</ul>\n\nconst\n\ncreateDetailsBlock\n\nprops\n\n=>\n\nconst\n\nmarkdown\n\nlist\n\nprops\n\nif\n\nlist\n\nlength\n\nreturn\n\n<ul class=\"details\">\n\n${\n\nlist\n\nmap\n\nitem\n\n=>\n\n<li>\n\n${\n\nitem\n\n<li>\n\njoin\n\n\"\"\n\n</ul>\n\nreturn\n\n<div class=\"details\">\n\n${\n\nmarkdownit\n\nhtml\n\ntrue\n\nrender\n\nmarkdown\n\n</div>\n\nconst\n\ncreateDividerBlock\n\nprops\n\n=>\n\nconst\n\ntitle\n\nimageUrl\n\nprops\n\nconst\n\nimageHtml\n\nimageUrl\n\n\"\"\n\n<img class=\"divider__image\" src=\"\n\n${\n\nimageUrl\n\n\"/>\n\nreturn\n\n<div class=\"divider\">\n\n<div class=\"diver__content\">\n\n<h2 class=\"divider__title\">\n\n${\n\ntitle\n\n</h2>\n\n${\n\nimageHtml\n\n</div>\n\n</div>\n\nAdding page-level functions\u200b\n\nWith all our HTML block functions in place, we can start co-configuring them into specific pages and pass all required data straight from each page's GraphQL response into the respective HTML blocks.", "start_char_idx": 20685, "end_char_idx": 24760, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c4f9bd8-f6a7-4633-bca0-bf3f72bcb021": {"__data__": {"id_": "2c4f9bd8-f6a7-4633-bca0-bf3f72bcb021", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "db254db0-33c2-4286-8dca-8eace247b8c2", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "f4a295059105773ebd55f3ee95a2603fe4df2db708573e2832c6d19ef9853109", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9e17e3bc-6886-4bef-bb2a-a363c5a9bdbf", "node_type": "1", "metadata": {}, "hash": "17b913d0f9dec44d36d9ab84fc988ac30942c89bd7ecdae528ccdb9f6bb9337c", "class_name": "RelatedNodeInfo"}}, "hash": "cd776c6c617dfb09f52194777a01d64f5816e61ed188e2dd7bc33d1ded0782fa", "text": "const\n\ncreateEpisodesPage\n\nasync\n\n=>\n\nconst\n\nfirst\n\nlatest\n\nprevious\n\nawait\n\ngqlQuery\n\nEPISODES_PAGE_QUERY\n\nconst\n\ndividerHtml\n\ncreateDividerBlock\n\ntitle\n\n\"Previous Episodes\"\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\nimageUrl\n\nlatest\n\nimage\n\nurl\n\ntitle\n\nlatest\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\nsubtitle\n\n\"Latest Episode\"\n\nfile\n\nlatest\n\naudio\n\nurl\n\nmime\n\nlatest\n\naudio\n\nmime\n\nbuttons\n\nlink\n\n#/id/\n\n${\n\nlatest\n\nid\n\nlabel\n\n\"View Episode\"\n\nconst\n\ncardsHtml\n\ncreateCardsGridBlock\n\ncards\n\nprevious\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\nsubtitle\n\nconvertToPrettyDate\n\nitem\n\ndate\n\nimageUrl\n\nitem\n\nimage\n\nurl\n\nlinkLabel\n\n\"View Episode\"\n\nlinkUrl\n\n#/id/\n\n${\n\nitem\n\nid\n\nreturn\n\n${\n\nheroHtml\n\n${\n\ndividerHtml\n\n${\n\ncardsHtml\n\nconst\n\ncreateGuestsPage\n\nasync\n\n=>\n\nconst\n\npeoples\n\nawait\n\ngqlQuery\n\nGUESTS_PAGE_QUERY\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\ntitle\n\n\"Guests\"\n\nimageUrl\n\n\"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\"\n\nconst\n\nguestHtml\n\npeoples\n\nfilter\n\nepisodes\n\nlength\n\n=>\n\nlength\n\nmap\n\nfullName\n\nepisodes\n\nphoto\n\nurl\n\nimgageUrl\n\n=>\n\nconst\n\ndividerHtml\n\ncreateDividerBlock\n\ntitle\n\nfullName\n\nimgageUrl\n\nconst\n\ncardHtml\n\ncreateCardsGridBlock\n\ncards\n\nepisodes\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\nsubtitle\n\nconvertToPrettyDate\n\nitem\n\ndate\n\nimageUrl\n\nitem\n\nimage\n\nurl\n\nlinkLabel\n\n\"View Episode\"\n\nlinkUrl\n\n#/id/\n\n${\n\nitem\n\nid\n\nreturn\n\n${\n\ndividerHtml\n\n${\n\ncardHtml\n\njoin\n\n\"\"\n\nreturn\n\n${\n\nheroHtml\n\n${\n\nguestHtml\n\nconst\n\ncreateTopicsPage\n\nasync\n\n=>\n\nconst\n\ntags\n\nawait\n\ngqlQuery\n\nTOPICS_PAGE_QUERY\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\ntitle\n\n\"Topics\"\n\nimageUrl\n\n\"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\"\n\nconst\n\ntopicsHtml\n\ntags\n\nmap\n\nname\n\nepisodes\n\n=>\n\nconst\n\ndividerHtml\n\ncreateDividerBlock\n\ntitle\n\nname\n\nconst\n\ncardsHtml\n\ncreateCardsGridBlock\n\ncards\n\nepisodes\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\nimageUrl\n\nitem\n\nimage\n\nurl\n\nsubtitle\n\nconvertToPrettyDate\n\nitem\n\ndate\n\nlinkLabel\n\n\"View Episode\"\n\nlinkUrl\n\n#/id/\n\n${\n\nitem\n\nid\n\nreturn\n\n${\n\ndividerHtml\n\n${\n\ncardsHtml\n\njoin\n\n\"\"\n\nreturn\n\n${\n\nheroHtml\n\n${\n\ntopicsHtml\n\nconst\n\ncreateResourcesPage\n\nasync\n\n=>\n\nconst\n\nassets\n\nawait\n\ngqlQuery\n\nRESOURCES_PAGE_QUERY\n\nconst\n\ndividerHtml\n\ncreateDividerBlock\n\ntitle\n\n\"Files\"\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\ntitle\n\n\"Resources\"\n\nimageUrl\n\n\"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\"\n\nconst\n\ncardsHtml\n\ncreateCardsGridBlock\n\ncards\n\nassets\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\nfileName\n\nsubtitle\n\nitem\n\nmimeType\n\nlinkLabel\n\n\"View File\"\n\nlinkUrl\n\nitem\n\nurl\n\nreturn\n\n${\n\nheroHtml\n\n${\n\ndividerHtml\n\n${\n\ncardsHtml\n\nconst\n\ncreateSponsorsPage\n\nasync\n\n=>\n\nconst\n\nsponsorships\n\nawait\n\ngqlQuery\n\nSPONSORS_PAGE_QUERY\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\ntitle\n\n\"Sponsors\"\n\nimageUrl\n\n\"https://images.unsplash.", "start_char_idx": 24762, "end_char_idx": 27511, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9e17e3bc-6886-4bef-bb2a-a363c5a9bdbf": {"__data__": {"id_": "9e17e3bc-6886-4bef-bb2a-a363c5a9bdbf", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9c8be8e0-3350-498f-bd27-75120553ca31", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "a12a87b6df637d1f943e5ca2de895668f577f80c136420cf97aa6e17f760bec3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c4f9bd8-f6a7-4633-bca0-bf3f72bcb021", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}, "hash": "cd776c6c617dfb09f52194777a01d64f5816e61ed188e2dd7bc33d1ded0782fa", "class_name": "RelatedNodeInfo"}}, "hash": "17b913d0f9dec44d36d9ab84fc988ac30942c89bd7ecdae528ccdb9f6bb9337c", "text": "unsplash.com/photo-1460058418905-d61a1b4a55fe\"\n\nconst\n\ncardsHtml\n\ncreateCardsGridBlock\n\ncards\n\nassets\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\nfileName\n\nsubtitle\n\nitem\n\nmimeType\n\nlinkLabel\n\n\"View File\"\n\nlinkUrl\n\nitem\n\nurl\n\nreturn\n\n${\n\nheroHtml\n\n${\n\ndividerHtml\n\n${\n\ncardsHtml\n\nconst\n\ncreateSponsorsPage\n\nasync\n\n=>\n\nconst\n\nsponsorships\n\nawait\n\ngqlQuery\n\nSPONSORS_PAGE_QUERY\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\ntitle\n\n\"Sponsors\"\n\nimageUrl\n\n\"https://images.unsplash.com/photo-1460058418905-d61a1b4a55fe\"\n\nconst\n\nsponsorsHtml\n\nsponsorships\n\nmap\n\ncompany\n\nname\n\nepisodes\n\n=>\n\nconst\n\ndividerHtml\n\ncreateDividerBlock\n\ntitle\n\nname\n\nconst\n\ncardsHtml\n\ncreateCardsGridBlock\n\ncards\n\nepisodes\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\nimageUrl\n\nitem\n\nimage\n\nurl\n\nsubtitle\n\nconvertToPrettyDate\n\nitem\n\ndate\n\nlinkLabel\n\n\"View Episode\"\n\nlinkUrl\n\n#/id/\n\n${\n\nitem\n\nid\n\nreturn\n\n${\n\ndividerHtml\n\n${\n\ncardsHtml\n\njoin\n\n\"\"\n\nreturn\n\n${\n\nheroHtml\n\n${\n\nsponsorsHtml\n\nconst\n\ncreateSingleEpisodePage\n\nasync\n\nvalue\n\n=>\n\nconst\n\nepisode\n\ntitle\n\ndate\n\ndescription\n\nnumber\n\nnotes\n\nguests\n\ntags\n\nsponsors\n\naudio\n\nurl\n\nmime\n\nimage\n\nurl\n\nimageUrl\n\nawait\n\ngqlQuery\n\nSINGLE_EPISODE_PAGE_QUERY\n\nid\n\nvalue\n\nconst\n\nprevious\n\nnext\n\nawait\n\ngqlQuery\n\nSINGLE_EPISODE_NEIGHBORS_QUERY\n\nprevious\n\nnumber\n\nnext\n\nnumber\n\nconst\n\nheroHtml\n\ncreateHeroBlock\n\nimageUrl\n\nimageUrl\n\ntitle\n\ntitle\n\nreplace\n\n\\#\n\n\"\"\n\nsubtitle\n\nconvertToPrettyDate\n\ndate\n\nfile\n\nurl\n\nmime\n\nmime\n\nbuttons\n\nprevious\n\nnext\n\nmap\n\nbutton\n\nindex\n\n=>\n\nlabel\n\nindex\n\n===\n\n\"\u25c4 Previous Episode\"\n\n\" Next Episode \u25ba\"\n\nlink\n\nbutton\n\n\"\"\n\n#/id/\n\n${\n\nbutton\n\nid\n\ndisabled\n\nbutton\n\nconst\n\nguestHtml\n\nguests\n\nlength\n\n\"\"\n\ncreateCardsGridBlock\n\ncards\n\nguests\n\nmap\n\nitem\n\n=>\n\ntitle\n\nitem\n\nfullName\n\nimageUrl\n\nitem\n\nphoto\n\nurl\n\nconst\n\ndescriptionHtml\n\ndescription\n\n\"\"\n\n${\n\ncreateDividerBlock\n\ntitle\n\n\"Description\"\n\n${\n\ncreateDetailsBlock\n\nmarkdown\n\nmarkdownit\n\nrender\n\ndescription\n\nconst\n\ntopicsHtml\n\ntags\n\nlength\n\n\"\"\n\n${\n\ncreateDividerBlock\n\ntitle\n\n\"Topics\"\n\n${\n\ncreateDetailsBlock\n\nlist\n\ntags\n\nmap\n\nname\n\n=>\n\nname\n\nconst\n\nsponsorsHtml\n\nsponsors\n\nlength\n\n\"\"\n\n${\n\ncreateDividerBlock\n\ntitle\n\n\"Sponsors\"\n\n${\n\ncreateDetailsBlock\n\nlist\n\nsponsors\n\nmap\n\ncompany\n\n=>\n\ncompany\n\nname\n\nconst\n\nnotesHtml\n\ndescription\n\n\"\"\n\n${\n\ncreateDividerBlock\n\ntitle\n\n\"Show Notes\"\n\n${\n\ncreateDetailsBlock\n\nmarkdown\n\nmarkdownit\n\nrender\n\nnotes\n\nreturn\n\n${\n\nheroHtml\n\n${\n\ndescriptionHtml\n\n${\n\ncreateDividerBlock\n\ntitle\n\n\"Guests\"\n\n${\n\nguestHtml\n\n${\n\ntopicsHtml\n\n${\n\nsponsorsHtml\n\n${\n\nnotesHtml\n\nWhere Next?\u200b\n\nWe've touched on many GraphQL concepts in this tutorial. However, we've barely scratched the surface. For a deeper understanding of GraphQL, consult the official GraphQL documentation or follow along to the completely free How To GraphQL Resources.\n\nIf you followed along, you can keep adding features to your version. If you want to start from ours, you can find it below.\n\n< Previous: GraphQL Part 1: Setting up endpoints\n\nNext: Online store checkout with Stripe >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nUnderstanding the App Shell Model\n\nAdding Some Global ConfigurationsAdding routingAdding stylingMaking our web app responsive\n\nCreating Reusable BlocksAdding a hero imageAdding a grid of cardsAdding some detailsAdding a divider to separate sectionsAdding a loader\n\nAdding Some Final TouchesDoing date conversionAdding reusable block functionsAdding page-level functions\n\nWhere Next?", "start_char_idx": 27061, "end_char_idx": 30433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9c8be8e0-3350-498f-bd27-75120553ca31": {"node_ids": ["59163673-874c-4c59-8423-0f858fb3fd20", "76181b96-bedb-40e4-86ef-5fc8859db881", "33d6e394-cfa7-4dcf-9366-4b68e936c834", "454e38a2-2e86-4162-848d-a8ff12115fb4", "0a85cff3-2de6-4749-8b11-a9b30a5230c0", "f72aa699-a7b2-4ea3-b4df-96fcc6abd75a", "4dff8e96-9c44-4441-ab47-270e704b8018", "8b1f35c7-3fd0-4018-814b-611c05ad197b", "db254db0-33c2-4286-8dca-8eace247b8c2", "2c4f9bd8-f6a7-4633-bca0-bf3f72bcb021", "9e17e3bc-6886-4bef-bb2a-a363c5a9bdbf"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/graphql-project-part-2.html"}}}, "docstore/metadata": {"59163673-874c-4c59-8423-0f858fb3fd20": {"doc_hash": "fd3441d583cb01e67af5f9340e8ac0911ab2a8fa49ea529820bbaf22f2eb4ee0", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "76181b96-bedb-40e4-86ef-5fc8859db881": {"doc_hash": "02b62a0e4f9f378b95dc31c7146dc14b99cd5d6f99af3eb14ade4cd6de8465f3", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "33d6e394-cfa7-4dcf-9366-4b68e936c834": {"doc_hash": "58ef6d0b2cfcebee6afb75a7d1ab1ce9338ca5b8394bde1054d7cfda2668c5fe", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "454e38a2-2e86-4162-848d-a8ff12115fb4": {"doc_hash": "3d437495fff9e0832277788626458057e755beea7651e55fb8a6420bd961566d", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "0a85cff3-2de6-4749-8b11-a9b30a5230c0": {"doc_hash": "4600246d16fc5cf09523f9441ef97bccb7dcd590c9b0f5524515884a433a8326", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "f72aa699-a7b2-4ea3-b4df-96fcc6abd75a": {"doc_hash": "8b5fd85a1d9037cae159758c82b0058795ee2068ee63415db7e3361d1a29df12", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "4dff8e96-9c44-4441-ab47-270e704b8018": {"doc_hash": "a9773b0c0601df39554f99d8cad9885b820d84bf2e25ee452e3d9ffbff1a1a0c", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "8b1f35c7-3fd0-4018-814b-611c05ad197b": {"doc_hash": "ea57f58ef546494f3b112e44075fca5908ecf13c8894b8e06b5b63edee337dc8", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "db254db0-33c2-4286-8dca-8eace247b8c2": {"doc_hash": "f4a295059105773ebd55f3ee95a2603fe4df2db708573e2832c6d19ef9853109", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "2c4f9bd8-f6a7-4633-bca0-bf3f72bcb021": {"doc_hash": "cd776c6c617dfb09f52194777a01d64f5816e61ed188e2dd7bc33d1ded0782fa", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}, "9e17e3bc-6886-4bef-bb2a-a363c5a9bdbf": {"doc_hash": "17b913d0f9dec44d36d9ab84fc988ac30942c89bd7ecdae528ccdb9f6bb9337c", "ref_doc_id": "9c8be8e0-3350-498f-bd27-75120553ca31"}}}