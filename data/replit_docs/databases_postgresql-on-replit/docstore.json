{"docstore/data": {"64d4a5cf-ec1f-498e-9883-f4ed577e814c": {"__data__": {"id_": "64d4a5cf-ec1f-498e-9883-f4ed577e814c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/postgresql-on-replit.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ff6d7b4f-3a59-4368-8db4-50a58a578f0e", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/postgresql-on-replit.html"}, "hash": "0edc1d3ea36a10c3a1bbda9045d17475857b199dd20b08b7a978a3c8a0631ce7", "class_name": "RelatedNodeInfo"}}, "hash": "ad095d50eb2047a112c1354e5e3a367a7a3114f99002903028b954441c097be7", "text": "table\n\ninteger\n\n\"points\"\n\n// Add a demo user to the table with 0 points\n\nawait\n\nknex\n\n\"users\"\n\ninsert\n\nusername\n\n\"alice\"\n\npoints\n\n// Increment the points by 1\n\nawait\n\nknex\n\n\"users\"\n\nwhere\n\n\"username\"\n\n\"alice\"\n\nupdate\n\npoints\n\nknex\n\nraw\n\n\"points + 1\"\n\n// Get the user\n\nconst\n\nuser\n\nawait\n\nknex\n\n\"users\"\n\nwhere\n\n\"username\"\n\n\"alice\"\n\nfirst\n\n// Print the user\n\nconsole\n\nlog\n\nuser\n\n// Delete the user\n\nawait\n\nknex\n\n\"users\"\n\nwhere\n\n\"username\"\n\n\"alice\"\n\ndelete\n\nUsage (Python)\u200b\n\nPreparation\u200b\n\nUse the Packager to install psycopg2\n\nConnect to the DB with psycopg2 using the URL secretimport psycopg2.pool# Create a connection pool with a min_size of 0 and a max_size of 80# Use the `DATABASE_URL` environment variable we provide to connect to the Database# It is included in your Replit environment automatically (no need to set it up)pool = psycopg2.pool.SimpleConnectionPool(0, 80, process.env.DATABASE_URL)# Get a connection from the poolconn = pool.getconn()# Create a cursor using the connectioncur = conn.cursor()# Do your database operations using the cursor# <Your code goes here># Close the cursor and return the connection to the poolcur.close()pool.putconn(conn)# When you are done using the pool, close it to release the resourcespool.closeall()\n\nCode\u200b\n\nCreate a tablecur.execute(    \"\"\"    CREATE TABLE users (        id SERIAL PRIMARY KEY,        username VARCHAR(255),        points INTEGER    )    \"\"\")\n\nInsert a rowcur.execute(    \"\"\"    INSERT INTO users (username, points)    VALUES (%s, %s)    \"\"\",    ('alice', 0))\n\nUpdate the rowcur.execute(    \"\"\"    UPDATE users    SET points = points + 1    WHERE username = %s    \"\"\",    ('alice',))\n\nGet the rowcur.execute(    \"\"\"    SELECT *    FROM users    WHERE username = %s    \"\"\",    ('alice',))user = cur.fetchone()\n\nPrint the row to the consoleprint(user)\n\nDelete the rowcur.execute(    \"\"\"    DELETE FROM users    WHERE username = %s    \"\"\",    ('alice',))\n\nFinal Code\u200b\n\nimport\n\npsycopg2\n\npool\n\n# Create a connection pool with a min_size of 0 and a max_size of 80\n\n# Use the `DATABASE_URL` environment variable we provide to connect to the Database\n\n# It is included in your Replit environment automatically (no need to set it up)\n\npool\n\npsycopg2\n\npool\n\nSimpleConnectionPool\n\n80\n\nprocess\n\nenv\n\nDATABASE_URL\n\n# Get a connection from the pool\n\nconn\n\npool\n\ngetconn\n\n# Create a cursor using the connection\n\ncur\n\nconn\n\ncursor\n\n# Do your database operations using the cursor\n\n# Create a demo table called \"users\"\n\ncur\n\nexecute\n\n\"\"\"\n\nCREATE TABLE users (\n\nid SERIAL PRIMARY KEY,\n\nusername VARCHAR(255),\n\npoints INTEGER\n\n\"\"\"\n\n# Add a demo user to the table with 0 points\n\ncur\n\nexecute\n\n\"\"\"\n\nINSERT INTO users (username, points)\n\nVALUES (%s, %s)\n\n\"\"\"\n\n'alice'\n\n# Increment the points by 1\n\ncur\n\nexecute\n\n\"\"\"\n\nUPDATE users\n\nSET points = points + 1\n\nWHERE username = %s\n\n\"\"\"\n\n'alice'\n\n# Get the user\n\ncur\n\nexecute\n\n\"\"\"\n\nSELECT *\n\nFROM users\n\nWHERE username = %s\n\n\"\"\"\n\n'alice'\n\nuser\n\ncur\n\nfetchone\n\n# Print the user\n\nprint\n\nuser\n\n# Delete the user\n\ncur\n\nexecute\n\n\"\"\"\n\nDELETE FROM users\n\nWHERE username = %s\n\n\"\"\"\n\n'alice'\n\n# Close the cursor and return the connection to the pool\n\ncur\n\nclose\n\npool\n\nputconn\n\nconn\n\n# When you are done using the pool, close it to release the resources\n\npool\n\ncloseall\n\n< Previous: Databases\n\nNext: Replit Database >\n\nWas this helpful?\n\nLast updated on Nov 14, 2023\n\nWhat is PostgreSQL?\n\nWhy use PostgreSQL?\n\nSetup\n\nBilling\n\nSQL Explorer\n\nUsage (NodeJS)PreparationCodeFinal Code\n\nUsage (Python)PreparationCodeFinal Code", "start_char_idx": 0, "end_char_idx": 3500, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"ff6d7b4f-3a59-4368-8db4-50a58a578f0e": {"node_ids": ["64d4a5cf-ec1f-498e-9883-f4ed577e814c"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/postgresql-on-replit.html"}}}, "docstore/metadata": {"64d4a5cf-ec1f-498e-9883-f4ed577e814c": {"doc_hash": "ad095d50eb2047a112c1354e5e3a367a7a3114f99002903028b954441c097be7", "ref_doc_id": "ff6d7b4f-3a59-4368-8db4-50a58a578f0e"}}}