{"docstore/data": {"a21a12aa-eb94-4f20-a925-053789418364": {"__data__": {"id_": "a21a12aa-eb94-4f20-a925-053789418364", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0052db0d-7004-4254-8d82-7b619f76c7b7", "node_type": "1", "metadata": {}, "hash": "c09c9c02d35b1557ae56a3311d5a1ba9319d3e70ddc6acbac34cf5b383b822f8", "class_name": "RelatedNodeInfo"}}, "hash": "cecc8c1b889fa8927f161400a64fc69d75ee39e86675e1004a04adefabd7e46c", "text": "head\n\nbody\n\nbutton\n\nclass\n\nstart-btn\n\ndata-content\n\nStart\n\nStart\n\n</\n\nbutton\n\ndiv\n\nclass\n\nscore\n\nScore:\n\nspan\n\n</\n\nspan\n\n</\n\ndiv\n\ndiv\n\nclass\n\ngrid\n\n</\n\ndiv\n\ndiv\n\nclass\n\nkeys-container\n\nbutton\n\nid\n\nArrowUp\n\nsvg\n\nwidth\n\n30\n\nheight\n\n30\n\nviewBox\n\n0 0 10 10\n\ntransform\n\nrotate(0, 5, 5)\n\npath\n\nM5,4 L7,6 L3,6 L5,4\n\n/>\n\n</\n\n</\n\nsvg\n\n</\n\nbutton\n\nbutton\n\nid\n\nArrowLeft\n\nsvg\n\nwidth\n\n30\n\nheight\n\n30\n\nviewBox\n\n0 0 10 10\n\ntransform\n\nrotate(-90, 5, 5)\n\npath\n\nM5,4 L7,6 L3,6 L5,4\n\n/>\n\n</\n\n</\n\nsvg\n\n</\n\nbutton\n\nbutton\n\nid\n\nArrowDown\n\nsvg\n\nwidth\n\n30\n\nheight\n\n30\n\nviewBox\n\n0 0 10 10\n\ntransform\n\nrotate(180, 5, 5)\n\npath\n\nM5,4 L7,6 L3,6 L5,4\n\n/>\n\n</\n\n</\n\nsvg\n\n</\n\nbutton\n\nbutton\n\nid\n\nArrowRight\n\nsvg\n\nwidth\n\n30\n\nheight\n\n30\n\nviewBox\n\n0 0 10 10\n\ntransform\n\nrotate(90, 5, 5)\n\npath\n\nM5,4 L7,6 L3,6 L5,4\n\n/>\n\n</\n\n</\n\nsvg\n\n</\n\nbutton\n\n</\n\ndiv\n\n</\n\nbody\n\n</\n\nhtml\n\nmodule features in our script. The\n\nAdding the CSS\u200b\n\nNow let's add some basic styling. Replace the code in your style.css file with the following code:\n\n:root\n\n--color-button\n\n#f78400\n\n--color-button-after\n\n#f5f5f5\n\n--color-button\n\n#424246\n\n--color-border\n\n#373737\n\nmargin\n\nhtml\n\nfont-family\n\n\"Trebuchet MS\"\n\n\"Lucida Sans Unicode\"\n\n\"Lucida Grande\"\n\n\"Lucida Sans\"\n\nArial\n\nsans-serif\n\nbody\n\ndisplay\n\nflex\n\nflex-direction\n\ncolumn\n\nalign-items\n\ncenter\n\njustify-content\n\ncenter\n\nheight\n\n100\n\nvh\n\nbutton\n\ncursor\n\npointer\n\n.grid\n\ndisplay\n\nflex\n\nflex-wrap\n\nwrap\n\nborder\n\npx\n\nsolid\n\nvar\n\n--color-border\n\nmin-height\n\n200\n\npx\n\nmin-width\n\n200\n\npx\n\n.start-btn\n\nposition\n\nrelative\n\nfont-size\n\n1.15\n\nrem\n\nfont-weight\n\nbold\n\nbackground\n\nvar\n\n--color-button\n\npadding\n\n0.6\n\nrem\n\nrem\n\nmargin\n\nrem\n\nborder\n\n.start-btn\n\n::after\n\nposition\n\nabsolute\n\ncontent\n\nattr\n\ndata-content\n\nwidth\n\n100\n\nheight\n\n100\n\ntop\n\nleft\n\nbox-shadow\n\ninset\n\npx\n\nvar\n\n--color-border\n\nbackground-color\n\nvar\n\n--color-button-after\n\ndisplay\n\nflex\n\nalign-items\n\ncenter\n\njustify-content\n\ncenter\n\ntransform\n\ntranslate\n\n0.2\n\nrem\n\n0.2\n\nrem\n\ntransition\n\ntransform\n\n0.3\n\ncubic-bezier\n\n0.34\n\n1.56\n\n0.64\n\n.start-btn\n\n:hover\n\n::after\n\n.start-btn\n\n:focus\n\n::after\n\ntransform\n\ntranslate\n\n.grid\n\ndiv\n\ntransition\n\ntransform\n\n0.4\n\nease\n\n.food-item\n\ntransform\n\nscale\n\n1.15\n\n.keys-container\n\ndisplay\n\ngrid\n\ngrid-template-columns\n\n50\n\npx\n\n50\n\npx\n\n50\n\npx\n\ngrid-template-rows\n\nauto\n\ngrid-template-areas\n\n\".    up   .\"\n\n\"left down right\"\n\ngrid-gap\n\n10\n\npx\n\npadding\n\nrem\n\n.keys-container\n\nbutton\n\nbackground-color\n\nvar\n\n--color-button-after\n\nborder\n\nnone\n\npadding\n\n0.5\n\nrem\n\nbox-shadow\n\npx\n\npx\n\npx\n\nrgba\n\n0.3\n\ntransition\n\nall\n\n0.3\n\nease\n\n.keys-container\n\nbutton\n\n:focus\n\nbox-shadow\n\npx\n\npx\n\npx\n\nrgba\n\n0.3\n\n#ArrowUp\n\ngrid-area\n\nup\n\n#ArrowDown\n\ngrid-area\n\ndown\n\n#ArrowLeft\n\ngrid-area\n\nleft\n\n#ArrowRight\n\ngrid-area\n\nright\n\n.shake\n\nanimation\n\nshake\n\n0.5\n\nlinear\n\n@keyframes\n\nshake\n\n10%\n\n90%\n\ntransform\n\ntranslate3d\n\n1\n\npx\n\n20%\n\n80%\n\ntransform\n\ntranslate3d\n\npx\n\n30%\n\n50%\n\n70%\n\ntransform\n\ntranslate3d\n\n4\n\npx\n\n40%\n\n60%\n\ntransform\n\ntranslate3d\n\npx\n\nCSS variables to store the colors that we'll use. The\n\npseudo-element.", "start_char_idx": 0, "end_char_idx": 2976, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0052db0d-7004-4254-8d82-7b619f76c7b7": {"__data__": {"id_": "0052db0d-7004-4254-8d82-7b619f76c7b7", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a21a12aa-eb94-4f20-a925-053789418364", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "cecc8c1b889fa8927f161400a64fc69d75ee39e86675e1004a04adefabd7e46c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a7b6f1d-2d93-45bb-8fc3-a280607bfbf7", "node_type": "1", "metadata": {}, "hash": "804df105549af177690ceb4b603164a244a2d140669443b28a8c7d35dd2daa61", "class_name": "RelatedNodeInfo"}}, "hash": "c09c9c02d35b1557ae56a3311d5a1ba9319d3e70ddc6acbac34cf5b383b822f8", "text": "The\n\npseudo-element. This is done to give the button a layered effect. The\n\ndata attribute to label the button. The data attribute\n\nkeyframe animation will be used to shake the game grid when the snake hits the walls or itself.\n\nSetting up the JavaScript structure\u200b\n\nReplace the code in your script.js file with the following code:\n\nimport\n\nrandomElementFromArray\n\nwait\n\nfrom\n\n\"./utils.js\"\n\nconst\n\nfoodItemsArray\n\n\"\ud83d\udc01\"\n\n\"\ud83c\udf47\"\n\n\"\ud83c\udf49\"\n\n\"\ud83c\udf48\"\n\n\"\ud83c\udf53\"\n\n\"\ud83c\udf4d\"\n\n\"\ud83c\udf4c\"\n\n\"\ud83e\udd5d\"\n\n\"\ud83c\udf4f\"\n\n\"\ud83c\udf4e\"\n\n\"\ud83c\udf54\"\n\n\"\ud83c\udf45\"\n\n\"\ud83e\udd5a\"\n\nWe import the utility functions that we'll soon create. The foodItemsArray variable contains the food items that will be randomly selected and added to the game grid. You can change the food item emojis if you want to.\n\nAdding utility functions\u200b\n\nAdd the following lines to the utils.js file:\n\nexport\n\nfunction\n\nwait\n\nms\n\nreturn\n\nnew\n\nPromise\n\nresolve\n\n=>\n\nsetTimeout\n\nresolve\n\nms\n\nexport\n\nfunction\n\nrandomElementFromArray\n\narr\n\nconst\n\nelement\n\narr\n\nMath\n\nfloor\n\nMath\n\nrandom\n\narr\n\nlength\n\nreturn\n\nelement\n\nThe wait function takes in a time, in milliseconds, as an argument. It returns a promise that resolves after the time passed in has elapsed. We'll use it to pause an async function that will be used in the game. The randomElementFromArray function takes in an array as an argument and returns a randomly selected element from the array. We'll use it to randomly select a food item from the foodItemsArray variable.\n\nNow try running the code, by pushing the Run button at the top of the Replit window. You should see the start and arrow buttons:\n\nBuilding the game logic\u200b\n\nBefore we start coding the game logic, let's look at an overview of how we'll design the game.\n\nGame overview\u200b\n\nThere are four main functions we'll use to make the game:\n\nstartGame\n\ngameLoop\n\ncreateFood\n\nmoveSnake\n\nWe'll run the startGame function when the user clicks start button. In this function, the game grid cells are cleared, the snake and a randomly positioned food item are added to the game grid, and the gameLoop function is run. We run gameLoop every x milliseconds by using setInterval. The snake moves one cell in each game loop.\n\nIn the gameLoop function, we check for collisions with the wall of the game grid or the snake itself. We also check if the snake head is in the same cell as a food item. If it is, we remove the food item and create a new randomly positioned food item using the createFood function. The snake length is increased by adding a new tail index to the currentSnake array. We also increase the score.\n\nThe snake's body, stored in the currentSnake variable, is represented as an array indicating the cell indexes of the snake. The first element in the array is the snake's head, and the last element in the array is the snake's tail. The game grid cells containing the snake are given a class of snake so that we can detect collisions. We use the cell index positions to style the snake: giving the snake cells a background color and giving the snake head two eyes.\n\nThe game grid cell containing the food item is given a class of food-item so that we can detect when the snake collides with this (and eats the food). The cell index of the food item is stored so that we can find the food item cell and place the food item emoji in it. When the game grid is cleared at the start of the game, these added classes are removed from each cell and the cell's inner text content is cleared.\n\nThe user can move the snake using the keyboard arrow keys or by clicking the arrow keys on the screen. We listen for the \"keydown\", \"mousedown\" or \"touchstart\" events on the arrow keys and use the moveSnake function to change the direction of the snake. These events change the direction variable value. This variable determines which direction the snake moves. In each game loop, the direction value will be added to the cell index position of the snake's head to give the snake a new head position. The snake's tail will be removed. The direction value indicates the change in index position required for the snake's head to move one cell in the current direction, The direction values are as follows:\n\nright: +1\n\nleft: -1\n\nup: -10\n\ndown: +10\n\nNow let's create the game.", "start_char_idx": 2956, "end_char_idx": 7110, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a7b6f1d-2d93-45bb-8fc3-a280607bfbf7": {"__data__": {"id_": "6a7b6f1d-2d93-45bb-8fc3-a280607bfbf7", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0052db0d-7004-4254-8d82-7b619f76c7b7", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "c09c9c02d35b1557ae56a3311d5a1ba9319d3e70ddc6acbac34cf5b383b822f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "622c8abf-317a-4ef1-ba67-31d93aba39e0", "node_type": "1", "metadata": {}, "hash": "831c20dd4a435e8902cf6c0dcb0f9e14130975df84963bdef47c2dd9e4fa301a", "class_name": "RelatedNodeInfo"}}, "hash": "804df105549af177690ceb4b603164a244a2d140669443b28a8c7d35dd2daa61", "text": "The user can move the snake using the keyboard arrow keys or by clicking the arrow keys on the screen. We listen for the \"keydown\", \"mousedown\" or \"touchstart\" events on the arrow keys and use the moveSnake function to change the direction of the snake. These events change the direction variable value. This variable determines which direction the snake moves. In each game loop, the direction value will be added to the cell index position of the snake's head to give the snake a new head position. The snake's tail will be removed. The direction value indicates the change in index position required for the snake's head to move one cell in the current direction, The direction values are as follows:\n\nright: +1\n\nleft: -1\n\nup: -10\n\ndown: +10\n\nNow let's create the game.\n\nCreating the game grid\u200b\n\nAdd the following lines to the script.js file:\n\n// game display elements\n\nconst\n\ngrid\n\ndocument\n\nquerySelector\n\n\".grid\"\n\nconst\n\nscoreDisplay\n\ndocument\n\nquerySelector\n\n\"span\"\n\nconst\n\nstartBtn\n\ndocument\n\nquerySelector\n\n\".start-btn\"\n\nconst\n\nkeyBtns\n\ndocument\n\nquerySelectorAll\n\n\".keys-container button\"\n\n// game variables\n\nconst\n\nwidth\n\n10\n\nconst\n\nnumCells\n\nwidth\n\nwidth\n\ngrid\n\nstyle\n\nwidth\n\n${\n\nwidth\n\n10\n\npx\n\ngrid\n\nstyle\n\nheight\n\n${\n\nwidth\n\n10\n\npx\n\n// create grid cells\n\nfor\n\nlet\n\nwidth\n\nwidth\n\n++\n\nconst\n\ncell\n\ndocument\n\ncreateElement\n\n\"div\"\n\ncell\n\nstyle\n\nwidth\n\n${\n\nwidth\n\npx\n\ncell\n\nstyle\n\nheight\n\n${\n\nwidth\n\npx\n\ngrid\n\nappendChild\n\ncell\n\nconst\n\ncells\n\ndocument\n\nquerySelectorAll\n\n\".grid div\"\n\nWe first get the game display HTML elements from the DOM. We'll only use the grid element now. We then create some of the game variables that we'll need. We set the width to 10 cells and set the game grid's width and height based on the width variable. The square grid is 200 px wide.\n\nWe then create the grid cells using a for loop. The number of cells is equal to the width squared. We create each cell using the createElement method. Each square cell is 20 px wide. We then append each cell to the grid. The grid is a flex container and the cells, which are flex items, wrap after each row, which is 10 cells long. We then select the cells using the querySelectorAll method for later use.\n\nRun your code again and you should now be able to see our game grid as a square below the \"Start\" button.\n\nAdding the snake\u200b\n\nAdd the following game variables in the // game variables section in the script.js file:\n\nlet\n\ncurrentSnake\n\nlet\n\nsnakeColor\n\nMath\n\nfloor\n\nMath\n\nrandom\n\n360\n\nlet\n\nsnakeColorIncrement\n\n10\n\nNow add the following function and event listener to the bottom of the script.js file:\n\nfunction\n\nstartGame\n\ncurrentSnake\n\ncurrentSnake\n\nforEach\n\n=>\n\nsnakeColor\n\n+=\n\nsnakeColorIncrement\n\n360\n\ncells\n\nstyle\n\nbackground\n\nhsl(\n\n${\n\nsnakeColor\n\n, 100%, 50%)\n\ncells\n\nclassList\n\nadd\n\n\"snake\"\n\nstartBtn\n\naddEventListener\n\n\"click\"\n\nstartGame\n\nWe define the snake's position on the game grid as an array called currentSnake. This indicates the index position of the snake's head [2], body [1] and tail [0] in the game grid. All of the middle elements are the snake's body. At the start of the game, the snake only has one body segment. We also style the snake's body segments using hsla()functional notation. This is done to give our snake a \"rainbow\" color that changes as it moves. We create a random color value for the hue called snakeColor. This has a value between 0 degrees to 360 degrees. It represents an angle of the color circle: Red = 0 degrees = 360 degrees, green = 120 degrees, blue = 240 degrees, etc.\n\nWe loop through the snake segments and give each cell that contains the snake a color. The color changes for each segment as the snakeColor increases in each loop. We also add the class of snake to the game grid cells containing the snake.\n\nNow run the code again and then press the \"Start\" button in the game UI to see the snake on the game grid:\n\nEach time you press the \"Start\" button, the snake's color will change. Inspect the snake cells in your browser dev tools. You will see the added snake class and the added background color.", "start_char_idx": 6338, "end_char_idx": 10384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "622c8abf-317a-4ef1-ba67-31d93aba39e0": {"__data__": {"id_": "622c8abf-317a-4ef1-ba67-31d93aba39e0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a7b6f1d-2d93-45bb-8fc3-a280607bfbf7", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "804df105549af177690ceb4b603164a244a2d140669443b28a8c7d35dd2daa61", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7000c457-06a3-4c2c-8385-a61d797755ba", "node_type": "1", "metadata": {}, "hash": "6fa879ffa99e936ceaf22cd36e7623ee7a9c67a3dcbe474e7b9e7d0a33b0e8cc", "class_name": "RelatedNodeInfo"}}, "hash": "831c20dd4a435e8902cf6c0dcb0f9e14130975df84963bdef47c2dd9e4fa301a", "text": "This is done to give our snake a \"rainbow\" color that changes as it moves. We create a random color value for the hue called snakeColor. This has a value between 0 degrees to 360 degrees. It represents an angle of the color circle: Red = 0 degrees = 360 degrees, green = 120 degrees, blue = 240 degrees, etc.\n\nWe loop through the snake segments and give each cell that contains the snake a color. The color changes for each segment as the snakeColor increases in each loop. We also add the class of snake to the game grid cells containing the snake.\n\nNow run the code again and then press the \"Start\" button in the game UI to see the snake on the game grid:\n\nEach time you press the \"Start\" button, the snake's color will change. Inspect the snake cells in your browser dev tools. You will see the added snake class and the added background color.\n\nMoving the snake\u200b\n\nLet's get the snake moving by adding the gameLoop function. Add the following game variables in the // game variables section in the script.js file:\n\nlet\n\ndirection\n\nlet\n\nintervalTime\n\n200\n\n// determines speed - frequency of game loop calls\n\nlet\n\ninterval\n\nWe set the initial direction to one. In each game loop, the snake's index position in the game grid will increase by one, so the snake will move to the right. The game loop will run five times per second as the interval time is set to 200 ms. The interval variable will be the returned intervalID from the setInterval function that we'll use to run the game loop continuously. The interval variable will be used to cancel the interval so that the game loop is stopped when there is a collision.\n\nAdd the following code inside the startGame function, at the top:\n\ncurrentSnake\n\nforEach\n\n=>\n\ncells\n\nstyle\n\nbackground\n\n\"none\"\n\ncells\n\nclassList\n\nremove\n\n\"snake\"\n\ncells\n\ninnerText\n\n\"\"\n\nclearInterval\n\ninterval\n\ndirection\n\nAt the start of a game, we remove the snake from the game grid cells. We clear the interval to remove any previous interval and set the direction to it's initial value.\n\nNow add the gameLoop function below the startGame function:\n\nfunction\n\ngameLoop\n\ncells\n\ncurrentSnake\n\ninnerText\n\n\"\"\n\nconst\n\ntail\n\ncurrentSnake\n\npop\n\ncells\n\ntail\n\nclassList\n\nremove\n\n\"snake\"\n\ncells\n\ntail\n\nstyle\n\nbackground\n\n\"none\"\n\ncurrentSnake\n\nunshift\n\ncurrentSnake\n\ndirection\n\n// gives direction to the head\n\ncells\n\ncurrentSnake\n\nclassList\n\nadd\n\n\"snake\"\n\ncells\n\ncurrentSnake\n\ninnerText\n\n\"\ud83d\udc40\"\n\nsnakeColor\n\n+=\n\nsnakeColorIncrement\n\n360\n\ncells\n\ncurrentSnake\n\nstyle\n\nbackground\n\nhsl(\n\n${\n\nsnakeColor\n\n, 100%, 50%)\n\nWe first clear the innerText of the current snake head to remove the emoji eyes from the current snake head. We then remove the tail and add a new head. To get the index of the new head position in the game grid, we add a new head that has an index of the current snake head plus the current direction. We then style the new head by giving it emoji eyes and a background color.\n\nWe also need to call the game loop at the start of the game. Add the following to the startGame function, at the bottom:\n\ninterval\n\nsetInterval\n\ngameLoop\n\nintervalTime\n\nNow press the start button to see the snake move along the game grid:\n\nThe snake moves from index 0 to 99, incrementing its position by one in each game loop.\n\nControlling the snake\u200b\n\nWe'll add a \"keydown\" event listener and an event handler function to control the snake movement with our keyboard arrow keys. Add the following code below the gameLoop function:\n\nfunction\n\nmoveSnake\n\nmoveDirection\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowRight\"\n\ndirection\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowLeft\"\n\ndirection\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowUp\"\n\ndirection\n\nwidth\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowDown\"\n\ndirection\n\nwidth\n\nfunction\n\nhandleKeyMove\n\nif\n\n\"ArrowRight\"\n\n\"ArrowLeft\"\n\n\"ArrowUp\"\n\n\"ArrowDown\"\n\nincludes\n\nkey\n\nreturn\n\nmoveSnake\n\nkey\n\ndocument\n\naddEventListener\n\n\"keydown\"\n\nhandleKeyMove\n\nWe added a \"keydown\" event listener that is handled by the handleKeyMove function. The handleKeyMove function calls the moveSnake function if one of the arrow keys is pressed down.\n\nThe moveSnake function changes the snake's direction, depending on which arrow key was pressed.\n\nYou will now be able to change the snake's direction using the arrow keys on your keyboard.", "start_char_idx": 9537, "end_char_idx": 13756, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7000c457-06a3-4c2c-8385-a61d797755ba": {"__data__": {"id_": "7000c457-06a3-4c2c-8385-a61d797755ba", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "622c8abf-317a-4ef1-ba67-31d93aba39e0", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "831c20dd4a435e8902cf6c0dcb0f9e14130975df84963bdef47c2dd9e4fa301a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9457880d-c2fb-4bb8-ac37-158afb2930df", "node_type": "1", "metadata": {}, "hash": "4011e0758467535baa76e49d5902b666e9ce3c62c207f3d411f8d831b4b04fc0", "class_name": "RelatedNodeInfo"}}, "hash": "6fa879ffa99e936ceaf22cd36e7623ee7a9c67a3dcbe474e7b9e7d0a33b0e8cc", "text": "Add the following code below the gameLoop function:\n\nfunction\n\nmoveSnake\n\nmoveDirection\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowRight\"\n\ndirection\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowLeft\"\n\ndirection\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowUp\"\n\ndirection\n\nwidth\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowDown\"\n\ndirection\n\nwidth\n\nfunction\n\nhandleKeyMove\n\nif\n\n\"ArrowRight\"\n\n\"ArrowLeft\"\n\n\"ArrowUp\"\n\n\"ArrowDown\"\n\nincludes\n\nkey\n\nreturn\n\nmoveSnake\n\nkey\n\ndocument\n\naddEventListener\n\n\"keydown\"\n\nhandleKeyMove\n\nWe added a \"keydown\" event listener that is handled by the handleKeyMove function. The handleKeyMove function calls the moveSnake function if one of the arrow keys is pressed down.\n\nThe moveSnake function changes the snake's direction, depending on which arrow key was pressed.\n\nYou will now be able to change the snake's direction using the arrow keys on your keyboard. However, the snake will be able to move through the walls and move through self. You will also get an error in your console if you go outside of the bounds of the grid by hitting the top or bottom wall. We'll fix this by detecting collisions.\n\nDetecting collisions with the walls and itself\u200b\n\nIn the gameLoop function, add the following code below the cells[currentSnake[0]].innerText = ''; line:\n\nif\n\ncurrentSnake\n\nwidth\n\n>=\n\nwidth\n\nwidth\n\n&&\n\ndirection\n\n===\n\nwidth\n\n||\n\n// hits bottom wall\n\ncurrentSnake\n\nwidth\n\n===\n\nwidth\n\n&&\n\ndirection\n\n===\n\n||\n\n// hits right wall\n\ncurrentSnake\n\nwidth\n\n===\n\n&&\n\ndirection\n\n===\n\n||\n\n// hits left wall\n\ncurrentSnake\n\nwidth\n\n&&\n\ndirection\n\n===\n\nwidth\n\n||\n\n// hits the top wall\n\ncells\n\ncurrentSnake\n\ndirection\n\nclassList\n\ncontains\n\n\"snake\"\n\n// hits itself\n\ngrid\n\nclassList\n\nadd\n\n\"shake\"\n\nclearInterval\n\ninterval\n\nreturn\n\nThis if statement checks if the current snake index is outside the bounds of the game grid. It also checks if the snake hit itself by checking if the next cell that the snake head will move to has the snake class. If there is a collision, the game loop is stopped by clearing the interval and a shake animation is added by adding the shake class to the game grid. This will make the game grid shake when there is a collision. This uses the shake keyframe animation that defined earlier in our style.css file.\n\nFor the shake animation to work each time we restart a game, we need to remove the shake class from the game grid at the start of each game. Do this by adding the following line inside of the startGame() function, at the top:\n\ngrid\n\nclassList\n\nremove\n\n\"shake\"\n\nNow, if your snake hits the wall or itself, it will stop the game loop and the game grid will shake. There are two bugs with the snake direction changes. If you are moving in one direction, then press the arrow key to move in the opposite direction, the snake will hit itself. Also, if your snake is going in one direction and then you make two quick 90-degree turns so that the snake moves in the opposite direction, the snake will hit itself. Let's change the moveSnake function to fix these issues. Replace your moveSnake function with the following:\n\nfunction\n\nmoveSnake\n\nmoveDirection\n\nlet\n\ndirectionVal\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowRight\"\n\n&&\n\ndirection\n\n!==\n\ndirectionVal\n\nif\n\ncurrentSnake\n\ndirectionVal\n\n===\n\ncurrentSnake\n\nreturn\n\ndirection\n\ndirectionVal\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowLeft\"\n\n&&\n\ndirection\n\n!==\n\ndirectionVal\n\nif\n\ncurrentSnake\n\ndirectionVal\n\n===\n\ncurrentSnake\n\nreturn\n\ndirection\n\ndirectionVal\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowUp\"\n\n&&\n\ndirection\n\n!==\n\nwidth\n\ndirectionVal\n\nwidth\n\nif\n\ncurrentSnake\n\ndirectionVal\n\n===\n\ncurrentSnake\n\nreturn\n\ndirection\n\ndirectionVal\n\nif\n\nmoveDirection\n\n===\n\n\"ArrowDown\"\n\n&&\n\ndirection\n\n!==\n\nwidth\n\ndirectionVal\n\nwidth\n\nif\n\ncurrentSnake\n\ndirectionVal\n\n===\n\ncurrentSnake\n\nreturn\n\ndirection\n\ndirectionVal\n\nFor each direction change, we now check that the direction change is not the opposite of the current direction. We also check that the direction change does not cause the snake's head to hit the first segment of its body.\n\nAdding and eating food\u200b\n\nLet's add food items to the game grid. When the snake eats a food item, the score will be increased by one and a new food item will be created.", "start_char_idx": 12919, "end_char_idx": 17031, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9457880d-c2fb-4bb8-ac37-158afb2930df": {"__data__": {"id_": "9457880d-c2fb-4bb8-ac37-158afb2930df", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7000c457-06a3-4c2c-8385-a61d797755ba", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "6fa879ffa99e936ceaf22cd36e7623ee7a9c67a3dcbe474e7b9e7d0a33b0e8cc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5efdb31f-b465-4dfb-8e57-54003f512e45", "node_type": "1", "metadata": {}, "hash": "4cb326b22e08f74b26bb6fce5f3908fd09b0af9074d7bc19ae018fa380285e8d", "class_name": "RelatedNodeInfo"}}, "hash": "4011e0758467535baa76e49d5902b666e9ce3c62c207f3d411f8d831b4b04fc0", "text": "We also check that the direction change does not cause the snake's head to hit the first segment of its body.\n\nAdding and eating food\u200b\n\nLet's add food items to the game grid. When the snake eats a food item, the score will be increased by one and a new food item will be created. Add the following game variables in the // game variables section:\n\nlet\n\nfoodItemIndex\n\n// first cell\n\nlet\n\nscore\n\nThe foodItemIndex is the cell index in the game grid that the food item will be added to. We'll randomly position it.\n\nNow let's define the createFood function that we'll use to randomly add food items to our game grid. Add the following createFood function above the startGame function:\n\nasync\n\nfunction\n\ncreateFood\n\nfoodItemIndex\n\nMath\n\nfloor\n\nMath\n\nrandom\n\nnumCells\n\nif\n\ncurrentSnake\n\nincludes\n\nfoodItemIndex\n\nawait\n\nwait\n\n100\n\ncreateFood\n\nelse\n\ncells\n\nfoodItemIndex\n\nclassList\n\nadd\n\n\"food-item\"\n\ncells\n\nfoodItemIndex\n\ninnerText\n\nrandomElementFromArray\n\nfoodItemsArray\n\nIn this recursive async function, we create a random food item index position and add the food item to the game grid. This function is recursive to prevent the food item from being added in a position occupied by the snake. If the random index is on the snake, the createFood function is called again to get another random index position. Our wait utility function prevents the recursive function from being called too often by pausing the function for 100 ms before each recursive function call.\n\nLet's modify our startGame function so that the food items are cleared at the start of the game, the score is reset and a food item is created. Add the following lines to the startGame function, above the interval = setInterval(gameLoop, intervalTime); line:\n\ncells\n\nfoodItemIndex\n\nclassList\n\nremove\n\n\"food-item\"\n\ncells\n\nfoodItemIndex\n\ninnerText\n\n\"\"\n\ncreateFood\n\nscore\n\nscoreDisplay\n\ninnerHTML\n\nscore\n\nNow we need to detect if the food item is eaten and if so, add a new food item to the game grid. Add the following lines to the gameLoop function, above the cells[currentSnake[0]].classList.add('snake'); line:\n\nif\n\ncells\n\ncurrentSnake\n\nclassList\n\ncontains\n\n\"food-item\"\n\ncells\n\ncurrentSnake\n\nclassList\n\nremove\n\n\"food-item\"\n\ncells\n\ntail\n\nclassList\n\nadd\n\n\"snake\"\n\nsnakeColor\n\n+=\n\nsnakeColorIncrement\n\n360\n\ncells\n\ntail\n\nstyle\n\nbackground\n\nhsl(\n\n${\n\nsnakeColor\n\n, 100%, 50%)\n\ncurrentSnake\n\npush\n\ntail\n\nscore\n\n++\n\nscoreDisplay\n\ntextContent\n\nscore\n\ncreateFood\n\nThe food item is 'eaten' by checking if the snakes head position cell contains the food item. If it does, we remove the 'food-item' class to remove the food item. We increase the snake's length by adding a new segment to the tail end of the snake. Then we increase the score, and create a new randomly positioned food item.\n\nThe food items increase in size when they are added as we added a scale transform to the food-item class in the style.css file.\n\nOur snake game is almost complete! The last thing we need to do is make it mobile-friendly by making the on-screen arrow buttons functional.\n\nMaking the game mobile-friendly\u200b\n\nAdd the following lines near the bottom of the script.js file, just above the existing event listeners.\n\nfunction\n\nhandleButtonKeyMove\n\nconst\n\nid\n\ncurrentTarget\n\nmoveSnake\n\nid\n\nkeyBtns\n\nforEach\n\nkeyBtn\n\n=>\n\nkeyBtn\n\naddEventListener\n\n\"mousedown\"\n\nhandleButtonKeyMove\n\nkeyBtn\n\naddEventListener\n\n\"touchstart\"\n\nhandleButtonKeyMove\n\nRun your project. Our game is now complete. See how high you can get your score using either your keyboard or the on-screen buttons.\n\nNext steps\u200b\n\nNow that you have built a simple snake game with some basic styling, you might want to improve it or add extra features.\n\nYou can build your own by copying the code above, or by forking our example repl at replit.com/@ritza/snake-game-vanilla-javascript.\n\nHere are some suggestions:\n\nMake the snake transition from cell to cell a smooth animation.\n\nPersist the top five highest scores by storing them in local storage. Create a pop dialog menu to view these high scores.\n\nIncrease the speed of the snake as the game progresses to make it harder.\n\nAdd obstacles.\n\nAdd sound effects.\n\nMake different food items have different points.\n\nYou can also learn how to make Snake with Kaboom is a JavaScript game programming library that makes creating games like this easy.", "start_char_idx": 16752, "end_char_idx": 21043, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5efdb31f-b465-4dfb-8e57-54003f512e45": {"__data__": {"id_": "5efdb31f-b465-4dfb-8e57-54003f512e45", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "bf813c06-9f23-444a-a909-daf67cc8c14a", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "19224e34881a32db4ac5122f9fa3f83401c02e0d6462e0284251b200e744d16f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9457880d-c2fb-4bb8-ac37-158afb2930df", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}, "hash": "4011e0758467535baa76e49d5902b666e9ce3c62c207f3d411f8d831b4b04fc0", "class_name": "RelatedNodeInfo"}}, "hash": "4cb326b22e08f74b26bb6fce5f3908fd09b0af9074d7bc19ae018fa380285e8d", "text": "Our game is now complete. See how high you can get your score using either your keyboard or the on-screen buttons.\n\nNext steps\u200b\n\nNow that you have built a simple snake game with some basic styling, you might want to improve it or add extra features.\n\nYou can build your own by copying the code above, or by forking our example repl at replit.com/@ritza/snake-game-vanilla-javascript.\n\nHere are some suggestions:\n\nMake the snake transition from cell to cell a smooth animation.\n\nPersist the top five highest scores by storing them in local storage. Create a pop dialog menu to view these high scores.\n\nIncrease the speed of the snake as the game progresses to make it harder.\n\nAdd obstacles.\n\nAdd sound effects.\n\nMake different food items have different points.\n\nYou can also learn how to make Snake with Kaboom is a JavaScript game programming library that makes creating games like this easy.\n\n< Previous: Learning HTML and CSS by building a 90s-inspired website\n\nNext: Pinboard project Part 1: HTML & CSS >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nGetting started\n\nCreating a new project in Replit\n\nSetting up the folder structure\n\nAdding the HTML\n\nAdding the CSS\n\nSetting up the JavaScript structure\n\nAdding utility functions\n\nBuilding the game logic\n\nGame overview\n\nCreating the game grid\n\nAdding the snake\n\nMoving the snake\n\nControlling the snake\n\nDetecting collisions with the walls and itself\n\nAdding and eating food\n\nMaking the game mobile-friendly\n\nNext steps", "start_char_idx": 20150, "end_char_idx": 21627, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"bf813c06-9f23-444a-a909-daf67cc8c14a": {"node_ids": ["a21a12aa-eb94-4f20-a925-053789418364", "0052db0d-7004-4254-8d82-7b619f76c7b7", "6a7b6f1d-2d93-45bb-8fc3-a280607bfbf7", "622c8abf-317a-4ef1-ba67-31d93aba39e0", "7000c457-06a3-4c2c-8385-a61d797755ba", "9457880d-c2fb-4bb8-ac37-158afb2930df", "5efdb31f-b465-4dfb-8e57-54003f512e45"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/make-snake-game-vanilla-javascript.html"}}}, "docstore/metadata": {"a21a12aa-eb94-4f20-a925-053789418364": {"doc_hash": "cecc8c1b889fa8927f161400a64fc69d75ee39e86675e1004a04adefabd7e46c", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}, "0052db0d-7004-4254-8d82-7b619f76c7b7": {"doc_hash": "c09c9c02d35b1557ae56a3311d5a1ba9319d3e70ddc6acbac34cf5b383b822f8", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}, "6a7b6f1d-2d93-45bb-8fc3-a280607bfbf7": {"doc_hash": "804df105549af177690ceb4b603164a244a2d140669443b28a8c7d35dd2daa61", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}, "622c8abf-317a-4ef1-ba67-31d93aba39e0": {"doc_hash": "831c20dd4a435e8902cf6c0dcb0f9e14130975df84963bdef47c2dd9e4fa301a", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}, "7000c457-06a3-4c2c-8385-a61d797755ba": {"doc_hash": "6fa879ffa99e936ceaf22cd36e7623ee7a9c67a3dcbe474e7b9e7d0a33b0e8cc", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}, "9457880d-c2fb-4bb8-ac37-158afb2930df": {"doc_hash": "4011e0758467535baa76e49d5902b666e9ce3c62c207f3d411f8d831b4b04fc0", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}, "5efdb31f-b465-4dfb-8e57-54003f512e45": {"doc_hash": "4cb326b22e08f74b26bb6fce5f3908fd09b0af9074d7bc19ae018fa380285e8d", "ref_doc_id": "bf813c06-9f23-444a-a909-daf67cc8c14a"}}}