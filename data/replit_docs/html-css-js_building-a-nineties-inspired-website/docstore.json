{"docstore/data": {"b1cb20f1-5ee4-4fd8-af3c-5c6d73a77632": {"__data__": {"id_": "b1cb20f1-5ee4-4fd8-af3c-5c6d73a77632", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "71844552fd4f10ebaf28e06fff59dceed36bf89ac9a39720b77ecdf4a9c1a126", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6196367e-5e0a-4e49-a022-615d4c8b7e9a", "node_type": "1", "metadata": {}, "hash": "349bc7197e1e621cae301e309f2a793dd75e776d1a398c32e3194b05b20aaa34", "class_name": "RelatedNodeInfo"}}, "hash": "b62d741bbd0b1a0597df96ea498805ca901eec0789f97ea5b44a0a6c06132c4b", "text": "body\n\n</\n\nhtml\n\nThe head element is a container where we include all the meta information. We can also include extra information about the website, which we don't want to render, or show, on the website itself. This extra information can include data to improve our website's SEO ranking, links to other files, and so on.\n\nLet's add these elements to the <head>:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nlang\n\nen-US\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\n/>\n\ntitle\n\nMy 90s website\n\n</\n\ntitle\n\n</\n\nhead\n\nbody\n\n</\n\nbody\n\n</\n\nhtml\n\nTo display an HTML page correctly, a web browser must know which character set to use. Adding the line <meta charset=\"utf-8\"> tells our browser to use the UTF-8 character set. UTF-8 is the recommended character set as it covers almost all of the characters and symbols in the world!\n\nThe <title> element contains the title of our website. This title appears in the browser tab. It is also used to describe the page when you bookmark it.\n\ntip\n\nIn Replit you can generate this boilerplate code by typing ! followed by the tab key in an empty HTML file.\n\nThe <body> element\u200b\n\nEverything we want to display on our website will be nested within the <body> element. We will spend most of our time as web developers in this element.\n\nLet's add a <header> element and a heading to the <body> of our site:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nlang\n\nen-US\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\n/>\n\ntitle\n\nMy 90s Website\n\n</\n\ntitle\n\n</\n\nhead\n\nbody\n\nheader\n\nh1\n\nMy 90s Website\n\n</\n\nh1\n\n</\n\nheader\n\n</\n\nbody\n\n</\n\nhtml\n\nThe <header> element usually contains introductory and/or navigational content. Don't confuse the <header> with the <head> element.\n\nThe <h1> element is the level one heading element. Heading elements allow us to specify that certain parts of our content are headings or subheadings. There are six heading levels in HTML, <h1> to <h6>.\n\nIndentation\n\nThe indentation in the HTML code is not required. The only reason we indent our code is to make it easier to read.\n\nAdding more content\u200b\n\nLet's add some more content to our site. We already have a heading, so let's add a <main> element to our web page:\n\nbody\n\nheader\n\nh1\n\nMy 90s Website\n\n</\n\nh1\n\n</\n\nheader\n\nmain\n\n</\n\nmain\n\n</\n\nbody\n\nThe <main> element represents the dominant content of the body of a document.\n\nNext we will add some text or paragraph elements:\n\nbody\n\nheader\n\nh1\n\nMy 90s Website\n\n</\n\nh1\n\n</\n\nheader\n\nmain\n\nThis is a\n\nstrong\n\n90s inspired\n\n</\n\nstrong\n\nwebsite. Today, 90s web design is\n\nmore likely to raise a smile than admiration.\n\n</\n\nhr\n\n/>\n\nSee what Apple, Microsoft, Yahoo or Pepsi websites looked like in the\n\nmid-1990s.\n\n</\n\n</\n\nmain\n\n</\n\nbody\n\nWe have added two paragraph elements under the heading. According to the documentation:\n\nThe <p> HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.\n\nWe have also wrapped the text \"90s inspired\" with the <strong> tag. The <strong> element indicates that its contents have strong importance. The browser will render the contents of <strong> element in bold type.\n\nAlso, notice the <hr> element which is adding a horizontal separator between the two paragraphs. There are certain elements like the <hr> element that do not require a closing tag as they do not wrap around any content.\n\nThink\n\nWhich other element have we used that didn't require a closing tag?\n\nHit the \"Run\" button on your Replit site and you will see the new text appear in the browser preview window.\n\nAdding links\u200b\n\nNext, we will add a link to the web design museum so our readers can see some actual 90s websites. We want to make some of our text clickable. We can do that by using the anchor tag <a>.", "start_char_idx": 0, "end_char_idx": 3814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6196367e-5e0a-4e49-a022-615d4c8b7e9a": {"__data__": {"id_": "6196367e-5e0a-4e49-a022-615d4c8b7e9a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "71844552fd4f10ebaf28e06fff59dceed36bf89ac9a39720b77ecdf4a9c1a126", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b1cb20f1-5ee4-4fd8-af3c-5c6d73a77632", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "b62d741bbd0b1a0597df96ea498805ca901eec0789f97ea5b44a0a6c06132c4b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8c41acb-878a-461b-ab6a-387291f653ff", "node_type": "1", "metadata": {}, "hash": "a4e205dce0260182ca885bd3dca4a960dca932da319bfc72239a200688a03f32", "class_name": "RelatedNodeInfo"}}, "hash": "349bc7197e1e621cae301e309f2a793dd75e776d1a398c32e3194b05b20aaa34", "text": "We have also wrapped the text \"90s inspired\" with the <strong> tag. The <strong> element indicates that its contents have strong importance. The browser will render the contents of <strong> element in bold type.\n\nAlso, notice the <hr> element which is adding a horizontal separator between the two paragraphs. There are certain elements like the <hr> element that do not require a closing tag as they do not wrap around any content.\n\nThink\n\nWhich other element have we used that didn't require a closing tag?\n\nHit the \"Run\" button on your Replit site and you will see the new text appear in the browser preview window.\n\nAdding links\u200b\n\nNext, we will add a link to the web design museum so our readers can see some actual 90s websites. We want to make some of our text clickable. We can do that by using the anchor tag <a>.\n\nFirst wrap the text that you want to make clickable with the <a></a> tags, like so:\n\nSee what Apple, Microsoft, Yahoo or Pepsi websites\n\nlooked like in the mid-1990s\n\n</\n\n</\n\nThe anchor element requires an href or hyperlink reference attribute, which is the URL that the hyperlink points to.\n\nSee what Apple, Microsoft, Yahoo or Pepsi websites\n\nhref\n\nhttps://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s\n\nlooked like in the mid-1990s\n\n</\n\n</\n\nHit \"Run\" and you should see the link in action:\n\nAdding images\u200b\n\nYou can't have a 90s-inspired website without the animated GIF of the dancing baby!\n\nCreate a new folder in the \"Files\" section in your repl, and name it \"img\". Download the images from here and upload them to the \"img\" folder.\n\nImages are added with an image element <img>. Inside this tag we need to give the image location, or source, with a src attribute, like so:\n\nimg\n\nsrc\n\nimg/dancing-baby.gif\n\n/>\n\nWe will add the image within the <header> element. We will also add a description of the image with an alt attribute:\n\nbody\n\nheader\n\nh1\n\nMy 90s Website\n\n</\n\nh1\n\nimg\n\nsrc\n\nimg/dancing-baby.gif\n\nalt\n\nAnimated GIF of a dancing baby\n\n/>\n\n</\n\nheader\n\nmain\n\nThis is a\n\nstrong\n\n90s inspired\n\n</\n\nstrong\n\nwebsite. Today, 90s web design is\n\nmore likely to raise a smile than admiration.\n\n</\n\nhr\n\n/>\n\nSee what Apple, Microsoft, Yahoo or Pepsi websites\n\nhref\n\nhttps://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s\n\nlooked like in the mid-1990s\n\n</\n\n</\n\n</\n\nmain\n\n</\n\nbody\n\nThis is how our website looks:\n\nThe <div> element\u200b\n\nThe <div> element is like an empty box. We can use it when we need to break the content on our website into different sections, to control styling, and more.\n\nFor our site, we will use the <div> element to add a background image to our site later.\n\nLet's add a new <div> element to our \"index.html\" file and nest everything else inside it:\n\nbody\n\ndiv\n\n<!-- This is the new addition. -->\n\nheader\n\nh1\n\nMy 90s Website\n\n</\n\nh1\n\nimg\n\nsrc\n\nimg/dancing-baby.gif\n\nalt\n\n/>\n\n</\n\nheader\n\nmain\n\nThis is a\n\nstrong\n\n90s inspired\n\n</\n\nstrong\n\nwebsite. Today, 90s web design\n\nis more likely to raise a smile than admiration.\n\n</\n\nhr\n\n/>\n\nSee what Apple, Microsoft, Yahoo or Pepsi websites\n\nhref\n\nhttps://www.webdesignmuseum.org/exhibitions/web-design-in-the-90s\n\nlooked like in the mid-1990s\n\n</\n\n</\n\n</\n\nmain\n\n</\n\ndiv\n\n<!-- Don't forget to close the div element -->\n\n</\n\nbody\n\nComments\n\nThe <!-- --> characters mark a comment. Anything written between these two tags will be ignored by the browser. We add comments to explain our code to other humans.\n\nLinking files\u200b\n\nThe website has all the content that we need. Now it's time to add some CSS magic.\n\nBefore we write any CSS, we need to leave instructions for our browser so it knows where to look for our CSS file.\n\nTo link the CSS file to the HTML file, we will use a link element <link>. The <link> element is used to specify relationships between the current document and an external resource. This element is most commonly used to link to CSS, but it can be used to link other files.", "start_char_idx": 2993, "end_char_idx": 6895, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8c41acb-878a-461b-ab6a-387291f653ff": {"__data__": {"id_": "f8c41acb-878a-461b-ab6a-387291f653ff", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "71844552fd4f10ebaf28e06fff59dceed36bf89ac9a39720b77ecdf4a9c1a126", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6196367e-5e0a-4e49-a022-615d4c8b7e9a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "349bc7197e1e621cae301e309f2a793dd75e776d1a398c32e3194b05b20aaa34", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3bab39c3-1287-4b22-b1db-04ed333ab845", "node_type": "1", "metadata": {}, "hash": "1ec78a48ea36c0c86c9b1fd0cc4c9bec5da7f15905e6894a4bc2bb809b7bb33f", "class_name": "RelatedNodeInfo"}}, "hash": "a4e205dce0260182ca885bd3dca4a960dca932da319bfc72239a200688a03f32", "text": "Anything written between these two tags will be ignored by the browser. We add comments to explain our code to other humans.\n\nLinking files\u200b\n\nThe website has all the content that we need. Now it's time to add some CSS magic.\n\nBefore we write any CSS, we need to leave instructions for our browser so it knows where to look for our CSS file.\n\nTo link the CSS file to the HTML file, we will use a link element <link>. The <link> element is used to specify relationships between the current document and an external resource. This element is most commonly used to link to CSS, but it can be used to link other files.\n\nWe will add the <link> element within the <head> element of our site:\n\nhead\n\nmeta\n\ncharset\n\nUTF-8\n\n/>\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width, initial-scale=1.0\n\n/>\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nstyle.css\n\n/>\n\ntitle\n\nMy 90s Website\n\n</\n\ntitle\n\n</\n\nhead\n\nThe <link> element needs a rel or relationship attribute and an href attribute. We set the rel attribute to \"stylesheet\" to tell our browser what kind of document are we linking. We will add the name of our stylesheet as the value of the href attribute.\n\ninfo\n\nIf your CSS file is in another folder or directory, you will need to provide the complete path to the CSS sheet.\n\nNotice we have also added a new <meta> tag. This gives the browser instructions on how to control the page's dimensions and scaling. You can read more about it on MDN documentation.\n\nBasic styling\u200b\n\nIn our CSS file, we can list the HTML elements we\u2019ve used and say how we want them to look. We use CSS properties and values to control the look of our elements.\n\nThere are many ways to point to the elements we want. The easiest way is to use the element's name.\n\nFor example, the following code will select the <body> element, and change its background-color property to black:\n\nbody\n\nbackground-color\n\nblack\n\nYou can also select multiple elements at once. For example, the following code will change the text color of both <h1> and <p> elements:\n\nh1\n\ncolor\n\nblueviolet\n\nWe can also declare more than one rule at once. For example, the following group of rules will alter the size and the extra spacing (padding) at the top of our <h1> elements:\n\nh1\n\nfont-size\n\nrem\n\npadding-top\n\n10\n\nrem\n\nThere are a lot of CSS properties. Covering them all is beyond the scope of this tutorial. You can look up all the CSS properties on MDN documentation.\n\nAnother good way to find CSS properties and their values for your use case is searching for them using your favorite search engine. For example, if we want to learn how to align the text on our web page to the center, we can search \"CSS text align\".\n\nThe first result was this MDN page which explains the usage of text-align property. Add this new property to your code:\n\nbody\n\nbackground-color\n\nblack\n\ntext-align\n\ncenter\n\ntip\n\nA good way to learn CSS is by playing around with different properties and their values.\n\nHTML classes\u200b\n\nSelecting elements by name comes in handy when we want to select all elements of the same type on a page at once. But for better control, we may want to select and make changes to individual elements. One way to select individual elements is using classes.\n\nHTML classes are attributes that we can add to elements. Once an element has a class name, we can use this in our CSS. You can think of classes as custom labels that we attach to our elements.\n\nLet's add a class bigger-text to our first <p> element:\n\nclass\n\nbigger-text\n\nThis is a\n\nstrong\n\n90s inspired\n\n</\n\nstrong\n\nwebsite. Today, 90s web design is more\n\nlikely to raise a smile than admiration.\n\n</\n\nNaming the classes is totally up to you. You can name the classes whatever way you want. But it's a good practice to give classes a descriptive name.\n\nIn our style.css file we can select the element with the class bigger-text. To tell the CSS that we are selecting a class, and not a built-in HTML element, we have to add a dot . before the class name. For example, we can select the bigger-text class and change its fonts to a different size like so:\n\n.bigger-text\n\nfont-size\n\n1.5\n\nrem\n\ninfo\n\nCSS has several different units for expressing length. We are using a relative size unit rem here.", "start_char_idx": 6282, "end_char_idx": 10464, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3bab39c3-1287-4b22-b1db-04ed333ab845": {"__data__": {"id_": "3bab39c3-1287-4b22-b1db-04ed333ab845", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "71844552fd4f10ebaf28e06fff59dceed36bf89ac9a39720b77ecdf4a9c1a126", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8c41acb-878a-461b-ab6a-387291f653ff", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}, "hash": "a4e205dce0260182ca885bd3dca4a960dca932da319bfc72239a200688a03f32", "class_name": "RelatedNodeInfo"}}, "hash": "1ec78a48ea36c0c86c9b1fd0cc4c9bec5da7f15905e6894a4bc2bb809b7bb33f", "text": "Let's add a class bigger-text to our first <p> element:\n\nclass\n\nbigger-text\n\nThis is a\n\nstrong\n\n90s inspired\n\n</\n\nstrong\n\nwebsite. Today, 90s web design is more\n\nlikely to raise a smile than admiration.\n\n</\n\nNaming the classes is totally up to you. You can name the classes whatever way you want. But it's a good practice to give classes a descriptive name.\n\nIn our style.css file we can select the element with the class bigger-text. To tell the CSS that we are selecting a class, and not a built-in HTML element, we have to add a dot . before the class name. For example, we can select the bigger-text class and change its fonts to a different size like so:\n\n.bigger-text\n\nfont-size\n\n1.5\n\nrem\n\ninfo\n\nCSS has several different units for expressing length. We are using a relative size unit rem here. But we can also use absolute units like px, which stands for pixels.\n\nLet's also add a class container to our <div> element and use it to add a background image:\n\nbody\n\ndiv\n\nclass\n\ncontainer\n\nheader\n\n...\n\n</\n\nheader\n\nmain\n\n...\n\n</\n\nmain\n\n</\n\ndiv\n\n</\n\nbody\n\nUpload the window.png file to your image folder, if you haven't already. Now add the following CSS code to your style.css file:\n\n.container\n\nbackground\n\nurl\n\n\"img/window.png\"\n\nbackground-position\n\ncenter\n\nbackground-repeat\n\nno-repeat\n\nbackground-size\n\ncontain\n\nheight\n\n800\n\npx\n\nwidth\n\n800\n\npx\n\nmargin\n\nauto\n\nCSS properties are pretty self-explanatory. In the code above, we use an image as a background with a url() function. This is just like passing the URL of an image to the href attribute in HTML.\n\nNext, we tell the browser to position this image in the center and not to repeat it multiple times. We also set the height and width. This time we use absolute length units px.\n\nThe margin property controls the extra space around an element. Setting it to auto means we want equal space all around an element, which is a good way to center an element.\n\nLet's add our emoji image to the body element to make our website as eye-watering as possible \ud83d\ude00\n\nbody\n\nbackground\n\nblack\n\nurl\n\n\"img/emoji.png\"\n\ntext-align\n\ncenter\n\nNotice we changed the background-color property to background and added both a color and an image to it in a single line.\n\nAlso notice that this time we didn't use the background-repeat: no-repeat which resulted in our image repeating multiple times to fill the whole body element.\n\nCustom domain\u200b\n\nOur website is done! We can share it with the world by sharing the URL of our repl.\n\nThere is one problem, however. The URL is not very reader-friendly. We want something easier like \"ilove90sdesign.com\".\n\nThere are many places you can buy a custom URL or domain. Some of them are Google Domains, GoDaddy, and Namecheap.\n\nLet's walk through the process of connecting our repl to a custom domain from Namecheap.\n\nBuy a domain on Namecheap.\n\nNext, in your Replit site, click on the pencil icon in the browser preview window and click on \"Create Domain Link\". Enter your domain and the domain linking window will open:\n\nCopy the IP address from the \"Domain Linking\" dialog.\n\nSign in to your Namecheap account. Follow the instructions from step 3 of this guide. Select \"@\" for \"Host\" and enter the IP address that you have copied above in the \"IP Address\" field.\n\nClick \"Save changes\". Back in your Replit site, click the \"Next\" button. Replit will verify the domain and you are done!\n\nnote\n\nIt can take some time before the changes take effect.\n\nWhere next?\u200b\n\nThat's it for this tutorial, but you can build your site further. Try adding more sections to your website, or play around with CSS properties and selectors to give your site a different look.\n\nYou can find our repl below:\n\n< Previous: HTML, CSS, and JS\n\nNext: Make Snake with vanilla JavaScript >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nHTML and CSS\n\nGetting started\n\nBuilding structure\n\nThe <head> element\n\nThe <body> element\n\nAdding more content\n\nAdding links\n\nAdding images\n\nThe <div> element\n\nLinking files\n\nBasic styling\n\nHTML classes\n\nCustom domain\n\nWhere next?", "start_char_idx": 9664, "end_char_idx": 13677, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"f6fdc653-7fe1-434f-9b91-67e2d93b4136": {"node_ids": ["b1cb20f1-5ee4-4fd8-af3c-5c6d73a77632", "6196367e-5e0a-4e49-a022-615d4c8b7e9a", "f8c41acb-878a-461b-ab6a-387291f653ff", "3bab39c3-1287-4b22-b1db-04ed333ab845"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/building-a-nineties-inspired-website.html"}}}, "docstore/metadata": {"b1cb20f1-5ee4-4fd8-af3c-5c6d73a77632": {"doc_hash": "b62d741bbd0b1a0597df96ea498805ca901eec0789f97ea5b44a0a6c06132c4b", "ref_doc_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136"}, "6196367e-5e0a-4e49-a022-615d4c8b7e9a": {"doc_hash": "349bc7197e1e621cae301e309f2a793dd75e776d1a398c32e3194b05b20aaa34", "ref_doc_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136"}, "f8c41acb-878a-461b-ab6a-387291f653ff": {"doc_hash": "a4e205dce0260182ca885bd3dca4a960dca932da319bfc72239a200688a03f32", "ref_doc_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136"}, "3bab39c3-1287-4b22-b1db-04ed333ab845": {"doc_hash": "1ec78a48ea36c0c86c9b1fd0cc4c9bec5da7f15905e6894a4bc2bb809b7bb33f", "ref_doc_id": "f6fdc653-7fe1-434f-9b91-67e2d93b4136"}}}