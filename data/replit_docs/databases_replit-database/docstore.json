{"docstore/data": {"26f69b42-2351-439e-a1ed-301a94509d5e": {"__data__": {"id_": "26f69b42-2351-439e-a1ed-301a94509d5e", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f73e724f-9520-4b13-b721-9e1975281558", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "hash": "d17251cde08176cec62c4c08179834322bfa7b2262945b0d536a00eee20b3d8c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "015e7d4f-76e7-4196-a92a-1e65c3c492ce", "node_type": "1", "metadata": {}, "hash": "bcc44cd55de54ce76f0cc20eb1a79ad06d2ba3b940819e9634e05c07753c5c66", "class_name": "RelatedNodeInfo"}}, "hash": "07b0ea9031360bebdfc3fe95d0a6124938fd3580b4d5830baf81dba67a240458", "text": "ObservedList(value=[1,\"James\"])\n\nObservedList(value=[2,\"Angel\"])\n\nThe ObservedList object you see in the output is a Replit Database object that acts like a Python list and can be indexed as such.\n\nReading data\u200b\n\nRead from your database by referencing the key of the value:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data in the database\n\ndb\n\n\"key1\"\n\n\"value1\"\n\ndb\n\n\"my_list\"\n\ndb\n\n\"my_dictionary\"\n\n\"key_a\"\n\n\"value_a\"\n\n\"key_b\"\n\n\"value_b\"\n\n# Access and print data from the database\n\nprint\n\ndb\n\n\"key1\"\n\nprint\n\ndb\n\n\"my_list\"\n\nprint\n\ndb\n\n\"my_dictionary\"\n\n\"key_a\"\n\nOutput:\n\nvalue1\n\nvalue_a\n\nWe can use the built-in Python dictionary method .get() to retrieve the value at the key passed in as an argument:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data for the database\n\ndb\n\n\"float_1\"\n\n9.99\n\n# Access the value of the data created by its key\n\nprint\n\ndb\n\nget\n\n\"float_1\"\n\nWe can loop through the keys stored in the database to get access to the values of those keys:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data for the database\n\ndb\n\n\"key1\"\n\n\"value1\"\n\ndb\n\n\"my_list\"\n\ndb\n\n\"my_dictionary\"\n\n\"key_a\"\n\n\"value_a\"\n\n\"key_b\"\n\n\"value_b\"\n\n# Access the keys from the database and print the values associated for key in db\n\nprint\n\ndb\n\nget\n\nkey\n\nThe .keys() method returns a list of the keys in our database:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data for the database\n\ndb\n\n\"key1\"\n\n\"value1\"\n\ndb\n\n\"my_list\"\n\ndb\n\n\"my_dictionary\"\n\n\"key_a\"\n\n\"value_a\"\n\n\"key_b\"\n\n\"value_b\"\n\n# Print all the keys from the database\n\nprint\n\ndb\n\nkeys\n\nOutput:\n\n{'key1', 'my_list', 'my_dictionary', '2D_keys'}\n\nThe .prefix() method allows us to get the values of keys with only part of that key. This allows us to return multiple values for keys that share the same prefix:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data for the database\n\ndb\n\n\"key1\"\n\n\"value1\"\n\ndb\n\n\"my_list\"\n\ndb\n\n\"my_dictionary\"\n\n\"key_a\"\n\n\"value_a\"\n\n\"key_b\"\n\n\"value_b\"\n\n# Print all the keys from the database that have a prefix of \"my\"\n\nprint\n\ndb\n\nprefix\n\n\"my\"\n\nOutput:\n\n('my_dictionary', 'my_list')\n\nUpdating data\u200b\n\nWe can update values that are stored in our database by assigning new values to their associated key:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data with \"float_1\" as key and print\n\ndb\n\n\"float_1\"\n\n9.99\n\nprint\n\ndb\n\n\u201cfloat_1\u201d\n\n# Update data at \"float_1\" key and print\n\ndb\n\n\u201cfloat_1\u201d\n\n3.33\n\nprint\n\ndb\n\n\u201cfloat_1\u201d\n\nOutput:\n\n9.99\n\n3.33\n\nWe can also mutate numbers that are stored in our database:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data with \"float_1\" as key and print\n\ndb\n\n\"float_1\"\n\n9.99\n\n# Perform an operation on the data\n\ndb\n\n\"float_1\"\n\n+=\n\n0.01\n\n# Print result of operation\n\nprint\n\ndb\n\n\"float_1\"\n\nOutput:\n\n10.0\n\nDeleting data\u200b\n\nWe make use of the del keyword and square bracket indexing to delete key-value pairings from our database:\n\nfrom\n\nreplit\n\nimport\n\ndb\n\n# Create data for the database\n\ndb\n\n\"float_1\"\n\n9.99\n\n# Delete the data we added at the key \"float_1\"\n\ndel\n\ndb\n\n\"float_1\"\n\nif\n\n\"float_1\"\n\nnot\n\nin\n\ndb\n\nprint\n\n\"Value deleted successfully.\"\n\nOutput:\n\nValue deleted successfully.\n\nSummary\u200b\n\nOverall, the Replit Database is a simple and useful database that allows us to easily and dynamically update our data. The features resembling the Python dictionary mean we can use the built-in Python dictionary functions to interact with our database.\n\nFAQs\u200b\n\nWhere can I find my database?\u200b\n\nWhen viewing your Repl, you'll find the Database icon toward the bottom of the sidebar \u2013 it's the second last icon. That\u2019s Replit\u2019s key-value database, built right into your Repl!\n\nHow can I access my database?\u200b\n\nTo access Database, you can use a library or simple curl commands.\n\nReplit provides official clients.", "start_char_idx": 0, "end_char_idx": 3608, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "015e7d4f-76e7-4196-a92a-1e65c3c492ce": {"__data__": {"id_": "015e7d4f-76e7-4196-a92a-1e65c3c492ce", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f73e724f-9520-4b13-b721-9e1975281558", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "hash": "d17251cde08176cec62c4c08179834322bfa7b2262945b0d536a00eee20b3d8c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26f69b42-2351-439e-a1ed-301a94509d5e", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "hash": "07b0ea9031360bebdfc3fe95d0a6124938fd3580b4d5830baf81dba67a240458", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d0dac58-062b-483b-a6a1-c5ecca58a2b0", "node_type": "1", "metadata": {}, "hash": "4f85594d7312427402895ed5d1411576225e2a3526a3846da0a3c246f593ef79", "class_name": "RelatedNodeInfo"}}, "hash": "bcc44cd55de54ce76f0cc20eb1a79ad06d2ba3b940819e9634e05c07753c5c66", "text": "Output:\n\nValue deleted successfully.\n\nSummary\u200b\n\nOverall, the Replit Database is a simple and useful database that allows us to easily and dynamically update our data. The features resembling the Python dictionary mean we can use the built-in Python dictionary functions to interact with our database.\n\nFAQs\u200b\n\nWhere can I find my database?\u200b\n\nWhen viewing your Repl, you'll find the Database icon toward the bottom of the sidebar \u2013 it's the second last icon. That\u2019s Replit\u2019s key-value database, built right into your Repl!\n\nHow can I access my database?\u200b\n\nTo access Database, you can use a library or simple curl commands.\n\nReplit provides official clients. Use one of these clients if your Repl is in one of these languages:\n\nPython\n\nNode.js\n\nGo\n\nHow do I use my database?\u200b\n\nWhen you click on the Database icon in the sidebar, you'll see some instructions. If your Repl is in a language that has an official Database client, you can quickly import it and start using Database by clicking on the \"Insert\" buttons.\n\nIf your language does not have a client, we provide some usage examples below. They are found below, and are a useful reference if you wish to write your own Database client.\n\nSet\n\ncurl $REPLIT_DB_URL -d '<key>=<value>'\n\nIf your key and value don't use any unsafe characters, you can use\nan alternative version:\n\ncurl -XPOST $REPLIT_DB_URL/<key>=<value>\n\nGet\n\ncurl $REPLIT_DB_URL/<key>\n\nDelete\n\ncurl -XDELETE $REPLIT_DB_URL/<key>\n\nDelete returns status code 204 if the key was deleted or 404 if the key did not exist.\n\nList\n\ncurl $REPLIT_DB_URL --get -d 'prefix=<key>'\n\nor\n\ncurl \"$REPLIT_DB_URL?prefix=<key>\"\n\nThe returned keys will be separated by newlines.\n\nListing also takes a query parameter: encode=true. If set, the returned keys will be URL encoded. This lets you safely handle keys that contain newlines.\n\nWhat is REPLIT_DB_URL?\u200b\n\nThis is the environment variable we have created with your Repl. It is the key that will allow you to access your database.\n\nThe clients listed above take care of using REPLIT_DB_URL for you, but you will need it if you want to write your own client or use a database from a language that doesn't yet have a client. Here are two examples:\n\nPython:\n\nimport os\n\nprint(os.getenv(\"REPLIT_DB_URL\"))\n\nNode.js:\n\nconsole.log(process.env.REPLIT_DB_URL)\n\nREPLIT_DB_URL provides full access to your database. Therefore, you should take care not to expose it to the world or share it with people you don't trust.\n\nThe value of REPLIT_DB_URL changes from time to time, so we recommend that you don't copy it elsewhere. Subsequent reads by the same process will see the same value. We will restart your Repl if we need to change it after it has been read.\n\nNote: REPLIT_DB_URL is not available in Deployments. Instead, the value of the URL is stored in /tmp/replitdb. If you are writing a client for Replit Database, read the value from /tmp/replitdb first, and fall back to the environment variable if that file does not exist.\n\nWhat limits does Database have?\u200b\n\nThe limits are currently:\n\n50 MiB per database (sum of keys and values)\n\n5,000 keys per database\n\n1024 bytes per key\n\n5 MiB per value\n\nThere are rate limits that apply to all operations. You will receive an HTTP 429 if you exceed them. We recommend implementing an exponential backoff and retry to handle this case.\n\nHow can I tell how much storage I'm using?\u200b\n\nThe Database sidebar shows you the number of keys in your database along with\nthe total storage occupied by your keys and values.\n\nIs my Database private?\u200b\n\nYes, each Database is private and isolated. Every Repl has its own database, and they are not shared among repls.\n\nHow do I share a database across repls?\u200b\n\nThe easiest way to do this is to use one Repl as the primary database and have other repls connect to it via web hosting. Here\u2019s an example Repl in Python.\n\nAny requests sent to the above Repl will operate on its database, so sending\nrequests to it from other repls means that they all share the same information.\n\n< Previous: PostgreSQL on Replit\n\nNext: hosting-web-pages >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nWhat is Replit Database?", "start_char_idx": 2953, "end_char_idx": 7081, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d0dac58-062b-483b-a6a1-c5ecca58a2b0": {"__data__": {"id_": "0d0dac58-062b-483b-a6a1-c5ecca58a2b0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f73e724f-9520-4b13-b721-9e1975281558", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "hash": "d17251cde08176cec62c4c08179834322bfa7b2262945b0d536a00eee20b3d8c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "015e7d4f-76e7-4196-a92a-1e65c3c492ce", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}, "hash": "bcc44cd55de54ce76f0cc20eb1a79ad06d2ba3b940819e9634e05c07753c5c66", "class_name": "RelatedNodeInfo"}}, "hash": "4f85594d7312427402895ed5d1411576225e2a3526a3846da0a3c246f593ef79", "text": "How can I tell how much storage I'm using?\u200b\n\nThe Database sidebar shows you the number of keys in your database along with\nthe total storage occupied by your keys and values.\n\nIs my Database private?\u200b\n\nYes, each Database is private and isolated. Every Repl has its own database, and they are not shared among repls.\n\nHow do I share a database across repls?\u200b\n\nThe easiest way to do this is to use one Repl as the primary database and have other repls connect to it via web hosting. Here\u2019s an example Repl in Python.\n\nAny requests sent to the above Repl will operate on its database, so sending\nrequests to it from other repls means that they all share the same information.\n\n< Previous: PostgreSQL on Replit\n\nNext: hosting-web-pages >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nWhat is Replit Database?\n\nUsing Replit DatabaseImporting the databaseCreating dataReading dataUpdating dataDeleting dataSummary\n\nFAQsWhere can I find my database?How can I access my database?How do I use my database?What is REPLIT_DB_URL?What limits does Database have?How can I tell how much storage I'm using?Is my Database private?How do I share a database across repls?", "start_char_idx": 6273, "end_char_idx": 7430, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"f73e724f-9520-4b13-b721-9e1975281558": {"node_ids": ["26f69b42-2351-439e-a1ed-301a94509d5e", "015e7d4f-76e7-4196-a92a-1e65c3c492ce", "0d0dac58-062b-483b-a6a1-c5ecca58a2b0"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/hosting/databases/replit-database.html"}}}, "docstore/metadata": {"26f69b42-2351-439e-a1ed-301a94509d5e": {"doc_hash": "07b0ea9031360bebdfc3fe95d0a6124938fd3580b4d5830baf81dba67a240458", "ref_doc_id": "f73e724f-9520-4b13-b721-9e1975281558"}, "015e7d4f-76e7-4196-a92a-1e65c3c492ce": {"doc_hash": "bcc44cd55de54ce76f0cc20eb1a79ad06d2ba3b940819e9634e05c07753c5c66", "ref_doc_id": "f73e724f-9520-4b13-b721-9e1975281558"}, "0d0dac58-062b-483b-a6a1-c5ecca58a2b0": {"doc_hash": "4f85594d7312427402895ed5d1411576225e2a3526a3846da0a3c246f593ef79", "ref_doc_id": "f73e724f-9520-4b13-b721-9e1975281558"}}}