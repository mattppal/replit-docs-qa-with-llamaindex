{"docstore/data": {"8933b61f-7147-4f76-b6a3-7b7afe907ae2": {"__data__": {"id_": "8933b61f-7147-4f76-b6a3-7b7afe907ae2", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/test-driven-development.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e036d4a3-05f1-45b4-a4ca-476974c9880c", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/test-driven-development.html"}, "hash": "b948073e92bc0f5d95af5bb6190d35c979576f486603ff5dfddfe4fc273355a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4730b7b8-e56a-4f97-8ac8-aab9f4e2007a", "node_type": "1", "metadata": {}, "hash": "1dd39c3b3b25826021f93ab88981ff4a7708c62abaca6365ade52a5e5a36dfa9", "class_name": "RelatedNodeInfo"}}, "hash": "772c0b5af0f41d3e741480ce70071949b189208256477f6cbee7ea09ecb9fbcc", "text": "If you read the output from the top down you'll see a bunch of different things happened. First, pytest ran test discovery and found one test. It ran this and it failed so you see the first red F above the FAILURES section. That tells us exactly which line of the test failed and how. In this case, it was an AttributeError as we tried to use split_name which was not defined. Let's go fix that.\n\nHead over to the utils/name_helper.py file and add the following code.\n\ndef\n\nsplit_name\n\nname\n\nfirst_name\n\nlast_name\n\nname\n\nsplit\n\nreturn\n\nfirst_name\n\nlast_name\n\nThis is the very simple version we discussed earlier that can only handle two names, but it will solve the name error and TDD is all about small increments. Press Run to re-run the tests and you should see a far more friendly green output now, as below, indicating that all of our tests passed.\n\nBefore fixing our function to handle more complex cases, let's first write the tests and check that they fail. Go back to tests/test_name_helper.py and add the following four test functions beneath the existing one.\n\nfrom\n\nnamesplitter\n\nutils\n\nimport\n\nname_helper\n\ndef\n\ntest_two_names\n\nassert\n\nname_helper\n\nsplit_name\n\n\"John Smith\"\n\n==\n\n\"John\"\n\n\"Smith\"\n\ndef\n\ntest_middle_names\n\nassert\n\nname_helper\n\nsplit_name\n\n\"John Patrick Smith\"\n\n==\n\n\"John Patrick\"\n\n\"Smith\"\n\nassert\n\nname_helper\n\nsplit_name\n\n\"John Patrick Thomson Smith\"\n\n==\n\n\"John Patrick Thomson\"\n\n\"Smith\"\n\ndef\n\ntest_surname_prefixes\n\nassert\n\nname_helper\n\nsplit_name\n\n\"John van der Berg\"\n\n==\n\n\"John\"\n\n\"van der Berg\"\n\nassert\n\nname_helper\n\nsplit_name\n\n\"John Patrick van der Berg\"\n\n==\n\n\"John Patrick\"\n\n\"van der Berg\"\n\ndef\n\ntest_split_name_onename\n\nassert\n\nname_helper\n\nsplit_name\n\n\"Smith\"\n\n==\n\n\"\"\n\n\"Smith\"\n\ndef\n\ntest_split_name_nonames\n\nassert\n\nname_helper\n\nsplit_name\n\n\"\"\n\n==\n\n\"\"\n\n\"\"\n\nRerun the tests and you should see a lot more output now. If you scroll back up to the most recent ===== test session starts ===== section, it should look as follows.\n\nIn the top section, the .FFFF is shorthand for \"five tests were run, the first one passed and the next four failed\" (a green dot indicates a pass and a red F indicates a failure). If you had more files with tests in them, you would see a line like this per file, with one character of output per test.\n\nThe failures are described in detail after this, but they all amount to variations of the same problem. Our code currently assumes that we will always get exactly two names, so it either has too many or too few values after running split() on the test examples.\n\nFixing our split_name function\u200b\n\nGo back to name_helper.py and modify it to look as follows.\n\ndef\n\nsplit_name\n\nname\n\nnames\n\nname\n\nsplit\n\n\" \"\n\nif\n\nnot\n\nname\n\nreturn\n\n\"\"\n\n\"\"\n\nif\n\nlen\n\nnames\n\n==\n\nreturn\n\n\"\"\n\nname\n\nif\n\nlen\n\nnames\n\n==\n\nfirstname\n\nlastname\n\nname\n\nsplit\n\n\" \"\n\nreturn\n\nfirstname\n\nlastname\n\nThis should handle the case of zero, one, or two names. Let's run our tests again to see if we've made progress before we handle the more difficult cases. You should get a lot less output now and three green dots, as shown below.\n\nThe rest of the output indicates that it's the middle names and surname prefix examples that are still tripping up our function, so let's add the code we need to fix those. Another important aspect of TDD is keeping your functions as small as possible so that they are easier to understand, test, and reuse, so let's write a second function to handle the three or more names cases.\n\nAdd the new function called split_name_three_plus() and add an else clause to the existing split_name function where you call this new function. The entire file should now look as follows.", "start_char_idx": 0, "end_char_idx": 3628, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4730b7b8-e56a-4f97-8ac8-aab9f4e2007a": {"__data__": {"id_": "4730b7b8-e56a-4f97-8ac8-aab9f4e2007a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/test-driven-development.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e036d4a3-05f1-45b4-a4ca-476974c9880c", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/test-driven-development.html"}, "hash": "b948073e92bc0f5d95af5bb6190d35c979576f486603ff5dfddfe4fc273355a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8933b61f-7147-4f76-b6a3-7b7afe907ae2", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/test-driven-development.html"}, "hash": "772c0b5af0f41d3e741480ce70071949b189208256477f6cbee7ea09ecb9fbcc", "class_name": "RelatedNodeInfo"}}, "hash": "1dd39c3b3b25826021f93ab88981ff4a7708c62abaca6365ade52a5e5a36dfa9", "text": "Let's run our tests again to see if we've made progress before we handle the more difficult cases. You should get a lot less output now and three green dots, as shown below.\n\nThe rest of the output indicates that it's the middle names and surname prefix examples that are still tripping up our function, so let's add the code we need to fix those. Another important aspect of TDD is keeping your functions as small as possible so that they are easier to understand, test, and reuse, so let's write a second function to handle the three or more names cases.\n\nAdd the new function called split_name_three_plus() and add an else clause to the existing split_name function where you call this new function. The entire file should now look as follows.\n\ndef\n\nsplit_name_three_plus\n\nnames\n\nfirst_names\n\nlast_names\n\nfor\n\nname\n\nin\n\nenumerate\n\nnames\n\nif\n\n==\n\nlen\n\nnames\n\nlast_names\n\nappend\n\nname\n\nelif\n\nname\n\nislower\n\nlast_names\n\nextend\n\nnames\n\nbreak\n\nelse\n\nfirst_names\n\nappend\n\nname\n\nfirst_name\n\n\" \"\n\njoin\n\nfirst_names\n\nlast_name\n\n\" \"\n\njoin\n\nlast_names\n\nreturn\n\nfirst_name\n\nlast_name\n\ndef\n\nsplit_name\n\nname\n\nnames\n\nname\n\nsplit\n\n\" \"\n\nif\n\nnot\n\nname\n\nreturn\n\n\"\"\n\n\"\"\n\nif\n\nlen\n\nnames\n\n==\n\nreturn\n\n\"\"\n\nname\n\nif\n\nlen\n\nnames\n\n==\n\nfirstname\n\nlastname\n\nname\n\nsplit\n\n\" \"\n\nreturn\n\nfirstname\n\nlastname\n\nelse\n\nreturn\n\nsplit_name_three_plus\n\nnames\n\nThe new function works by always appending names to the first_names list until it gets to the last name, or until it encounters a name that starts with a lowercase letter, at which point it adds all of the remaining names to last_names list. If you run the tests again, they should all pass now.\n\nThe tests were already helpful in making sure that we understood the problem and that our function worked for specific examples. If we had made any off-by-one mistakes in our code that deals with three or more names, our tests would have caught them. If we need to refactor or change our code in future, we can also use our tests to make sure that our new code doesn't introduce any regressions (where fixing problems causes code to break on other examples that worked before the fix.)\n\nUsing our function\u200b\n\nLet's build a very basic application to use our function. Replace the testing code in main.py with the following.\n\nfrom\n\nutils\n\nimport\n\nname_helper\n\nname\n\ninput\n\n\"Please enter your full name: \"\n\nfirst_name\n\nlast_name\n\nname_helper\n\nsplit_name\n\nname\n\nprint\n\nf\"Your first name is:\n\nfirst_name\n\nprint\n\nf\"Your last name is:\n\nlast_name\n\nIf you run this, it will prompt the user for their name and then display their first and last name.\n\nBecause you're using the main.py file now, you can also invoke pytest directly from the output console on the right by typing import pytest; pytest.main(). Note that updates to your code are only properly applied when you press the Run button though, so make sure to run your code between changes before running the tests.\n\nMake it your own\u200b\n\nWe've written a name splitter that can handle some names more complicated than just \"John Smith\". It's not perfect though: for example, if you put in a name with two consecutive spaces it will crash our program. You could fork the project and fix this by first writing a test with consecutive spaces and then modifying the code to handle this (and any other edge cases you can think of).\n\nWhere next\u200b\n\nYou've learned to do TDD in this project. It's a popular style of programming, but it's not for everyone. Even if you decide not to use TDD, having tests is still very useful and it's not uncommon for large projects to have thousands or millions of tests.\n\nTake a look at the big list of naughty strings for a project that collects inputs that often cause software to break. You could also read How SQLite Is Tested which explains how SQLite, a popular lightweight database, has 150 thousand lines of code and nearly 100 million(!) lines of tests.\n\nIn the next tutorial, we'll show you how to become a Replit poweruser by taking advantage of the productivity features it offers.\n\n< Previous: Telegram bot\n\nNext: Wordle with Python & Rich >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nCreating a project structure for pytest\n\nDefining examples for the name split function\n\nWriting the test cases for our names function\n\nFixing our split_name function\n\nUsing our function\n\nMake it your own\n\nWhere next", "start_char_idx": 2882, "end_char_idx": 7194, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"e036d4a3-05f1-45b4-a4ca-476974c9880c": {"node_ids": ["8933b61f-7147-4f76-b6a3-7b7afe907ae2", "4730b7b8-e56a-4f97-8ac8-aab9f4e2007a"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/test-driven-development.html"}}}, "docstore/metadata": {"8933b61f-7147-4f76-b6a3-7b7afe907ae2": {"doc_hash": "772c0b5af0f41d3e741480ce70071949b189208256477f6cbee7ea09ecb9fbcc", "ref_doc_id": "e036d4a3-05f1-45b4-a4ca-476974c9880c"}, "4730b7b8-e56a-4f97-8ac8-aab9f4e2007a": {"doc_hash": "1dd39c3b3b25826021f93ab88981ff4a7708c62abaca6365ade52a5e5a36dfa9", "ref_doc_id": "e036d4a3-05f1-45b4-a4ca-476974c9880c"}}}