{"docstore/data": {"25754b11-11b2-47d3-b830-70b63409ca72": {"__data__": {"id_": "25754b11-11b2-47d3-b830-70b63409ca72", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e51840fb-0934-425f-b320-1b6da9a5ce85", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "hash": "e07c0f25cf699a60b78590a70c584c98ccad1c3782ecc1c9904e704791fd17ba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "049965d3-b77c-4b73-b4e7-ddfc35ee9c21", "node_type": "1", "metadata": {}, "hash": "4e8f040d2dd34745f31806717468ff3eb6bc3dd3f3f1611b115b908691c8e51e", "class_name": "RelatedNodeInfo"}}, "hash": "be2aec7ceb881915545f4537e339cde98308bb1bffb5f7aca90994e16c00f7a4", "text": "main\n\nRun this code, and you'll see a Wordle-styled welcome message, demonstrating all three styles, as shown below.\n\nCreating the game loop\u200b\n\nAs in classic Wordle, our game will allow the player six tries to guess a word. Unlike classic Wordle, we'll allow for two players. Player 1 will choose a word, and player 2 will attempt to guess it. The basic logic is then:\n\nGet word from Player 1\n\nGet guess from Player 2\n\nWhile Player 2 has guesses remaining\n\nGet new guess\n\nIf guess is correct\n\nEnd the game\n\nSo let's ignore our fancy colored text for a moment and build this logic.\n\nGetting and guessing the word\u200b\n\nWe'll use the Console class from Rich, which creates a virtual output pane on top of our actual console. This will make it easier to have more control over our output as we build out the app.\n\nAdd the following two imports to the top of the main.py file:\n\nfrom\n\nrich\n\nprompt\n\nimport\n\nPrompt\n\nfrom\n\nrich\n\nconsole\n\nimport\n\nConsole\n\nAnd now replace the main() function with the following code:\n\ndef\n\nmain\n\nrich\n\nprint\n\nWELCOME_MESSAGE\n\nallowed_guesses\n\nused_guesses\n\nconsole\n\nConsole\n\nanswer_word\n\nPrompt\n\nask\n\n\"Enter a word\"\n\nconsole\n\nclear\n\nwhile\n\nused_guesses\n\nallowed_guesses\n\nused_guesses\n\n+=\n\nguess\n\nPrompt\n\nask\n\n\"Enter your guess\"\n\nif\n\nguess\n\n==\n\nanswer_word\n\nbreak\n\nprint\n\nf\"\\n\\nTWORDLE\n\nused_guesses\n\nallowed_guesses\n\n\\n\"\n\nIf you run this, you'll be prompted (as player 1) to enter a word. The entered word will then be hidden from view to avoid spoiling the game, and player 2 can enter up to six guesses. At this stage, player 2 doesn't get any feedback on correct or incorrect letters, which makes the game pretty hard for player 2! If player 2 does happen to guess correctly, the loop will break and the game will display how many guesses were used.\n\nProviding feedback on correct letters\u200b\n\nLet's add a helper function to calculate whether each letter should be green, yellow, or gray. Add this function above the main() function in main.py:\n\ndef\n\nscore_guess\n\nguess\n\nanswer\n\nscored\n\nfor\n\nletter\n\nin\n\nenumerate\n\nguess\n\nif\n\nanswer\n\n==\n\nguess\n\nscored\n\n+=\n\ncorrect_place\n\nletter\n\nelif\n\nletter\n\nin\n\nanswer\n\nscored\n\n+=\n\ncorrect_letter\n\nletter\n\nelse\n\nscored\n\n+=\n\nincorrect\n\nletter\n\nreturn\n\n''\n\njoin\n\nscored\n\nThis function takes in player 2's guess and the correct answer and compares them letter by letter. It uses the helper functions we defined earlier to create the Rich formatting string for each letter, and then joins them all together into a single string.\n\nNOTE: Here we simplify how duplicate letters are handled. In classic Wordle, letters are colored based on how often they occur in the correct answer, for example, if you guess \"SPEED\" and the correct word is \"THOSE\", the second E in your guess will be colored as incorrect. In our version, it will be labeled as a correct letter in the wrong place. Handling duplicate letters is tricky, and implementing this logic correctly is left as an exercise to the reader.\n\nCall this function from inside the while loop in main() by adding the console.print line as follows:\n\nwhile\n\nused_guesses\n\nallowed_guesses\n\nused_guesses\n\n+=\n\nguess\n\nPrompt\n\nask\n\n\"Enter your guess\"\n\nconsole\n\nprint\n\nscore_guess\n\nguess\n\nanswer_word\n\n# new line\n\nif\n\nguess\n\n==\n\nanswer_word\n\nbreak\n\nNow player 2 has something to work on from each guess, and it should be a lot easier to guess the correct word by incrementally finding more correct letters, as shown in the example below.\n\nAdding an emoji representation for spoiler-free sharing\u200b\n\nA key part of Wordle is that once a player has guessed a word, they can share a simple graphic of how well they did, without giving away the actual word. For our two-player version, this \"no spoilers\" feature isn't as important, but let's add it anyway.\n\nAs with the letter-coloring, we want to keep the emoji we use configurable. By default, we'll use green, yellow, and gray squares. Let's start by defining this in a dictionary, near the top of our main.py file.", "start_char_idx": 0, "end_char_idx": 3953, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "049965d3-b77c-4b73-b4e7-ddfc35ee9c21": {"__data__": {"id_": "049965d3-b77c-4b73-b4e7-ddfc35ee9c21", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e51840fb-0934-425f-b320-1b6da9a5ce85", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "hash": "e07c0f25cf699a60b78590a70c584c98ccad1c3782ecc1c9904e704791fd17ba", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "25754b11-11b2-47d3-b830-70b63409ca72", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "hash": "be2aec7ceb881915545f4537e339cde98308bb1bffb5f7aca90994e16c00f7a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "54356214-d518-4e03-a273-1302a28d66db", "node_type": "1", "metadata": {}, "hash": "98f8aac2ab0b24805c0437ea92f7fbc34a81c41c415326cd92f17d70fff741b9", "class_name": "RelatedNodeInfo"}}, "hash": "4e8f040d2dd34745f31806717468ff3eb6bc3dd3f3f1611b115b908691c8e51e", "text": "Adding an emoji representation for spoiler-free sharing\u200b\n\nA key part of Wordle is that once a player has guessed a word, they can share a simple graphic of how well they did, without giving away the actual word. For our two-player version, this \"no spoilers\" feature isn't as important, but let's add it anyway.\n\nAs with the letter-coloring, we want to keep the emoji we use configurable. By default, we'll use green, yellow, and gray squares. Let's start by defining this in a dictionary, near the top of our main.py file. Add the following to your code:\n\nemojis\n\n'correct_place'\n\n'\ud83d\udfe9'\n\n'correct_letter'\n\n'\ud83d\udfe8'\n\n'incorrect'\n\n'\u2b1c'\n\nReplace the score_guess function with the following:\n\ndef\n\nscore_guess\n\nguess\n\nanswer\n\nscored\n\nemojied\n\nfor\n\nletter\n\nin\n\nenumerate\n\nguess\n\nif\n\nanswer\n\n==\n\nguess\n\nscored\n\n+=\n\ncorrect_place\n\nletter\n\nemojied\n\nappend\n\nemojis\n\n'correct_place'\n\nelif\n\nletter\n\nin\n\nanswer\n\nscored\n\n+=\n\ncorrect_letter\n\nletter\n\nemojied\n\nappend\n\nemojis\n\n'correct_letter'\n\nelse\n\nscored\n\n+=\n\nincorrect\n\nletter\n\nemojied\n\nappend\n\nemojis\n\n'incorrect'\n\nreturn\n\n''\n\njoin\n\nscored\n\n''\n\njoin\n\nemojied\n\nThe logic is very similar to before, but instead of only calculating the correct style for the letter, we also keep track of each emoji. At the end, we return both the string to print out the scored word, and the emoji representation for that guess.\n\nTo use this in the main function, replace the code for the while loop with the following code:\n\nall_emojied\n\nwhile\n\nused_guesses\n\nallowed_guesses\n\nused_guesses\n\n+=\n\nguess\n\nPrompt\n\nask\n\n\"Enter your guess\"\n\nscored\n\nemojied\n\nscore_guess\n\nguess\n\nanswer_word\n\nall_emojied\n\nappend\n\nemojied\n\nconsole\n\nprint\n\nscored\n\nif\n\nguess\n\n==\n\nanswer_word\n\nbreak\n\nprint\n\nf\"\\n\\nTWORDLE\n\nused_guesses\n\nallowed_guesses\n\n\\n\"\n\nfor\n\nem\n\nin\n\nall_emojied\n\nconsole\n\nprint\n\nem\n\nIf you run again, the game will work as before, but now you'll see the emoji representation printed after the game ends. This can be copy-pasted to share and help our game go viral. You can see what it looks like in the image below.\n\nSome finishing touches\u200b\n\nThe one messy part of our game remaining is that the input prompts are still shown after player 2 has entered each guess. This means that each word is shown twice: once in its colored form, and once exactly as the player entered it. Let's adapt the game to clear the console and output just the colored versions of each guess.\n\nTo do this, we need to keep track of all player 2's guess, which we were not doing before.\n\nReplace the while loop in the main() function with the following code:\n\nall_emojied\n\nall_scored\n\nwhile\n\nused_guesses\n\nallowed_guesses\n\nused_guesses\n\n+=\n\nguess\n\nPrompt\n\nask\n\n\"Enter your guess\"\n\nscored\n\nemojied\n\nscore_guess\n\nguess\n\nanswer_word\n\nall_scored\n\nappend\n\nscored\n\nall_emojied\n\nappend\n\nemojied\n\nconsole\n\nclear\n\nfor\n\nscored\n\nin\n\nall_scored\n\nconsole\n\nprint\n\nscored\n\nif\n\nguess\n\n==\n\nanswer_word\n\nbreak\n\nThis clears the console completely after each guess by player 2, and then prints out each of the (styled) guesses. The output looks neater now, as shown below.\n\nAdding instructions\u200b\n\nPeople will like our game more if they can figure out what to do without having to read documentation. Let's add some basic instructions for each player to the game interface.", "start_char_idx": 3430, "end_char_idx": 6663, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "54356214-d518-4e03-a273-1302a28d66db": {"__data__": {"id_": "54356214-d518-4e03-a273-1302a28d66db", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e51840fb-0934-425f-b320-1b6da9a5ce85", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "hash": "e07c0f25cf699a60b78590a70c584c98ccad1c3782ecc1c9904e704791fd17ba", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "049965d3-b77c-4b73-b4e7-ddfc35ee9c21", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}, "hash": "4e8f040d2dd34745f31806717468ff3eb6bc3dd3f3f1611b115b908691c8e51e", "class_name": "RelatedNodeInfo"}}, "hash": "98f8aac2ab0b24805c0437ea92f7fbc34a81c41c415326cd92f17d70fff741b9", "text": "Replace the while loop in the main() function with the following code:\n\nall_emojied\n\nall_scored\n\nwhile\n\nused_guesses\n\nallowed_guesses\n\nused_guesses\n\n+=\n\nguess\n\nPrompt\n\nask\n\n\"Enter your guess\"\n\nscored\n\nemojied\n\nscore_guess\n\nguess\n\nanswer_word\n\nall_scored\n\nappend\n\nscored\n\nall_emojied\n\nappend\n\nemojied\n\nconsole\n\nclear\n\nfor\n\nscored\n\nin\n\nall_scored\n\nconsole\n\nprint\n\nscored\n\nif\n\nguess\n\n==\n\nanswer_word\n\nbreak\n\nThis clears the console completely after each guess by player 2, and then prints out each of the (styled) guesses. The output looks neater now, as shown below.\n\nAdding instructions\u200b\n\nPeople will like our game more if they can figure out what to do without having to read documentation. Let's add some basic instructions for each player to the game interface. Below the WELCOME_MESSAGE variable we defined earlier, add the following:\n\nP1_INSTRUCTIONS\n\n\"Player 1: Please enter a word (player 2, look away)\\n\"\n\nP2_INSTRUCTIONS\n\n\"Player 2: You may start guessing\\n\"\n\nNow update the main() function like this:\n\ndef\n\nmain\n\nallowed_guesses\n\nused_guesses\n\nconsole\n\nConsole\n\nconsole\n\nprint\n\nWELCOME_MESSAGE\n\nconsole\n\nprint\n\nP1_INSTRUCTIONS\n\nanswer_word\n\nPrompt\n\nask\n\n\"Enter a word\"\n\nconsole\n\nclear\n\nconsole\n\nprint\n\nWELCOME_MESSAGE\n\nconsole\n\nprint\n\nP2_INSTRUCTIONS\n\nall_emojied\n\nall_scored\n\nwhile\n\nused_guesses\n\nallowed_guesses\n\nused_guesses\n\n+=\n\nguess\n\nPrompt\n\nask\n\n\"Enter your guess\"\n\nscored\n\nemojied\n\nscore_guess\n\nguess\n\nanswer_word\n\nall_scored\n\nappend\n\nscored\n\nall_emojied\n\nappend\n\nemojied\n\nconsole\n\nclear\n\nconsole\n\nprint\n\nWELCOME_MESSAGE\n\nfor\n\nscored\n\nin\n\nall_scored\n\nconsole\n\nprint\n\nscored\n\nif\n\nguess\n\n==\n\nanswer_word\n\nbreak\n\nprint\n\nf\"\\n\\nTWORDLE\n\nused_guesses\n\nallowed_guesses\n\n\\n\"\n\nfor\n\nem\n\nin\n\nall_emojied\n\nconsole\n\nprint\n\nem\n\nNow our welcome message stays at the top, and the players are prompted by simple instructions. Have fun playing it with your friends!\n\nWhere next?\u200b\n\nThe basics of the game are in place, but there is still a lot you could build from here. Some ideas:\n\nFix the logic for handling duplicate letters.\n\nFix the fact that the game crashes if player 2 enters the wrong number of letters.\n\nThe game still says 6/6, even if player 2 has not guessed the word after six tries. Have the game print out X/6 in this case, as in classic Wordle.\n\nGive player 2 more guesses based on the length of the word player 1 enters.\n\n[CHALLENGING] Make the game work over the internet instead of requiring both players to be in same room.\n\nYou can find the code for this tutorial here:\n\n< Previous: Test-driven development\n\nNext: Databases: build a phonebook >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nGetting started\n\nInstalling Rich\n\nPrinting colored text\n\nCreating the game loopGetting and guessing the wordProviding feedback on correct letters\n\nAdding an emoji representation for spoiler-free sharing\n\nSome finishing touchesAdding instructions\n\nWhere next?", "start_char_idx": 5900, "end_char_idx": 8774, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"e51840fb-0934-425f-b320-1b6da9a5ce85": {"node_ids": ["25754b11-11b2-47d3-b830-70b63409ca72", "049965d3-b77c-4b73-b4e7-ddfc35ee9c21", "54356214-d518-4e03-a273-1302a28d66db"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/two-player-wordle-clone-python-rich.html"}}}, "docstore/metadata": {"25754b11-11b2-47d3-b830-70b63409ca72": {"doc_hash": "be2aec7ceb881915545f4537e339cde98308bb1bffb5f7aca90994e16c00f7a4", "ref_doc_id": "e51840fb-0934-425f-b320-1b6da9a5ce85"}, "049965d3-b77c-4b73-b4e7-ddfc35ee9c21": {"doc_hash": "4e8f040d2dd34745f31806717468ff3eb6bc3dd3f3f1611b115b908691c8e51e", "ref_doc_id": "e51840fb-0934-425f-b320-1b6da9a5ce85"}, "54356214-d518-4e03-a273-1302a28d66db": {"doc_hash": "98f8aac2ab0b24805c0437ea92f7fbc34a81c41c415326cd92f17d70fff741b9", "ref_doc_id": "e51840fb-0934-425f-b320-1b6da9a5ce85"}}}