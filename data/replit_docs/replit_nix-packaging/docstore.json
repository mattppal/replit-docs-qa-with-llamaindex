{"docstore/data": {"75f96cad-7f29-4865-9789-cf817a5066e4": {"__data__": {"id_": "75f96cad-7f29-4865-9789-cf817a5066e4", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "432557fc-f176-4200-9000-02e00f73a435", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "8bfa3475e8eb23eb02dcaef27d6d39b756ad0f49862a69b606ad228c69e15efc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c6d103df-49bf-498e-b1f3-77d8a42f3554", "node_type": "1", "metadata": {}, "hash": "f915e8ed427f3f5cc820d47df759e00ebb278acb812fb9a8e5021f3939a3756e", "class_name": "RelatedNodeInfo"}}, "hash": "7e00b8d09dd5ee03ec782c025873fad1bde324a3cabbbb5954ee7a4d47dfcf30", "text": "executing builder '/nix/store/bm7jr70d9ghn5cczb3q0w90apsm05p54-bash-5.1-p8/bin/bash'\n\nbuilding '/nix/store/6drp4pmqj67b3ysy88fhawz4fdf2kwkb-simple-hello-world-demo.drv'...\n\nexporting https://github.com/ritza-co/simple-hello-world-demo.git (rev v2.12) into /nix/store/hmmp6c24wg43d9cbslmhgrrccvhhaxac-simple-hello-world-demo\n\nInitialized empty Git repository in /nix/store/hmmp6c24wg43d9cbslmhgrrccvhhaxac-simple-hello-world-demo/.git/\n\nremote: Enumerating objects: 462, done.\n\nremote: Counting objects: 100% (462/462), done.\n\nremote: Compressing objects: 100% (333/333), done.\n\nremote: Total 462 (delta 127), reused 462 (delta 127), pack-reused 0\n\nReceiving objects: 100% (462/462), 1.09 MiB | 7.15 MiB/s, done.\n\nResolving deltas: 100% (127/127), done.\n\nFrom https://github.com/ritza-co/simple-hello-world-demo\n\ntag               v2.12      -> FETCH_HEAD\n\nSwitched to a new branch 'fetchgit'\n\nremoving `.git'...\n\nhash mismatch in fixed-output derivation '/nix/store/bj8zf0n8xdfrkj5mndmlhg34ac3pd91l-simple-hello-world-demo':\n\nwanted: sha256:1111111111111111111111111111111111111111111111111111\n\ngot:    sha256:1mc1vrixpkzkdnvpzn3b01awvha6z7k2dnpai3c6g89in8l1wr70\n\ncannot build derivation '/nix/store/gw50rkh9d2m4hxiyyldcz6wk0hf76pkx-hello.drv': 1 dependencies couldn't be built\n\nerror: build of '/nix/store/gw50rkh9d2m4hxiyyldcz6wk0hf76pkx-hello.drv' failed\n\nReplacing the sha256 in the derivation with 1mc1vrixpkzkdnvpzn3b01awvha6z7k2dnpai3c6g89in8l1wr70 will allow the build to succeed (your hash might be different, check the got: sha256: line).\n\nThere are also fetchers for other version control repositories, such as fetchsvn, fetchhg, or fetchcvs.\n\nFetch code from GitHub with fetchFromGitHub\u200b\n\nThe fetchFromGitHub fetcher doesn't take a url attribute, instead replacing it with owner and repo attributes.\n\nTry the following replit.nix file:\n\n{ pkgs }:\n\nlet\n\nhello = pkgs.stdenv.mkDerivation rec {\n\npname = \"hello\";\n\nversion = \"2.12\";\n\nsrc = pkgs.fetchFromGitHub {\n\nowner = \"ritza-co\";\n\nrepo = \"simple-hello-world-demo\";\n\nrev = \"v${version}\";\n\nsha256 = \"1111111111111111111111111111111111111111111111111111\";\n\n};\n\n};\n\nin {\n\ndeps = [\n\nhello\n\n];\n\nAgain, if you switch to the Console tab and pressing enter, the build will fail because we haven't provided the correct hash. Nix will output the correct hash. Use this to get the build to succeed.\n\nThere are also fetchers for other Git forges, such as fetchFromGitLab, fetchFromBitbucket, or fetchFromSavannah. Most work just like fetchFromGitHub.\n\nBuilding a package\u200b\n\nNow that we know how to fetch source code, we need to know how to build it into actual software. Our little hello program is built in a stock-standard way, and the default options used by stdenv.mkDerivation are perfect for it. Most software is not quite so simple, and will require us to tweak some of these options.\n\nFor some common types of software, Nix has dedicated builders that make those types of software easier to build. Some examples are Python programs or C# programs.\n\nThe \"standard\" builder is stdenv.mkDerivation. The dedicated builders are usually wrappers around stdenv.mkDerivation, so they inherit much from it. If the software you need to build is written in C or you can't find a dedicated builder for it, use stdenv.mkDerivation to build it.", "start_char_idx": 0, "end_char_idx": 3286, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c6d103df-49bf-498e-b1f3-77d8a42f3554": {"__data__": {"id_": "c6d103df-49bf-498e-b1f3-77d8a42f3554", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "432557fc-f176-4200-9000-02e00f73a435", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "8bfa3475e8eb23eb02dcaef27d6d39b756ad0f49862a69b606ad228c69e15efc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75f96cad-7f29-4865-9789-cf817a5066e4", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "7e00b8d09dd5ee03ec782c025873fad1bde324a3cabbbb5954ee7a4d47dfcf30", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15b41c07-ba44-4257-863b-bbabc5e4cbef", "node_type": "1", "metadata": {}, "hash": "5244cee3d6210d76c77041c202e1ef340fad33385e157f8d22ff7ae8400615a4", "class_name": "RelatedNodeInfo"}}, "hash": "f915e8ed427f3f5cc820d47df759e00ebb278acb812fb9a8e5021f3939a3756e", "text": "Most work just like fetchFromGitHub.\n\nBuilding a package\u200b\n\nNow that we know how to fetch source code, we need to know how to build it into actual software. Our little hello program is built in a stock-standard way, and the default options used by stdenv.mkDerivation are perfect for it. Most software is not quite so simple, and will require us to tweak some of these options.\n\nFor some common types of software, Nix has dedicated builders that make those types of software easier to build. Some examples are Python programs or C# programs.\n\nThe \"standard\" builder is stdenv.mkDerivation. The dedicated builders are usually wrappers around stdenv.mkDerivation, so they inherit much from it. If the software you need to build is written in C or you can't find a dedicated builder for it, use stdenv.mkDerivation to build it.\n\nEven if there is a dedicated builder for your software, it's probably a good idea to at least read this next section on stdenv.mkDerivation so you understand the fundamentals of building a package in Nix.\n\nBuilding with stdenv.mkDerivation\u200b\n\nSo far, we've not really explained what a derivation means in Nix. A derivation is an attribute set that tells Nix what it needs to know to build a package.\n\nIt contains information about:\n\nWhat other derivations, if any, a derivation depends on;\n\nWhat build script to use;\n\nWhat platform to build for;\n\nWhat arguments and environment variables should be available to the builder; and\n\nWhere Nix should put the results of the build.\n\nAs the final part of evaluating a Nix expression that produces a derivation, Nix will save that derivation attribute set to disk in the Nix store as a .drv file. It represents the build action. Later, in the build phase, Nix will use this .drv file to build the package it describes. If you want to see what one looks like, run the following command in the Console:\n\nnix show-derivation\n\n$(\n\nwhich\n\nhello\n\nThis will show you hello's derivation file, which was used by Nix to build it.\n\nBefore Nix builds a derivation, it will ensure that all the input derivation paths are valid. That is, that those derivations have been built and their outputs exist in the Nix store. If not, it will fetch them from the binary cache, or build those first.\n\nNix actually has a built-in function called derivation that produces derivation attribute sets, but we usually use stdenv.mkDerivation instead, which is easier to use. The stdenv.mkDerivation builder is not built into the Nix language itself. It's part of Nixpkgs, and evolved over time as the community built more and more packages, incorporating their learnings as useful abstractions.", "start_char_idx": 2463, "end_char_idx": 5094, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15b41c07-ba44-4257-863b-bbabc5e4cbef": {"__data__": {"id_": "15b41c07-ba44-4257-863b-bbabc5e4cbef", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "432557fc-f176-4200-9000-02e00f73a435", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "8bfa3475e8eb23eb02dcaef27d6d39b756ad0f49862a69b606ad228c69e15efc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c6d103df-49bf-498e-b1f3-77d8a42f3554", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "f915e8ed427f3f5cc820d47df759e00ebb278acb812fb9a8e5021f3939a3756e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b700b0d0-1c69-47ee-a052-2652e1644217", "node_type": "1", "metadata": {}, "hash": "305f199a8dcf5741db49fe2cb7484806e518e72b134ec52176d0a7f805e904e4", "class_name": "RelatedNodeInfo"}}, "hash": "5244cee3d6210d76c77041c202e1ef340fad33385e157f8d22ff7ae8400615a4", "text": "If you want to see what one looks like, run the following command in the Console:\n\nnix show-derivation\n\n$(\n\nwhich\n\nhello\n\nThis will show you hello's derivation file, which was used by Nix to build it.\n\nBefore Nix builds a derivation, it will ensure that all the input derivation paths are valid. That is, that those derivations have been built and their outputs exist in the Nix store. If not, it will fetch them from the binary cache, or build those first.\n\nNix actually has a built-in function called derivation that produces derivation attribute sets, but we usually use stdenv.mkDerivation instead, which is easier to use. The stdenv.mkDerivation builder is not built into the Nix language itself. It's part of Nixpkgs, and evolved over time as the community built more and more packages, incorporating their learnings as useful abstractions.\n\nLet's take a look at a more complex derivation:\n\n{ pkgs }:\n\nlet\n\nmle = with pkgs; stdenv.mkDerivation rec {\n\npname = \"mle\";\n\nversion = \"1.5.0\";\n\nsrc = fetchFromGitHub {\n\nowner = \"adsr\";\n\nrepo = \"mle\";\n\nrev = \"v${version}\";\n\nsha256 = \"1nhd00lsx9v12zdmps92magz76c2d8zzln3lxvzl4ng73gbvq3n0\";\n\n};\n\n# Bug fixes found after v1.5.0 release\n\npatches = [\n\n(fetchpatch {\n\nname = \"skip_locale_dep_test.patch\";\n\nurl = \"https://github.com/adsr/mle/commit/e4dc4314b02a324701d9ae9873461d34cce041e5.patch\";\n\nsha256 = \"sha256-j3Z/n+2LqB9vEkWzvRVSOrF6yE+hk6f0dvEsTQ74erw=\";\n\n})\n\n(fetchpatch {\n\nname = \"fix_input_trail.patch\";\n\nurl = \"https://github.com/adsr/mle/commit/bc05ec0eee4143d824010c6688fce526550ed508.patch\";\n\nsha256 = \"sha256-dM63EBDQfHLAqGZk3C5NtNAv23nCTxXVW8XpLkAeEyQ=\";\n\n})\n\n];\n\n# Fix location of Lua 5.4 header and library\n\npostPatch = ''\n\nsubstituteInPlace Makefile --replace \"-llua5.4\" \"-llua\";\n\nsubstituteInPlace mle.h    --replace \"<lua5.4/\" \"<\";\n\npatchShebangs tests/*\n\n'';\n\n# Use select(2) instead of poll(2) (poll is returning POLLINVAL on macOS)\n\n# Enable compiler optimization\n\nCFLAGS = \"-DTB_OPT_SELECT -O2\";\n\nnativeBuildInputs = [ makeWrapper installShellFiles ];\n\nbuildInputs = [ pcre uthash lua5_4 ];\n\ndoCheck = true;\n\ninstallFlags = [ \"prefix=${placeholder \"out\"}\" ];\n\npostInstall = ''\n\ninstallManPage mle.1\n\n'';\n\n};\n\nin {\n\ndeps = [\n\nmle\n\n];\n\nThis was adapted from mle's derivation in Nixpgks. Let's break down some of the new concepts in here.\n\nDependencies\u200b\n\nIf your software depends on other packages that are not part of the standard environment, you can provide them using the buildInputs attribute as follows:\n\npkgs.stdenv.mkDerivation {\n\nname = \"foo-1.2.3\";\n\n...\n\nbuildInputs = with pkgs; [libbar perl ncurses];\n\nYou may also see nativeBuildInputs, which you can think of as being for build-time dependencies, whereas buildInputs is for run-time dependencies. That is an oversimplification, but it's a good approximation.\n\nIf you're unsure where to put a dependency, use buildInputs. Even if you accidentally put a build-time dependency there, the derivation should still build. It's not ideal, but if you're just trying to get some software into your repl, it'll do just fine.\n\nThere are even more ways to specify dependencies, but unless you're cross-compiling they're unlikely to matter to you.\n\nPatches\u200b\n\nOne of the great things about Nix is that since it's source built, it has first-class support for applying patches to software.", "start_char_idx": 4248, "end_char_idx": 7549, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b700b0d0-1c69-47ee-a052-2652e1644217": {"__data__": {"id_": "b700b0d0-1c69-47ee-a052-2652e1644217", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "432557fc-f176-4200-9000-02e00f73a435", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "8bfa3475e8eb23eb02dcaef27d6d39b756ad0f49862a69b606ad228c69e15efc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15b41c07-ba44-4257-863b-bbabc5e4cbef", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "5244cee3d6210d76c77041c202e1ef340fad33385e157f8d22ff7ae8400615a4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "aa0f2055-801d-46d2-b4bf-35681a0ca464", "node_type": "1", "metadata": {}, "hash": "fe5c6ed37cde31e4e01aaee156ffd5d2580839297195a2378b523c82a871150c", "class_name": "RelatedNodeInfo"}}, "hash": "305f199a8dcf5741db49fe2cb7484806e518e72b134ec52176d0a7f805e904e4", "text": "That is an oversimplification, but it's a good approximation.\n\nIf you're unsure where to put a dependency, use buildInputs. Even if you accidentally put a build-time dependency there, the derivation should still build. It's not ideal, but if you're just trying to get some software into your repl, it'll do just fine.\n\nThere are even more ways to specify dependencies, but unless you're cross-compiling they're unlikely to matter to you.\n\nPatches\u200b\n\nOne of the great things about Nix is that since it's source built, it has first-class support for applying patches to software.\n\npkgs.stdenv.mkDerivation {\n\nname = \"foo-1.2.3\";\n\n...\n\npatches = [\n\n(fetchpatch {\n\nurl = \"https://example.com/patches/001_arches_align.patch\";\n\nsha256 = \"0i3qclm2mh98c04rqpx1r4qagd3wpxlkj7lvq0ddpkmr8bm0fh0m\";\n\n})\n\n(fetchpatch {\n\nurl = \"https://example.com/patches/002_no_remove_static_const.patch\";\n\nsha256 = \"0zfjqmjsj0y1kfzxbp29v6nxq5qwgazhb9clqc544sm5zn0bdp8n\";\n\n})\n\n(fetchpatch {\n\nurl = \"https://example.com/patches/003_64_bit_clean.patch\";\n\nsha256 = \"0mda9fkaqf2s1xl6vlbkbq20362h3is9dpml9kfmacpbifl4dx3n\";\n\n})\n\n];\n\nPatches are applied in the order that they are listed. They must be in the format accepted by the patch command, and may optionally be compressed using gzip, bzip2, or xz.\n\nThey can be local files, or you can fetch them. Prefer using fetchpatch rather than fetchurl to fetch patches. It works similarly, but it performs normalization on the patches before computing the hash, such as removing comments and unstable parts sometimes added by version control systems that change over time (and which would otherwise cause the hash to change).\n\nEnvironment variables\u200b\n\nAny attributes that you set on stdenv.mkDerivation will also be made available in the build environment as environment variables. Be aware that they'll be set in all phases if you set them this way.\n\nBuild phases\u200b\n\nThe standard builder script has several phases, which are defined as bash functions. You can influence the behaviour of each phase by setting specific attributes on stdenv.mkDerivation, some of which are detailed below. The most common phases are as follows, in order:\n\nunpackPhase: This should unpack the source into the current directory. The default implementation simply unpacks the derivation's src files.By default it supports plain tar archives, or those compressed by gzip (*.tar.gz, *.tgz or *.tar.Z), bzip2 (*.tar.bz2, *.tbz2 or *.tbz) or xz (*.tar.xz, *.tar.lzma or *.txz).It can also automatically unpack zip files. Zip files are unpacked using the unzip package, which is not in the standard environment. Add it to nativeBuildInputs.Setting dontUnpack to true will skip this phase.\n\npatchPhase: The patch phase applies any supplied patches to the unpacked source code.patchFlags sets flags to be passed to patch. If not set, the argument -p1 is used, which causes the leading directory component to be stripped from the file names in each patch.Setting dontPatch to true skips this phase, but if patches is not set it's also skipped.\n\nconfigurePhase: Prepares the source tree for building. By default, it runs ./configure if it exists.Set configureScript to change the configure script. Defaults to ./configure.Set configureFlags to pass additional arguments to the configure script.By default, --prefix=$prefix is added to the configure flags. Set dontAddPrefix to disable this.Set prefix to set the $prefix variable above (remember how attributes defined here are also exposed as environment variables). By default this is set to $out, which is the output directory that Nix creates for your package in the Nix store.Setting dontConfigure to true will skip this phase.\n\nbuildPhase:Set makeFile to change the name of the MakeFile.Set makeFlags to pass additional flags to make.Set buildFlags to pass additional flags to make, but only called during the build phase.Setting dontBuild to true will skip this phase.\n\ninstallPhase:Set installFlags to pass additional flags to make, that will only be called during the install phase.Remember that makeFlags will also affect this phase.Setting dontInstall to true will skip this phase.", "start_char_idx": 6973, "end_char_idx": 11093, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "aa0f2055-801d-46d2-b4bf-35681a0ca464": {"__data__": {"id_": "aa0f2055-801d-46d2-b4bf-35681a0ca464", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "432557fc-f176-4200-9000-02e00f73a435", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "8bfa3475e8eb23eb02dcaef27d6d39b756ad0f49862a69b606ad228c69e15efc", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b700b0d0-1c69-47ee-a052-2652e1644217", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}, "hash": "305f199a8dcf5741db49fe2cb7484806e518e72b134ec52176d0a7f805e904e4", "class_name": "RelatedNodeInfo"}}, "hash": "fe5c6ed37cde31e4e01aaee156ffd5d2580839297195a2378b523c82a871150c", "text": "Defaults to ./configure.Set configureFlags to pass additional arguments to the configure script.By default, --prefix=$prefix is added to the configure flags. Set dontAddPrefix to disable this.Set prefix to set the $prefix variable above (remember how attributes defined here are also exposed as environment variables). By default this is set to $out, which is the output directory that Nix creates for your package in the Nix store.Setting dontConfigure to true will skip this phase.\n\nbuildPhase:Set makeFile to change the name of the MakeFile.Set makeFlags to pass additional flags to make.Set buildFlags to pass additional flags to make, but only called during the build phase.Setting dontBuild to true will skip this phase.\n\ninstallPhase:Set installFlags to pass additional flags to make, that will only be called during the install phase.Remember that makeFlags will also affect this phase.Setting dontInstall to true will skip this phase.\n\nYou can override any of these phases by setting an attribute with the phase's name. It will be executed as a bash script in the standard environment.\n\nYou can also adjust the build by running code before and after each phase. Set at attribute with either pre or post and the phase's name (capitalized), e.g. preConfigure or postBuild.\n\nYou can add yet more phases before or after each of these phases, or even reorder them completely. Read the documentation for build phases for details on how to do that.\n\nHere we've covered the basics. Read stdenv.mkDerivation's documentation for more. Remember that this is the basis for the largest software repository, and as such there's a lot it is capable of.\n\nShell functions and utilities\u200b\n\nThe standard environment also has a few shell functions and utilities that may be helpful if you're making adjustments to the phases above, such as:\n\nsubstituteInPlace, which performs substitutions in files, especially handy to replace references in scripts to executables in nix derivations to get them to work correctly:substituteInPlace ./foo.sh \\  --replace /usr/bin/bar $bar/bin/bar \\  --replace /usr/bin/baz $bar/bin/baz\n\nDedicated builders\u200b\n\nAs we touched on before, stdenv.mkDerivation is not the only builder. Many frameworks, programming languages, or build systems have dedicated builders that provide conveniences and abstractions for their idiosyncrasies. Be sure to have a look at builders for specific languages and frameworks in the Nixpkgs manual.\n\nIt is not necessarily an exhaustive list. Even if you don't see a dedicated builder for your use case listed in the manual, there may still be one. The best way to find out is to have a look at source code in Nixpkgs, which is hosted on GitHub.\n\nLook for terms, tools, and commands that are specific to your ecosystem. You can use GitHub's web search, or make a local clone of the repo to grep (consider making a shallow clone using git's --depth=1 flag, as it's quite a big repository with many branches and a long history).\n\nPackage setup hooks\u200b\n\nHooks are scripts that are run during the build if a dependency uses them. If a dependency of your derivation uses a hook, that hook will be run during the build of your derivation.\n\nYou should not use hooks directly, but be aware that depending on packages that use hooks may change the way your build works. Even stdenv.mkDerivation includes some hooks, for example, to place docs in the right place, to remove debug symbols, or to compress man pages.\n\ncmake hook, which makes some changes to\n\nFurther reading\u200b\n\nFor more information, be sure to take a look at:\n\nNix Pills 6: Our First Derivation, 7: Working Derivation, and 8: Generic Builders for a gradual build up to stdenv.mkDerivation from first principles.\n\nThe Nixpkgs manual, the authoritative reference, which includes further information, such as advanced features we haven't gotten into here. Of particular interest might be the section on trivial builders for creating things like text files or shell scripts.\n\nPackaging/Binaries on the NixOS Wiki. You may need to use a pre-compiled binary file. This is most common with proprietary software.\n\n< Previous: Import a project from Heroku\n\nNext: Playing audio on Replit >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nFetching softwareFetch files and archives with fetchurl and fetchzipSome notes on hashesFetch Git repositories with fetchgitFetch code from GitHub with fetchFromGitHub\n\nBuilding a packageBuilding with stdenv.mkDerivationBuild phasesShell functions and utilitiesDedicated buildersPackage setup hooks\n\nFurther reading", "start_char_idx": 10150, "end_char_idx": 14693, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"432557fc-f176-4200-9000-02e00f73a435": {"node_ids": ["75f96cad-7f29-4865-9789-cf817a5066e4", "c6d103df-49bf-498e-b1f3-77d8a42f3554", "15b41c07-ba44-4257-863b-bbabc5e4cbef", "b700b0d0-1c69-47ee-a052-2652e1644217", "aa0f2055-801d-46d2-b4bf-35681a0ca464"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/nix-packaging.html"}}}, "docstore/metadata": {"75f96cad-7f29-4865-9789-cf817a5066e4": {"doc_hash": "7e00b8d09dd5ee03ec782c025873fad1bde324a3cabbbb5954ee7a4d47dfcf30", "ref_doc_id": "432557fc-f176-4200-9000-02e00f73a435"}, "c6d103df-49bf-498e-b1f3-77d8a42f3554": {"doc_hash": "f915e8ed427f3f5cc820d47df759e00ebb278acb812fb9a8e5021f3939a3756e", "ref_doc_id": "432557fc-f176-4200-9000-02e00f73a435"}, "15b41c07-ba44-4257-863b-bbabc5e4cbef": {"doc_hash": "5244cee3d6210d76c77041c202e1ef340fad33385e157f8d22ff7ae8400615a4", "ref_doc_id": "432557fc-f176-4200-9000-02e00f73a435"}, "b700b0d0-1c69-47ee-a052-2652e1644217": {"doc_hash": "305f199a8dcf5741db49fe2cb7484806e518e72b134ec52176d0a7f805e904e4", "ref_doc_id": "432557fc-f176-4200-9000-02e00f73a435"}, "aa0f2055-801d-46d2-b4bf-35681a0ca464": {"doc_hash": "fe5c6ed37cde31e4e01aaee156ffd5d2580839297195a2378b523c82a871150c", "ref_doc_id": "432557fc-f176-4200-9000-02e00f73a435"}}}