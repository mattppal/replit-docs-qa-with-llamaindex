{"docstore/data": {"e4e4e6ac-21da-4c85-924c-deee3de6295d": {"__data__": {"id_": "e4e4e6ac-21da-4c85-924c-deee3de6295d", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-basic-discord-bot-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "948f786d-164e-4dc5-b779-a75075334474", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-basic-discord-bot-nodejs.html"}, "hash": "8c648db4f5882fd95a547800943f62654b08c129ac9417349c27466cebdc09c1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9bc97aa0-bab7-4197-98ec-b5e0eafdee8e", "node_type": "1", "metadata": {}, "hash": "c8a2c6695962011796c30086520248afbb103e51fde28e5f5df14e683937d03b", "class_name": "RelatedNodeInfo"}}, "hash": "c9bc69003ea20c272486aeaf4071a23d0b77f9cced421eb97e5293341c57e0f6", "text": "\"I'm in\"\n\nconsole\n\nlog\n\nclient\n\nuser\n\nusername\n\nclient\n\non\n\n\"messageCreate\"\n\nmsg\n\n=>\n\nif\n\nmsg\n\nauthor\n\nid\n\n!=\n\nclient\n\nuser\n\nid\n\nmsg\n\nchannel\n\nsend\n\nmsg\n\ncontent\n\nsplit\n\n\"\"\n\nreverse\n\njoin\n\n\"\"\n\nclient\n\nlogin\n\ntoken\n\nLet's tear this apart line by line to see what it does.\n\nLine 1 is the line we added earlier. This line tells Replit to install the third party library and brings it into this file so that we can use it.\n\nIn line 2, we create a Discord Client. We'll use this client to send commands to the Discord server to control our bot and send it commands.\n\nIn line 3-8, we provide the intents of our Client, these are provided to designate which events our bot will be able to receive.\n\nIn line 9, we retrieve our secret token from the environment variables (which Replit sets from the \"Secrets\" menu).\n\nIn line 11, we define an event for our client, which defines how our bot should react to the ready event. The Discord bot is going to run asynchronously, which might be a bit confusing if you're used to running standard synchronous code. We won't go into asynchronous coding in-depth here, but if you're interested in what this is and why it's used, there's a good guide over at RisingStack. In short, instead of running the code in our file from top to bottom, we'll be running pieces of code in response to specific events.\n\nIn lines 12-14, we define how our bot should respond to the ready event, which is fired when our bot successfully joins a server. We instruct our bot to output some information server-side (i.e. it will be displayed in our repl's output, but not sent as a message through to Discord). We'll print a simple \"I'm in\" message to see that the bot is there and print our bot's username (if you're running multiple bots, this will make it easier to work out who's doing what).\n\nLines 16-20 are similar, but instead of responding to a ready event, we tell our bot how to handle new messages. Line 17 says we only want to respond to messages that aren't from us (otherwise our bot will keep responding to himself -- you can remove this line to see why that's a problem), and line 18 says we'll send a new message to the same channel we received a message in (msg.channel) and the content we'll send will be the same message that we received, but backwards. To reverse a string, we split it into its individual characters, reverse the resulting array, and then join it all back into a string again.\n\nThe last line fires up our bot and uses the token we loaded earlier to log into Discord.\n\nPress the \"Run\" button again and you should see your bot reporting a successful channel join in the repl output.\n\nOpen Discord, and from within the server we created earlier, you will be able to send a message (by typing into the box highlighted below) and see your bot respond!\n\nThe bot responds each time, reversing the text we enter.\n\nKeeping our bot alive\u200b\n\nYour bot can now respond to messages, but only for as long as your repl is running. If you close your browser tab or shut down your computer, your bot will stop and no longer respond to messages on Discord.\n\nReplit will keep your code running after you close the browser tab only if you are running a web server. Our bot doesn't require an explicit web server to run, but we can create a server and run it in the background just to keep our repl alive.\n\nCreate a new file in your project called keep_alive.js and add the following code:\n\nvar\n\nhttp\n\nrequire\n\n\"http\"\n\nhttp\n\ncreateServer\n\nfunction\n\nreq\n\nres\n\nres\n\nwrite\n\n\"I'm alive\"\n\nres\n\nend\n\nlisten\n\n8080\n\nWe won't go over this in detail as it's not central to our bot, but here we start a web server that will return \"I'm alive\" if anyone visits it.\n\nIn our index.js file, we need to add a require statement for this server at the top. Add the following line near the top of index.js:\n\nconst\n\nkeep_alive\n\nrequire\n\n\"./keep_alive.js\"\n\nAfter doing this and hitting the green \"Run\" button again, you should see some changes to your repl. For one, you'll see a new pane in the top right that shows the web output from your server. We can see that visiting our repl now returns a basic web page showing the \"I'm alive\" string that we told our web server to return by default.", "start_char_idx": 0, "end_char_idx": 4198, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bc97aa0-bab7-4197-98ec-b5e0eafdee8e": {"__data__": {"id_": "9bc97aa0-bab7-4197-98ec-b5e0eafdee8e", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-basic-discord-bot-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "948f786d-164e-4dc5-b779-a75075334474", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-basic-discord-bot-nodejs.html"}, "hash": "8c648db4f5882fd95a547800943f62654b08c129ac9417349c27466cebdc09c1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4e4e6ac-21da-4c85-924c-deee3de6295d", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-basic-discord-bot-nodejs.html"}, "hash": "c9bc69003ea20c272486aeaf4071a23d0b77f9cced421eb97e5293341c57e0f6", "class_name": "RelatedNodeInfo"}}, "hash": "c8a2c6695962011796c30086520248afbb103e51fde28e5f5df14e683937d03b", "text": "In our index.js file, we need to add a require statement for this server at the top. Add the following line near the top of index.js:\n\nconst\n\nkeep_alive\n\nrequire\n\n\"./keep_alive.js\"\n\nAfter doing this and hitting the green \"Run\" button again, you should see some changes to your repl. For one, you'll see a new pane in the top right that shows the web output from your server. We can see that visiting our repl now returns a basic web page showing the \"I'm alive\" string that we told our web server to return by default.\n\nNow your bot will stay alive even after closing your browser or shutting down your development machine. Replit will still clean up your server and kill your bot after about one hour of inactivity, so if you don't use your bot for a while, you'll have to log into your repl and start the bot up again. Alternatively, you can set up a third-party (free!) service like Uptime Robot. Uptime Robot pings your site every five minutes to make sure it's still working -- usually to notify you of unexpected downtime, but in this case the constant pings have the side effect of keeping our repl alive as it will never go more than an hour without receiving any activity. Note that you need to select the \"HTTP\" option instead of the \"Ping\" option when setting up Uptime Robot, as Replit requires regular HTTP requests to keep your chatbot alive, or you can use a Deployment repl to keep it running 24/7.\n\nForking and extending our basic bot\u200b\n\nThis is not a very useful bot as-is, but the possibilities are only limited by your creativity now! You can have your bot receive input from a user, process the input, and respond in any way you choose. In fact, with the basic input and output that we've demonstrated, we have most of the components of any modern computer, all of which are based on the Von Neumann architecture (we could easily add the missing memory by having our bot write to a file, or with a bit more effort link in a SQLite database for persistent storage).\n\nIf you followed along with this tutorial, you'll have your own basic repl bot to play around with and extend. If you were only reading, you can easily fork my bot at https://replit.com/@ritza/discord-bot-node-1 and extend it however you like (you'll need to add your own token and reset the secrets still). Happy hacking!\n\nIf you're stuck for ideas, you could try link up your Discord bot to the Twitch API to get notified when your favorite streamers are online, or build a text adventure.\n\nFurther Reading:\u200b\n\nIf you are interested, here's another Discord bot tutorial:\n\nRole assignment bot with Python\n\n< Previous: Node.js\n\nNext: CRM app with Node.js, Replit, and MongoDB >\n\nWas this helpful?\n\nLast updated on Nov 2, 2023\n\nOverview and requirementsCreating a bot in Discord and getting a tokenCreating a Discord serverAdding your Discord bot to your Discord server\n\nCreating a repl and installing our Discord dependencies\n\nSetting up authorization for our bot\n\nKeeping our bot alive\n\nForking and extending our basic bot\n\nFurther Reading:", "start_char_idx": 3680, "end_char_idx": 6705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"948f786d-164e-4dc5-b779-a75075334474": {"node_ids": ["e4e4e6ac-21da-4c85-924c-deee3de6295d", "9bc97aa0-bab7-4197-98ec-b5e0eafdee8e"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-basic-discord-bot-nodejs.html"}}}, "docstore/metadata": {"e4e4e6ac-21da-4c85-924c-deee3de6295d": {"doc_hash": "c9bc69003ea20c272486aeaf4071a23d0b77f9cced421eb97e5293341c57e0f6", "ref_doc_id": "948f786d-164e-4dc5-b779-a75075334474"}, "9bc97aa0-bab7-4197-98ec-b5e0eafdee8e": {"doc_hash": "c8a2c6695962011796c30086520248afbb103e51fde28e5f5df14e683937d03b", "ref_doc_id": "948f786d-164e-4dc5-b779-a75075334474"}}}