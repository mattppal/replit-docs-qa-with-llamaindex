{"docstore/data": {"e02c6b6c-7394-4fc8-869c-e1fc2f8badd4": {"__data__": {"id_": "e02c6b6c-7394-4fc8-869c-e1fc2f8badd4", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b9e6957-92a8-46a9-a2a9-31605f137fcc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "hash": "b1193434cb74995f3d26edb7983f7ceda81d2adce5b8d4add300d43f5e5257f5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6b298ee8-c7a8-4105-8fd2-edf2222fddce", "node_type": "1", "metadata": {}, "hash": "467304c10d20c377a198c939f8d73a1174228e31b749e5831a7467251fe6f9aa", "class_name": "RelatedNodeInfo"}}, "hash": "a2b71395ac5ef2ea96026a4eaafc9d28e59be8c0e32a99f7df66db4c38c8f493", "text": "IF...THEN\u200b\n\nIF...THEN is like GOTO in that it influences the execution of the program, but it's different in that it all happens on the same line. If the mathematical or relational test is true, we execute the command that comes after THEN. If it's untrue, we simply proceed to the next line.\n\n10 IF X > Y THEN PRINT \"X is larger than Y\"\n\nIF...THEN...ELSE\u200b\n\nThis is the same as IF...THEN except we execute the command following the ELSE command.\n\n10 IF X > 0 THEN PRINT \"X is positive\" ELSE PRINT \"X is negative\"\n\nFOR...TO...STEP...NEXT\u200b\n\nIt's often useful to repeatedly execute a number of lines. This is called \"looping\", and FOR statements allow us to create loops between ranges of numbers.\n\nFor example, we can print numbers from 1 to 10:\n\n10 FOR I = 1 TO 10\n\n20 PRINT I\n\n30 NEXT I\n\nOutput:\n\n10\n\nBut what if we only want to print even numbers between 1 and 10? This is where STEP comes in. STEPS tells the computer how much to add to the variable (in this case I) with each loop.\n\n10 FOR I = 2 TO 30 STEP 2\n\n20 PRINT I\n\n30 NEXT I\n\nOutput:\n\n10\n\nRemember to call NEXT with the variable name after the last line of the loop.\n\nGOSUB...RETURN\u200b\n\nA subroutine is a group of statements that you wish to use repeatedly in a program. They're similar to loops in that they can be executed repeatedly, but you have to use GOSUB to call (move the program to) the subroutine's first line number. After the subroutine finishes executing, you can use RETURN to go back to where you used GOSUB.\n\nExample:\n\n10 GOSUB 40\n\n20 PRINT \"This is the end of the program\"\n\n30 END\n\n40 PRINT \"This is the start of the subroutine\"\n\n50 PRINT \"We can easily call it as many times\"\n\n60 PRINT \"as we'd like\"\n\n70 RETURN\n\nPLOT\u200b\n\nPLOT lights a pixel with x, y coordinates on the display with a certain color.\n\nExample:\n\n10 PLOT 0, 0, \"red\"\n\nColors can be any of the these colors.\n\nDISPLAY\u200b\n\nDISPLAY changes the display size (rows, columns) and lets us turn off pixel borders.\n\nExample:\n\nDISPLAY 100, 100, FALSE\n\nDISPLAY will affect the values of the constants ROWS and COLUMNS.\n\nExample:\n\nDISPLAY 50, 100, FALSE\n\nPRINT ROWS\n\nPRINT COLUMNS\n\nOUTPUT:\n\n50\n\n100\n\nDRAW\u200b\n\nDRAW is like PLOT except it lights up multiple pixels on the display. It takes a two-dimensional array of colors.\n\nExample:\n\n10 ARRAY a, 2\n\n20 a[0][0] = \"red\"\n\n30 a[25][25] = \"yellow\"\n\n40 DRAW a\n\nTEXT\u200b\n\nTEXT draws text on the display at an x, y coordinate. Optional text size and color parameters can be passed in.\n\nExample:\n\n10 TEXT 0, 0, \"hello world\", 25, \"red\"\n\nColors can be any of the these colors.\n\nPAUSE\u200b\n\nPAUSE pauses the program for a number of milliseconds. Milliseconds are 1/1000th of a second.\n\nExample:\n\n10 PRINT \"pause for a second\"\n\n20 PAUSE 1000\n\n30 PRINT \"end\"\n\nCLS\u200b\n\nCLS clears the console and the display.\n\nExample:\n\n10 CLS\n\nCLT\u200b\n\nCLT clears the console.\n\nExample:\n\n10 CLT\n\nCLC\u200b\n\nCLC clears the display.\n\nExample:\n\n10 CLC\n\nSOUND\u200b\n\nSOUND lets us play a frequency for a duration in seconds.\n\nExample:\n\n10 SOUND 400, 4\n\nDuration is optional and will default to 1 second.\n\nPLAY\u200b\n\nPLAY lets us play a note in an octave for a duration in seconds.\n\nExample:\n\n10 PLAY \"C\", 4, 5\n\nOctave is optional and will default to 2\n\nDuration is optional and will default to 1\n\nNotes can be one of: C C# D D# E F F# G G# A A# B\n\nFunctions\u200b\n\nYou can think of functions as built-in subroutines you can call. It's important to differentiate between functions and commands. Lines should start with commands, while functions can be used as part of other commands but not on their own.\n\nABS\u200b\n\nABS returns the absolute value of a number. The sign of the number will always be positive after this function is executed.\n\n10 PRINT ABS(-11)\n\n20 PRINT ABS(11)\n\nOutput:\n\n11\n\n11\n\nCOS\u200b\n\nCOS returns the trigonometric cosine of a number.", "start_char_idx": 0, "end_char_idx": 3753, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6b298ee8-c7a8-4105-8fd2-edf2222fddce": {"__data__": {"id_": "6b298ee8-c7a8-4105-8fd2-edf2222fddce", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b9e6957-92a8-46a9-a2a9-31605f137fcc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "hash": "b1193434cb74995f3d26edb7983f7ceda81d2adce5b8d4add300d43f5e5257f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e02c6b6c-7394-4fc8-869c-e1fc2f8badd4", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "hash": "a2b71395ac5ef2ea96026a4eaafc9d28e59be8c0e32a99f7df66db4c38c8f493", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fd514839-1b5f-491f-acb1-523b1c4f3a92", "node_type": "1", "metadata": {}, "hash": "65240f215429b16b303a02f449affc6c954384c864727bce927c5e87c0378829", "class_name": "RelatedNodeInfo"}}, "hash": "467304c10d20c377a198c939f8d73a1174228e31b749e5831a7467251fe6f9aa", "text": "PLAY\u200b\n\nPLAY lets us play a note in an octave for a duration in seconds.\n\nExample:\n\n10 PLAY \"C\", 4, 5\n\nOctave is optional and will default to 2\n\nDuration is optional and will default to 1\n\nNotes can be one of: C C# D D# E F F# G G# A A# B\n\nFunctions\u200b\n\nYou can think of functions as built-in subroutines you can call. It's important to differentiate between functions and commands. Lines should start with commands, while functions can be used as part of other commands but not on their own.\n\nABS\u200b\n\nABS returns the absolute value of a number. The sign of the number will always be positive after this function is executed.\n\n10 PRINT ABS(-11)\n\n20 PRINT ABS(11)\n\nOutput:\n\n11\n\n11\n\nCOS\u200b\n\nCOS returns the trigonometric cosine of a number.\n\nExample:\n\n10 PRINT COS(1)\n\nOutput:\n\n0.5403023058681398\n\nSIN\u200b\n\nSIN returns the trigonometric sine of a number.\n\nExample:\n\n10 PRINT SIN(1)\n\nOutput:\n\n0.8414709848078965\n\nTAN\u200b\n\nTAN returns the trigonometric tangent of a number.\n\nExample:\n\n10 PRINT TAN(1)\n\nOutput:\n\n1.5574077246549023\n\nATAN\u200b\n\nATAN returns the trigonometric arctangent of a number.\n\nExample:\n\n10 PRINT ATAN(1)\n\nOutput:\n\n0.7853981633974483\n\nEXP\u200b\n\nEXP returns Euler's number (e) raised to the power of a number.\n\nExample:\n\n10 PRINT EXP(2)\n\nOutput:\n\n7.38905609893065\n\nINT\u200b\n\nINT returns the lowest closest integer of a number.\n\nExample:\n\n10 PRINT INT(2.6)\n\nOutput:\n\nAlias: FLOOR\n\nROUND\u200b\n\nROUND rounds a number to the closest integer.\n\nExample:\n\n10 PRINT ROUND(2.6)\n\nOutput:\n\nLOG\u200b\n\nLOG returns the natural logarithm of a number.\n\nExample:\n\n10 PRINT LOG(5)\n\nOutput:\n\n1.6094379124341003\n\nSGN\u200b\n\nSGN returns the sign of a number. The sign is +1 if the number is positive, 0 if the number is 0, and -1 if the number is negative.\n\nExample:\n\n10 PRINT SGN(-23)\n\nOutput:\n\nSQR\u200b\n\n1\n\nSQR\u200b\n\nSQR returns the square root of a number.\n\nExample:\n\n10 PRINT SQR(25)\n\nOutput:\n\nVAL\u200b\n\nVAL converts a string to a number, and 0 if it cannot be converted.\n\nExample:\n\n10 PRINT VAL(\"33\")\n\nOutput:\n\n33\n\nRND\u200b\n\nRND returns a random number between 0 and 1.\n\nExample:\n\n10 PRINT RND()\n\nOutput:\n\n0.54232\n\nIf a number is placed between the parenthesis, then the command will return a random number between 1 and that number.\n\nExample:\n\n10 PRINT RND(10)\n\nOutput:\n\nASC\u200b\n\nASC returns the ASCII representation of a letter.\n\nExample:\n\n10 PRINT \"s\"\n\nOutput:\n\n115\n\nLEFT\u200b\n\nLEFT returns the first n number of letters from a string.\n\nExample:\n\n10 PRINT LEFT(\"basic\", 2)\n\nOutput:\n\nba\n\nMID\u200b\n\nMID returns a substring as defined by a starting and ending position in the string.\n\nExample:\n\n10 PRINT MID(\"basic\", 1, 2)\n\nOutput\n\nas\n\nRIGHT\u200b\n\nRIGHT returns the last n number of letters from a string.\n\nExample:\n\n10 PRINT RIGHT(\"basic\", 2)\n\nOutput:\n\nic\n\nCHR\u200b\n\nCHR returns the ASCII letter from a number.\n\nExample:\n\n10 PRINT CHR(115)\n\nOutput:\n\nAliases: STR\n\nLEN\u200b\n\nLEN returns the length of a string.\n\nExample:\n\n10 PRINT LEN(\"basic\")\n\nOutput:\n\nSPC\u200b\n\nSPC returns a number of spaces.\n\nExample:\n\n10 PRINT \"hello\" + SPC(5) + \"world\"\n\nOutput:\n\nhello     world\n\nUPPERCASE\u200b\n\nUPPERCASE returns the uppercase string.\n\nExample:\n\n10 PRINT UPPERCASE(\"basic\")\n\nOutput:\n\nBASIC\n\nLOWERCASE\u200b\n\nLOWERCASE returns the lowercase string.\n\nExample:\n\n10 PRINT LOWERCASE(\"BASIC\")\n\nOutput:\n\nbasic\n\nCOLOR\u200b\n\nCOLOR returns the color of a pixel at x, y coordinates.\n\nExample:\n\n10 PLOT 1,1,\"red\"\n\n20 PRINT COLOR(1, 1)\n\nOutput:\n\nred\n\nGETCHAR\u200b\n\nGETCHAR returns a single character of user input. The program maintains a first-in-first-out queue of user inputs. If there are no user inputs in the queue, it will return an empty string \"\".\n\nExample:\n\n10 LET I = GETCHAR()\n\n20 IF I = \"\" THEN PRINT \"no input\" else PRINT \"input: \" + I\n\nGETCLICK\u200b\n\nGETCLICK returns an array of x, y coordinates of user mouse clicks.", "start_char_idx": 3022, "end_char_idx": 6730, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fd514839-1b5f-491f-acb1-523b1c4f3a92": {"__data__": {"id_": "fd514839-1b5f-491f-acb1-523b1c4f3a92", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "5b9e6957-92a8-46a9-a2a9-31605f137fcc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "hash": "b1193434cb74995f3d26edb7983f7ceda81d2adce5b8d4add300d43f5e5257f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6b298ee8-c7a8-4105-8fd2-edf2222fddce", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}, "hash": "467304c10d20c377a198c939f8d73a1174228e31b749e5831a7467251fe6f9aa", "class_name": "RelatedNodeInfo"}}, "hash": "65240f215429b16b303a02f449affc6c954384c864727bce927c5e87c0378829", "text": "Example:\n\n10 PRINT UPPERCASE(\"basic\")\n\nOutput:\n\nBASIC\n\nLOWERCASE\u200b\n\nLOWERCASE returns the lowercase string.\n\nExample:\n\n10 PRINT LOWERCASE(\"BASIC\")\n\nOutput:\n\nbasic\n\nCOLOR\u200b\n\nCOLOR returns the color of a pixel at x, y coordinates.\n\nExample:\n\n10 PLOT 1,1,\"red\"\n\n20 PRINT COLOR(1, 1)\n\nOutput:\n\nred\n\nGETCHAR\u200b\n\nGETCHAR returns a single character of user input. The program maintains a first-in-first-out queue of user inputs. If there are no user inputs in the queue, it will return an empty string \"\".\n\nExample:\n\n10 LET I = GETCHAR()\n\n20 IF I = \"\" THEN PRINT \"no input\" else PRINT \"input: \" + I\n\nGETCLICK\u200b\n\nGETCLICK returns an array of x, y coordinates of user mouse clicks. The program maintains a queue of clicks. If there are no user clicks in the queue, it will return an empty string \"\".\n\nExample:\n\nPRINT GETCLICK()\n\nTIME\u200b\n\nTIME returns the current milliseconds elapsed since the UNIX epoch.\n\nExample:\n\n10 PRINT TIME()\n\nOutput:\n\n1587345235623\n\n< Previous: 3D rendering with three.js\n\nNext: Creative coding with Replit >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nSyntax\n\nCommandsREMPRINTLET (optional)ARRAYINPUTENDGOTOIF...THENIF...THEN...ELSEFOR...TO...STEP...NEXTGOSUB...RETURNPLOTDISPLAYDRAWTEXTPAUSECLSCLTCLCSOUNDPLAY\n\nFunctionsABSCOSSINTANATANEXPINTROUNDLOGSGNSQRVALRNDASCLEFTMIDRIGHTCHRLENSPCUPPERCASELOWERCASECOLORGETCHARGETCLICKTIME", "start_char_idx": 6063, "end_char_idx": 7408, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"5b9e6957-92a8-46a9-a2a9-31605f137fcc": {"node_ids": ["e02c6b6c-7394-4fc8-869c-e1fc2f8badd4", "6b298ee8-c7a8-4105-8fd2-edf2222fddce", "fd514839-1b5f-491f-acb1-523b1c4f3a92"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/classic-basic-replit.html"}}}, "docstore/metadata": {"e02c6b6c-7394-4fc8-869c-e1fc2f8badd4": {"doc_hash": "a2b71395ac5ef2ea96026a4eaafc9d28e59be8c0e32a99f7df66db4c38c8f493", "ref_doc_id": "5b9e6957-92a8-46a9-a2a9-31605f137fcc"}, "6b298ee8-c7a8-4105-8fd2-edf2222fddce": {"doc_hash": "467304c10d20c377a198c939f8d73a1174228e31b749e5831a7467251fe6f9aa", "ref_doc_id": "5b9e6957-92a8-46a9-a2a9-31605f137fcc"}, "fd514839-1b5f-491f-acb1-523b1c4f3a92": {"doc_hash": "65240f215429b16b303a02f449affc6c954384c864727bce927c5e87c0378829", "ref_doc_id": "5b9e6957-92a8-46a9-a2a9-31605f137fcc"}}}