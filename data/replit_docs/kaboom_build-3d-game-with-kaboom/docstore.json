{"docstore/data": {"425530e9-2c30-48fa-abb8-571aee01112d": {"__data__": {"id_": "425530e9-2c30-48fa-abb8-571aee01112d", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e52e1ded-d8e4-4be4-a485-d991ee2339b6", "node_type": "1", "metadata": {}, "hash": "192b6e89f760e6c3858caad87d08441de89d0e8ef97b71b362bd606b28de54a2", "class_name": "RelatedNodeInfo"}}, "hash": "4ac03d3bbe9391aeabe724c10e399d10747f7ccbda948e3092d931c42f174d95", "text": "let\n\naliens\n\nfunction\n\nspawnAlien\n\nconst\n\nrand\n\nSCREEN_WIDTH\n\nconst\n\nrand\n\nSCREEN_HEIGHT\n\nvar\n\nnewAlien\n\nadd\n\nsprite\n\n\"alien\"\n\npos\n\nscale\n\n0.2\n\narea\n\nrotate\n\nxpos\n\nrand\n\nSCREEN_WIDTH\n\nSCREEN_WIDTH\n\nypos\n\nrand\n\nSCREEN_HEIGHT\n\nSCREEN_HEIGHT\n\nzpos\n\n1000\n\nspeed\n\nALIEN_SPEED\n\nrand\n\n0.5\n\nALIEN_SPEED\n\n0.5\n\nALIEN_SPEED\n\n\"alien\"\n\naliens\n\npush\n\nnewAlien\n\nloop\n\n0.8\n\nspawnAlien\n\nFirst, we define some general constants for the size of the screen and the speed at which aliens will move. This way, we don't have to keep remembering and typing numbers, and it's easier to change these aspects later if we need to. We also create an array to hold each alien object we create so that we can keep track of all of them. This will be especially important when we add movement to the aliens.\n\nThe function spawnAlien creates a new alien at a random location on the screen. The first lines calculate a random x and y position to place the alien on the screen initially. This isn't logically needed, as we'll calculate the alien's actual position later from our 3D coordinate system and calculate the projected screen position on each frame. But we need to pass a position pos component to the add method when we create a new object, so any random position will do.\n\nThere are two more components we include when constructing the alien object:\n\nscale, allowing us to adjust the size of the alien over time as if it's getting closer, and\n\nrotate, allowing us to rotate the aliens so we can simulate 'rolling' when changing the spaceship's direction.\n\nWe also add the coordinates of the alien's position in the 3D system to the alien object as custom properties. We start with a fixed zpos, or position on the Z axis, far from the screen.\n\nThen we set the alien's speed, varied by a random amount of up to half the base speed faster or slower so that there's some variety in the way aliens approach the ship. We'll use these custom values when we calculate the alien's position on each frame.\n\nFinally, we add the new alien to the aliens array we created earlier to keep track of it.\n\nOutside the function, we make use of the Kaboom loop functionality to call the spawnAlien function to create new aliens at regular intervals.\n\nMoving the alien bugs\u200b\n\nNow we need to have the aliens we've generated move with each frame. Here's the code:\n\nonUpdate\n\n\"alien\"\n\nalien\n\n=>\n\nalien\n\nzpos\n\n=\n\nalien\n\nspeed\n\ndt\n\nalien\n\nscale\n\nalien\n\nzpos\n\n0.002\n\nconst\n\ncenterX\n\nSCREEN_WIDTH\n\n0.5\n\nconst\n\ncenterY\n\nSCREEN_HEIGHT\n\n0.25\n\nalien\n\npos\n\ncenterX\n\nalien\n\nxpos\n\nalien\n\nzpos\n\n0.001\n\nalien\n\npos\n\ncenterY\n\nalien\n\nypos\n\nalien\n\nzpos\n\n0.001\n\nif\n\nalien\n\nzpos\n\n<=\n\ndestroyAlien\n\nalien\n\nfunction\n\ndestroyAlien\n\nalien\n\naliens\n\naliens\n\nfilter\n\n=>\n\n!=\n\nalien\n\ndestroy\n\nalien\n\nonUpdate event, and filter for any objects tagged\n\ndt() function to get the time from the last frame, together with the speed per second we assigned to the alien when we constructed it, to calculate the alien's new\n\nRemember that screen coordinates start with (0,0) in the top left corner of the screen, and our 3D coordinate system starts with (0,0,0) in the 'center' of the system. To translate between the 2 systems, we need to find the center of the screen so that we can center the 3D system over it. We do this by by halving the screen WIDTH and HEIGHT by 2. The screen is the red rectangle in the image below, showing how the 3D system will be centered on it.\n\nFinally, we see if the alien is very close by seeing if the zpos < 1. If it is, we destroy the alien to remove it from the scene, as it's either gone past our spaceship or crashed into it. We create a small helper function, destroyAlien, to manage this, so that we also remove the alien from the tracking array.\n\nIf you run the code now, you should see the aliens start to move toward you.", "start_char_idx": 0, "end_char_idx": 3781, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e52e1ded-d8e4-4be4-a485-d991ee2339b6": {"__data__": {"id_": "e52e1ded-d8e4-4be4-a485-d991ee2339b6", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "425530e9-2c30-48fa-abb8-571aee01112d", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "4ac03d3bbe9391aeabe724c10e399d10747f7ccbda948e3092d931c42f174d95", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9d81879-2e38-441f-8115-15272d3e418a", "node_type": "1", "metadata": {}, "hash": "bfe81743d1e3772e55c738ed718a4888bd71d43bc4d76ccb6c5aa25cdf1cde7d", "class_name": "RelatedNodeInfo"}}, "hash": "192b6e89f760e6c3858caad87d08441de89d0e8ef97b71b362bd606b28de54a2", "text": "To translate between the 2 systems, we need to find the center of the screen so that we can center the 3D system over it. We do this by by halving the screen WIDTH and HEIGHT by 2. The screen is the red rectangle in the image below, showing how the 3D system will be centered on it.\n\nFinally, we see if the alien is very close by seeing if the zpos < 1. If it is, we destroy the alien to remove it from the scene, as it's either gone past our spaceship or crashed into it. We create a small helper function, destroyAlien, to manage this, so that we also remove the alien from the tracking array.\n\nIf you run the code now, you should see the aliens start to move toward you.\n\nAdding a star field\u200b\n\nNow that we have the aliens moving and coming at us, let's add another element to give a further sense of depth and show that we are in outer space: the star field generator. We can implement the star field in a similar way as we did for the aliens' movement. One difference will be that we will use color, or more specifically intensity, instead of scaling to proxy for the z-axis. Another difference is that we'll have the stars spread away from the center rather than towards it, as if the ship is going past them. This also makes it seem like we're travelling at warp speed, which is cool.\n\nconst\n\nSTAR_COUNT\n\n1000\n\nconst\n\nSTAR_SPEED\n\nvar\n\nstars\n\nfunction\n\nspawnStars\n\nfor\n\nlet\n\nSTAR_COUNT\n\n++\n\nconst\n\nnewStar\n\nxpos\n\nrand\n\n0.5\n\nSCREEN_WIDTH\n\n0.5\n\nSCREEN_WIDTH\n\nypos\n\nrand\n\n0.5\n\nSCREEN_HEIGHT\n\n0.5\n\nSCREEN_HEIGHT\n\nzpos\n\nrand\n\n1000\n\nstars\n\npush\n\nnewStar\n\nspawnStars\n\nonUpdate\n\n=>\n\nconst\n\ncenterX\n\nSCREEN_WIDTH\n\n0.5\n\nconst\n\ncenterY\n\nSCREEN_HEIGHT\n\n0.5\n\nstars\n\nforEach\n\nstar\n\n=>\n\nstar\n\nzpos\n\n=\n\nSTAR_SPEED\n\nif\n\nstar\n\nzpos\n\n<=\n\nstar\n\nzpos\n\n1000\n\nconst\n\ncenterX\n\nstar\n\nxpos\n\nstar\n\nzpos\n\n0.001\n\nconst\n\ncenterY\n\nstar\n\nypos\n\nstar\n\nzpos\n\n0.001\n\nif\n\n>=\n\n&&\n\n<=\n\nSCREEN_WIDTH\n\n&&\n\n>=\n\n&&\n\n<=\n\nSCREEN_HEIGHT\n\nconst\n\nscaled_z\n\nstar\n\nzpos\n\n0.0005\n\nconst\n\nintensity\n\nscaled_z\n\n255\n\ndrawRect\n\nwidth\n\nheight\n\npos\n\nvec2\n\ncolor\n\nrgb\n\nintensity\n\nintensity\n\nintensity\n\nWhile this is very similar to the code we added above for the alien bugs, you'll notice the spawnStars function has a few differences to the spawnAlien function, such as:\n\nWe create all the stars at once. This is because we need a significant star field to start with, not just a few stars every second.\n\nWe don't create a Kaboom object for each star. This is because we don't need the collision handling and other overhead that comes with a Kaboom object, especially since we are generating a lot of stars (const STAR_COUNT = 1000; ). Instead, we store the stars' info in custom object literals, and add each of these to the stars array.\n\nWe set the initial z-pos of the stars to a random value from 0 to 1000, using the Kaboom rand function. We do this because we create all the stars at once, so we seed the stars at random positions on the z-axis to give the feeling of depth to the star field. If the stars were all initialised to the same z-pos, they would move in unison, and it would look like a mass of pixels were coming at us - a bit weird!\n\nNow take a look at the onUpdate event handler for our stars. It differs from the event handler for our alien bugs in a few ways:\n\nWe don't use an object filter to look for the stars, as we didn't create them as Kaboom objects. Instead, we just cycle through each star in the stars array.\n\nInstead of destroying the star and removing it from the array when it reaches the 'front' of the screen, we recycle it by resetting its z-pos back to 1000.\n\nWe also check if the star is out of the screen view. If it is, we don't draw it, to save a bit of overhead.\n\nInstead of using the z-pos to calculate a value by which to scale the star, we use it to calculate the star's intensity, or brightness.", "start_char_idx": 3108, "end_char_idx": 6899, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9d81879-2e38-441f-8115-15272d3e418a": {"__data__": {"id_": "b9d81879-2e38-441f-8115-15272d3e418a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e52e1ded-d8e4-4be4-a485-d991ee2339b6", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "192b6e89f760e6c3858caad87d08441de89d0e8ef97b71b362bd606b28de54a2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "172d8fb1-e61f-4012-862b-f9a7958d70df", "node_type": "1", "metadata": {}, "hash": "c512c8cd709531f7dab9364a7082be50b89b30d15bc49da82c0ea7c412724ebf", "class_name": "RelatedNodeInfo"}}, "hash": "bfe81743d1e3772e55c738ed718a4888bd71d43bc4d76ccb6c5aa25cdf1cde7d", "text": "Now take a look at the onUpdate event handler for our stars. It differs from the event handler for our alien bugs in a few ways:\n\nWe don't use an object filter to look for the stars, as we didn't create them as Kaboom objects. Instead, we just cycle through each star in the stars array.\n\nInstead of destroying the star and removing it from the array when it reaches the 'front' of the screen, we recycle it by resetting its z-pos back to 1000.\n\nWe also check if the star is out of the screen view. If it is, we don't draw it, to save a bit of overhead.\n\nInstead of using the z-pos to calculate a value by which to scale the star, we use it to calculate the star's intensity, or brightness. Kaboom uses color values in the range 0-255. So we first scale the z-pos down to below 1. Then we subtract it from 1 to create an inverse relationship between z-pos and intensity. We then multiply the intensity value by 255 to scale it to a value that is within the range 0-255. In other words, stars further away from us have higher zpos values, giving us lower color intensity. This makes stars far away glow dimly, while those closer to our view look brighter.\n\nFinally, we use the Kaboom's drawRect method to directly draw the star to the screen. As there is no pixel level drawing function in Kaboom, we create a rectangle of size 1 to draw just one pixel.\n\nAdding the spaceship cockpit\u200b\n\nNow that we have a star field to fly through, let's add the player's spaceship. Our game uses the spaceship pilot's point of view. Add the following code to add a view from the spaceship cockpit.\n\nconst\n\ncockpit\n\nadd\n\nsprite\n\n\"cockpit\"\n\nlayer\n\n\"ui\"\n\nrotate\n\npos\n\nSCREEN_WIDTH\n\nSCREEN_HEIGHT\n\norigin\n\n\"center\"\n\nscale\n\n0.275\n\nThis adds the cockpit sprite (image) to the ui layer. We also add the rotate component to it, so that we can add some rotation effects when the spaceship is flying. We use the origin component to center the image in the middle of the screen, which also provides the axis to rotate the sprite around when banking (turning) the spaceship. Then we use a scaling factor to scale the image down to the size of the screen. We scale the image as it's much larger (1334\u00d7834) than the size of the game screen (320x200). We could resize the image in an image editing programme, but we would lose some detail and sharpness. Note that the factor of the scale means that the image is still a little larger than the screen size. This gives us a bit of overlap available for when we rotate the image when banking the spaceship.\n\nRun the game now and you should see the view from inside the spaceship.\n\nCreating the spaceship's movement controls\u200b\n\nOur basic game world is up and running, now let's add some controls so we can move around in it. We'll allow a few different moves for the spaceship: bank left or right, and fly up or down.\n\nConsider for a moment how the spaceship moves through the game world. We can't move the cockpit left or right, up or down - it would just disappear off the screen. One way of simulating movement from the point of view of the cockpit is to keep it stationary and move all the other game elements.\n\nTo achieve this, let's add some helper functions to move the game objects. Here's the code:\n\nfunction\n\nshiftAliens\n\naliens\n\nforEach\n\nalien\n\n=>\n\nalien\n\nxpos\n\n+=\n\nalien\n\nzpos\n\n0.01\n\nalien\n\nypos\n\n+=\n\nalien\n\nzpos\n\n0.01\n\nfunction\n\nshiftStars\n\nstars\n\nforEach\n\nstar\n\n=>\n\nstar\n\nxpos\n\n+=\n\n0.01\n\nstar\n\nypos\n\n+=\n\n0.01\n\nThese 2 functions take x and y values for the amount we want to \"move\" by, and uses these to move the aliens and the stars. In each case, we loop through the arrays holding the alien or star game objects. We make some adjustments to the values supplied to the functions to account for the perception that, when we move, objects further away appear to move \"less\" than objects close to us. In the case of the stars, we assume they are all in the far distance, so we scale down the amounts to move by a constant factor. In the case of the aliens, some are far away, while others are right up against the spaceship.", "start_char_idx": 6209, "end_char_idx": 10258, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "172d8fb1-e61f-4012-862b-f9a7958d70df": {"__data__": {"id_": "172d8fb1-e61f-4012-862b-f9a7958d70df", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9d81879-2e38-441f-8115-15272d3e418a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "bfe81743d1e3772e55c738ed718a4888bd71d43bc4d76ccb6c5aa25cdf1cde7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "316868c1-e64e-4833-b072-2090296621ac", "node_type": "1", "metadata": {}, "hash": "a4ddf2f97903faed85fd13345ad4daa18fea6d5ba1fb65b6dfffa4df65ce15fb", "class_name": "RelatedNodeInfo"}}, "hash": "c512c8cd709531f7dab9364a7082be50b89b30d15bc49da82c0ea7c412724ebf", "text": "In each case, we loop through the arrays holding the alien or star game objects. We make some adjustments to the values supplied to the functions to account for the perception that, when we move, objects further away appear to move \"less\" than objects close to us. In the case of the stars, we assume they are all in the far distance, so we scale down the amounts to move by a constant factor. In the case of the aliens, some are far away, while others are right up against the spaceship. To account for this variance, we adjust the amount to move an alien by a factor related to its distance from us, or zpos. Aliens close by will appear to move more than those far away.\n\nNow we can add some event handlers for keyboard input:\n\nconst\n\nMOVE_DELTA\n\n2000\n\nonKeyDown\n\n\"left\"\n\n=>\n\nconst\n\ndelta\n\nMOVE_DELTA\n\ndt\n\nshiftAliens\n\ndelta\n\nshiftStars\n\ndelta\n\n0.01\n\ncamRot\n\n5.7\n\nonKeyDown\n\n\"right\"\n\n=>\n\nconst\n\ndelta\n\nMOVE_DELTA\n\ndt\n\nshiftAliens\n\ndelta\n\nshiftStars\n\ndelta\n\n0.01\n\ncamRot\n\n5.7\n\nonKeyDown\n\n\"up\"\n\n=>\n\nconst\n\ndelta\n\nMOVE_DELTA\n\ndt\n\nshiftAliens\n\ndelta\n\nshiftStars\n\ndelta\n\n0.01\n\nonKeyDown\n\n\"down\"\n\n=>\n\nconst\n\ndelta\n\nMOVE_DELTA\n\ndt\n\nshiftAliens\n\ndelta\n\nshiftStars\n\ndelta\n\n0.01\n\nonKeyRelease\n\n\"left\"\n\n=>\n\ncamRot\n\nonKeyRelease\n\n\"right\"\n\n=>\n\ncamRot\n\nonKeyDown and\n\nonKeyRelease to attach event handlers for direction controls to the arrow keys on the keyboard. In each of the\n\ndt() function, and multiply it by a constant\n\ncamRot effect. This effect rotates all objects by the amount we specify, giving the perception of the spaceship banking hard while turning. We add in two additional event handlers on\n\nonKeyRelease for the\n\nGive the game a run, and you should be able to control the spaceship.\n\nAdding weapons\u200b\n\nNow we're flying through the alien bug field, but if an alien makes contact with our spaceship, it will explode and damage us. We need some weapons to shoot the aliens with and protect ourselves. For this, we need to implement some lasers. First, let's add cross hairs to aim with:\n\nconst\n\nvertical_crosshair\n\nadd\n\nrect\n\n10\n\norigin\n\n\"center\"\n\npos\n\nSCREEN_WIDTH\n\n0.5\n\nSCREEN_HEIGHT\n\n0.33\n\ncolor\n\n255\n\n255\n\nlayer\n\n\"ui\"\n\nconst\n\nhorizontal_crosshair\n\nadd\n\nrect\n\n10\n\norigin\n\n\"center\"\n\npos\n\nSCREEN_WIDTH\n\n0.5\n\nSCREEN_HEIGHT\n\n0.33\n\ncolor\n\n255\n\n255\n\nlayer\n\n\"ui\"\n\nThis adds 2 lines at a point halfway across the screen, and about 1/3 down the screen, which is roughly the center of the view out of the spaceship window. Since Kaboom doesn't have a line component, we use rect to draw rectangles with a width of 1 pixel, effectively a line. We add the cross hairs to the UI layer, so they are always on top of the aliens and stars.\n\nNow we have a point to aim at, let's add the lasers. Our player will shoot using the spacebar, and we want a classic laser effect: 2 lasers, one shooting from each side of the ship towards the same point to give the effect of shooting into the distance, towards a vanishing point.\n\nconst\n\nBULLET_SPEED\n\n10\n\nfunction\n\nspawnBullet\n\nconst\n\nBULLET_ORIGIN_LEFT\n\nvec2\n\nSCREEN_WIDTH\n\n0.25\n\nSCREEN_HEIGHT\n\nSCREEN_HEIGHT\n\n0.33\n\nconst\n\nBULLET_ORIGIN_RIGHT\n\nvec2\n\nSCREEN_WIDTH\n\nSCREEN_WIDTH\n\n0.25\n\nSCREEN_HEIGHT\n\nSCREEN_HEIGHT\n\n0.33\n\nconst\n\nBULLET_VANISHING_POINT\n\nvec2\n\nSCREEN_WIDTH\n\n0.5\n\nSCREEN_HEIGHT\n\n0.33\n\nadd\n\nrect\n\npos\n\nBULLET_ORIGIN_LEFT\n\narea\n\ncolor\n\n255\n\n\"bullet\"\n\nbulletSpeed\n\nBULLET_SPEED\n\ntargetPos\n\nBULLET_VANISHING_POINT\n\nadd\n\nrect\n\npos\n\nBULLET_ORIGIN_RIGHT\n\ncolor\n\n255\n\n\"bullet\"\n\nbulletSpeed\n\nBULLET_SPEED\n\ntargetPos\n\nBULLET_VANISHING_POINT\n\nplay\n\n\"shoot\"\n\nvolume\n\n0.2\n\ndetune\n\nrand\n\n1200\n\n1200\n\nWhen the player fires, we call the spawnBullet function to create a new set of laser bullets. First, we calculate the position the bullets will be coming from.", "start_char_idx": 9770, "end_char_idx": 13461, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "316868c1-e64e-4833-b072-2090296621ac": {"__data__": {"id_": "316868c1-e64e-4833-b072-2090296621ac", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "172d8fb1-e61f-4012-862b-f9a7958d70df", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "c512c8cd709531f7dab9364a7082be50b89b30d15bc49da82c0ea7c412724ebf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b68d7bc9-009b-4cc2-830b-8bfe73a63502", "node_type": "1", "metadata": {}, "hash": "d3ad38805db6d72aa2e5ea75b6201309889fae53ed284da15b14011420bf7e8b", "class_name": "RelatedNodeInfo"}}, "hash": "a4ddf2f97903faed85fd13345ad4daa18fea6d5ba1fb65b6dfffa4df65ce15fb", "text": "First, we calculate the position the bullets will be coming from. To make it seem as though they're coming from under the spaceship either side, we calculate our bullets' starting positions a quarter way from each side of the screen and about a third of the way from the bottom using the multipliers 0.25 and 0.33 respectively.\n\nThen we calculate where we want the bullets to end up. This is the same position as the cross hairs.\n\nUsing these values, we create 2 bullet objects - simple 1 pixel objects with the tag bullet and color set to red (255,0,0) so they look menacing. We also add custom properties to the object: A speed for the bullet to move at, and the vanishing point where its course ends.\n\nAs a final detail, we set our \"shoot\" sound to play as each bullet is created, adjusting the volume and applying a randomly generated detune value so that the pitch of the sound is slightly different each time it's played.\n\nWe've got our bullets, their sounds and their trajectories, so let's make them go from their origin point to the vanishing point at the cross hairs by moving them with each frame:\n\nonUpdate\n\n\"bullet\"\n\n=>\n\nconst\n\npos\n\ntargetPos\n\npos\n\ntargetPos\n\nconst\n\ntargetPos\n\ntargetPos\n\nlet\n\nnewX\n\npos\n\nbulletSpeed\n\nlet\n\nnewY\n\nnewX\n\npos\n\nnewX\n\npos\n\nnewY\n\n// Remove the bullet once it has hit the vanishing point y line\n\nif\n\npos\n\nSCREEN_HEIGHT\n\n0.33\n\ndestroy\n\nonKeyDown\n\n\"space\"\n\n=>\n\nspawnBullet\n\nHere we use the onUpdate event handler, filtered to bullet objects.\n\nTo calculate the bullet's next position on its trajectory for each frame, we need to find the values for the slope (m) and y-intercept (in this case, c) of the straight line between the bullet's current position and its end position. Our first 2 lines of the function express those variable parameters as formulas. Let's take a moment to see how we came to those formulas.\n\nWe began with the equation for a straight line:\n\nSince we have the x and y coordinates for the start and end of the trajectory, we can use them to find the values of the unknowns m and c by solving simultaneous equations:\n\ny_start = m*x_start + c         (1)\n\ny_target = m*x_target + c       (2)\n\nre-arranging (2):\n\nc = y_target - m*x_target\n\nSubstitute (2) into (1) for c:\n\ny_start = m*x_start + (y_target - m*x_target)\n\ny_start - y_target  = m*x_start - m*x_target\n\n= m*(x_start - x_target)\n\nso m = (y_start - y_target) / (x_start - x_target)\n\nNow we can solve for c:\n\nc = y_target - m*x_target\n\nNow that we can express m and c as formulas, we use them in our code to calculate the parameters.\n\nWe want the bullets to disappear once they hit the target at the vanishing point, so we go on to check if the bullet has crossed the horizontal cross hairs. If it has, we remove the bullet from the scene using the destroy function.\n\nFinally, we have an event handler for the space key, which calls the spawnBullet function whenever it is pressed.\n\nTry this out now, and you should be able to shoot some laser bullets into space.\n\nChecking for collisions with bullets\u200b\n\nNow that we can shoot bullets, we need to check if they hit an alien bug. If they did, we explode the alien.\n\nconst\n\nBULLET_SLACK\n\n10\n\nonCollide\n\n\"alien\"\n\n\"bullet\"\n\nalien\n\nbullet\n\n=>\n\nif\n\nbullet\n\npos\n\nSCREEN_HEIGHT\n\n0.33\n\nBULLET_SLACK\n\nreturn\n\nmakeExplosion\n\nbullet\n\npos\n\ndestroy\n\nalien\n\ndestroy\n\nbullet\n\nWe make use of the Kaboom event onCollide which is fired when 2 game objects are overlapping or touching each other. We pass in the tags for the aliens and bullets, so we know when they collide.\n\nWe want to limit bullet hits to only be around the target area, so that the 3D perspective is kept. But because they could collide at any point along the path the bullet takes, we check if the collision has taken place at around the cross hairs area. Then, if is in the target zone, we remove both the bullet and the alien from the scene, and call a function to create an explosion effect. This is the same code used in the 2D Space Shooter tutorial.", "start_char_idx": 13396, "end_char_idx": 17367, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b68d7bc9-009b-4cc2-830b-8bfe73a63502": {"__data__": {"id_": "b68d7bc9-009b-4cc2-830b-8bfe73a63502", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "316868c1-e64e-4833-b072-2090296621ac", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "a4ddf2f97903faed85fd13345ad4daa18fea6d5ba1fb65b6dfffa4df65ce15fb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2394383-1a43-483f-a714-88366cc81ce2", "node_type": "1", "metadata": {}, "hash": "5e118a8d5c752d4d71adc82ac04780d332f50a8e9b49513abdd51521469be60d", "class_name": "RelatedNodeInfo"}}, "hash": "d3ad38805db6d72aa2e5ea75b6201309889fae53ed284da15b14011420bf7e8b", "text": "We pass in the tags for the aliens and bullets, so we know when they collide.\n\nWe want to limit bullet hits to only be around the target area, so that the 3D perspective is kept. But because they could collide at any point along the path the bullet takes, we check if the collision has taken place at around the cross hairs area. Then, if is in the target zone, we remove both the bullet and the alien from the scene, and call a function to create an explosion effect. This is the same code used in the 2D Space Shooter tutorial.\n\nfunction\n\nmakeExplosion\n\nrad\n\nsize\n\nfor\n\nlet\n\n++\n\nwait\n\nrand\n\n0.1\n\n=>\n\nfor\n\nlet\n\n++\n\nadd\n\npos\n\nadd\n\nrand\n\nvec2\n\nrad\n\nvec2\n\nrad\n\nrect\n\nscale\n\nsize\n\nsize\n\nlifespan\n\n0.1\n\ngrow\n\nrand\n\n48\n\n72\n\nsize\n\norigin\n\n\"center\"\n\nfunction\n\nlifespan\n\ntime\n\nlet\n\ntimer\n\nreturn\n\nupdate\n\ntimer\n\n+=\n\ndt\n\nif\n\ntimer\n\n>=\n\ntime\n\ndestroy\n\nthis\n\nfunction\n\ngrow\n\nrate\n\nreturn\n\nupdate\n\nconst\n\nrate\n\ndt\n\nthis\n\nscale\n\n+=\n\nthis\n\nscale\n\n+=\n\nWe won't explain this code here, but if you'd like to know how it works, visit the 2D Space Shooter tutorial to learn more.\n\nRun this now, and you should be able to shoot the alien bugs down.\n\nChecking if alien bugs hit the spaceship\u200b\n\nNow we can add functionality to check if an alien bug makes it past our laser and explodes into the spaceship. Since the cockpit covers the entire screen, we can't make use of the onCollide function to check if an alien has hit the cockpit, as it would always be colliding. Instead, we can check the z value of the alien, plus if it is within an area of the spacecraft that would cause damage. We'll use a \"strike zone\" in the center of the cockpit view as the area that aliens can do damage to the craft. Outside that area, we'll assume that the aliens go around or up and over the spacecraft.\n\nTo implement this scheme, add a definition for the strike zone:\n\nconst\n\nSTRIKE_ZONE\n\nx1\n\n80\n\nx2\n\n240\n\ny1\n\n20\n\ny2\n\n100\n\nThen we can modify the onUpdate(\"alien\",....) event handler that we added earlier in \"Moving the Alien Bugs\" section. In the part of the function where we check if the alien is close to us (if (alien.zpos <= 1 )), update the code as follows:\n\nif\n\nalien\n\nzpos\n\n//check if the alien has hit the craft\n\nif\n\nalien\n\npos\n\n>=\n\nSTRIKE_ZONE\n\nx1\n\n&&\n\nalien\n\npos\n\n<=\n\nSTRIKE_ZONE\n\nx2\n\n&&\n\nalien\n\npos\n\n>=\n\nSTRIKE_ZONE\n\ny1\n\n&&\n\nalien\n\npos\n\n<=\n\nSTRIKE_ZONE\n\ny2\n\nshake\n\n20\n\nmakeExplosion\n\nalien\n\npos\n\n10\n\n10\n\n10\n\ndestroyAlien\n\nalien\n\nWe've modified the code to check if the alien is really close to us (alien.zpos < 1 ), and if it is, we check if it is within the bounds of the STRIKE_ZONE area. The strike zone is a rectangle - you could implement more complex shapes if you wanted to be more accurate about where the alien can hit. However, a rectangle approximation is OK for this game.\n\nIf the alien is close enough, and within our strike zone, we use the shake effect to make it \"feel\" like we've been hit. Then we create an explosion at the point of impact for some visual effects.\n\nFinishing up the game\u200b\n\nCongratulations, we've got all the main elements of flying and shooting and damage in the game. The next thing to do would be to add a scoring system, and a way to reduce the spaceship's health or shield when it gets hit. You can look at the tutorial for the 2D version of this game, and copy the scoring and health code from there into this game. You can also copy the code for background music and more sound effects.\n\nHappy coding and have fun!\n\nCredits\u200b\n\nThe game art and sounds used in this tutorial are from the following sources:\n\nLaser : https://freesound.org/people/sunnyflower/sounds/361471/\n\nExplosion: https://freesound.org/people/tommccann/sounds/235968/\n\nAlien Bug: https://opengameart.org/content/8-bit-alien-assets\n\nThe spaceship cockpit was made by Ritza.", "start_char_idx": 16838, "end_char_idx": 20596, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2394383-1a43-483f-a714-88366cc81ce2": {"__data__": {"id_": "e2394383-1a43-483f-a714-88366cc81ce2", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "e0a02db3498d66a13984b0f3c73b31a72f03e48528930c4ab502b5bc63327507", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b68d7bc9-009b-4cc2-830b-8bfe73a63502", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}, "hash": "d3ad38805db6d72aa2e5ea75b6201309889fae53ed284da15b14011420bf7e8b", "class_name": "RelatedNodeInfo"}}, "hash": "5e118a8d5c752d4d71adc82ac04780d332f50a8e9b49513abdd51521469be60d", "text": "Finishing up the game\u200b\n\nCongratulations, we've got all the main elements of flying and shooting and damage in the game. The next thing to do would be to add a scoring system, and a way to reduce the spaceship's health or shield when it gets hit. You can look at the tutorial for the 2D version of this game, and copy the scoring and health code from there into this game. You can also copy the code for background music and more sound effects.\n\nHappy coding and have fun!\n\nCredits\u200b\n\nThe game art and sounds used in this tutorial are from the following sources:\n\nLaser : https://freesound.org/people/sunnyflower/sounds/361471/\n\nExplosion: https://freesound.org/people/tommccann/sounds/235968/\n\nAlien Bug: https://opengameart.org/content/8-bit-alien-assets\n\nThe spaceship cockpit was made by Ritza.\n\nThank you to all the creators for putting their assets up with a Creative Commons license and allowing us to use them.\n\n< Previous: Kaboom.js\n\nNext: Asteroids game with Kaboom.js >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nGame design\n\nCreating a new project\n\nSetting up the Kaboom environment\n\nCreating the interface layers\n\nCreating alien bugs\n\nMoving the alien bugs\n\nAdding a star field\n\nAdding the spaceship cockpit\n\nCreating the spaceship's movement controls\n\nAdding weapons\n\nChecking for collisions with bullets\n\nChecking if alien bugs hit the spaceship\n\nFinishing up the game\n\nCredits", "start_char_idx": 19800, "end_char_idx": 21197, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"557c48a7-cfd0-41d9-a6cb-fe236d4aefa7": {"node_ids": ["425530e9-2c30-48fa-abb8-571aee01112d", "e52e1ded-d8e4-4be4-a485-d991ee2339b6", "b9d81879-2e38-441f-8115-15272d3e418a", "172d8fb1-e61f-4012-862b-f9a7958d70df", "316868c1-e64e-4833-b072-2090296621ac", "b68d7bc9-009b-4cc2-830b-8bfe73a63502", "e2394383-1a43-483f-a714-88366cc81ce2"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-3d-game-with-kaboom.html"}}}, "docstore/metadata": {"425530e9-2c30-48fa-abb8-571aee01112d": {"doc_hash": "4ac03d3bbe9391aeabe724c10e399d10747f7ccbda948e3092d931c42f174d95", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}, "e52e1ded-d8e4-4be4-a485-d991ee2339b6": {"doc_hash": "192b6e89f760e6c3858caad87d08441de89d0e8ef97b71b362bd606b28de54a2", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}, "b9d81879-2e38-441f-8115-15272d3e418a": {"doc_hash": "bfe81743d1e3772e55c738ed718a4888bd71d43bc4d76ccb6c5aa25cdf1cde7d", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}, "172d8fb1-e61f-4012-862b-f9a7958d70df": {"doc_hash": "c512c8cd709531f7dab9364a7082be50b89b30d15bc49da82c0ea7c412724ebf", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}, "316868c1-e64e-4833-b072-2090296621ac": {"doc_hash": "a4ddf2f97903faed85fd13345ad4daa18fea6d5ba1fb65b6dfffa4df65ce15fb", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}, "b68d7bc9-009b-4cc2-830b-8bfe73a63502": {"doc_hash": "d3ad38805db6d72aa2e5ea75b6201309889fae53ed284da15b14011420bf7e8b", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}, "e2394383-1a43-483f-a714-88366cc81ce2": {"doc_hash": "5e118a8d5c752d4d71adc82ac04780d332f50a8e9b49513abdd51521469be60d", "ref_doc_id": "557c48a7-cfd0-41d9-a6cb-fe236d4aefa7"}}}