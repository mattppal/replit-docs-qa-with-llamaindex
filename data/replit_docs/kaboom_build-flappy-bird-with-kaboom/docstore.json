{"docstore/data": {"53ab9d94-e963-47c7-bb2b-1980a8817248": {"__data__": {"id_": "53ab9d94-e963-47c7-bb2b-1980a8817248", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "18311222ed6eacdd25e40f4cbd3719405ebfbbde4be1ed51bd1d1b1b795d47a8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23ff36c9-6e23-4b2f-88c6-4b34668449cb", "node_type": "1", "metadata": {}, "hash": "adead4d253cb516fbb910d0057b2213eeb9aaf5e3e51badb847b0462f36fcd81", "class_name": "RelatedNodeInfo"}}, "hash": "a440973dababbff2a410d5fdbacca41b83bc9521c6f9d28615e620449e894540", "text": "// list of components\n\nsprite\n\n\"birdy\"\n\nscale\n\npos\n\n80\n\n40\n\narea\n\nbody\n\nWe use the same add function we used for adding the background. This time, we grab a reference, const player, to the returned game object. This is so we can use this reference later when checking for collisions, or flapping up when the player taps the space bar.\n\nYou'll also notice that the character we are adding here has many more components than just the sprite component we used for the background. We already know what the sprite component does, here is what the rest are for:\n\nThe scale component makes the sprite larger on screen by drawing it at 2 times the sprite's normal image size. This gives a nice pixelated look, while also making it easier to spot the bird.\n\nThe pos component sets the position on the screen that the character should initially be at. It takes X and Y coordinates to specify a position.\n\nThe area component gives the sprite an invisible bounding box around it, which is used when calculating and detecting collisions between characters. We'll need this so that we can detect if Flappy flies into the pipes.\n\nThe body component makes the character subject to gravity. This means Flappy will fall out of the sky if the player doesn't do anything.\n\nPress command + s (Mac) or control + s (Windows/Linux) to update the game output window. You should see Flappy added and fall out of the sky very quickly:\n\nMaking Flappy fly\u200b\n\nOur next task is to save Flappy from plummeting to their death by giving control to the player to flap Flappy's wings. We'll use the spacebar for this. Kaboom has an onKeyPress function, which fires a callback with custom code when the specified key is pressed. Add this code to the game scene to make Flappy fly when the space key is pressed:\n\nonKeyPress\n\n\"space\"\n\n=>\n\nplay\n\n\"wooosh\"\n\nplayer\n\njump\n\n400\n\nIn the callback handler, we first play a sound of flapping wings to give the player feedback and add some interest to the game. Then we use the jump method, which is added to our player character through the body component we added earlier. The jump function makes a character accelerate up sharply. We can adjust just how sharp and high the jump should be through the number we pass as an argument to the jump method \u2013 the larger the number, the higher the jump. Although Flappy is technically not jumping (you normally need to be on a solid surface to jump), it still has the effect we need.\n\nUpdate the game output window, and if you press the spacebar now, you'll be able to keep Flappy in the air! Remember to quickly click in the output window as the game starts, so that it gains focus and can detect player input such as pressing the space key.\n\nAdding in the pipes\u200b\n\nNow we can get to the main part of the game \u2013 adding in the moving pipes that Flappy needs to fly through.\n\nHere is a diagram of the layout of the pipes in the game.\n\nWe want to move the pipe gap, and therefore the pipes, up and down for each new pipe pair that is created. This is so we don't have the gap at the center point of the screen constantly \u2013 we want it to be slightly different for each pipe pair that comes along. We do want to keep the gap size consistent though.\n\nLet's start by having the pipe gap in the center of the screen. We'll give the pipe gap a size PIPE_GAP. Then to place the pipes, the bottom of the upper pipe should be PIPE_GAP/2 pixels above the center point of the window, which is height()/2. Likewise, the top of the lower pipe should be PIPE_GAP/2 pixels below the center point of the window, again which is height()/2.\n\nThis way, we place the pipe so that the pipe gap is in the center of the window. Now we want to randomly move this up or down for each new pair of pipes that comes along. One way to do this is to create a random offset, which we can add to the midpoint to effectively move the midpoint of the window up or down. We can use the Kaboom rand function to do this. The rand function has two parameters to specify the range in which the random number should be.\n\nLet's put that all together. The Y-position of the lower pipe can be calculated as:\n\nheight()/2 + offset + PIPE_GAP/2\n\nRemember, the top of the window is y=0, and the bottom is y=height(). In other words, the lower down on the screen a position is, the higher its y coordinate will be.", "start_char_idx": 0, "end_char_idx": 4307, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23ff36c9-6e23-4b2f-88c6-4b34668449cb": {"__data__": {"id_": "23ff36c9-6e23-4b2f-88c6-4b34668449cb", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "18311222ed6eacdd25e40f4cbd3719405ebfbbde4be1ed51bd1d1b1b795d47a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "53ab9d94-e963-47c7-bb2b-1980a8817248", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "a440973dababbff2a410d5fdbacca41b83bc9521c6f9d28615e620449e894540", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1ce7bb97-c0bb-4aa8-97b8-b93472dfa92b", "node_type": "1", "metadata": {}, "hash": "b1f7ca93c899d41988fdc814966db1c9613e8fef8039054bf2de34aed1fae73b", "class_name": "RelatedNodeInfo"}}, "hash": "adead4d253cb516fbb910d0057b2213eeb9aaf5e3e51badb847b0462f36fcd81", "text": "This way, we place the pipe so that the pipe gap is in the center of the window. Now we want to randomly move this up or down for each new pair of pipes that comes along. One way to do this is to create a random offset, which we can add to the midpoint to effectively move the midpoint of the window up or down. We can use the Kaboom rand function to do this. The rand function has two parameters to specify the range in which the random number should be.\n\nLet's put that all together. The Y-position of the lower pipe can be calculated as:\n\nheight()/2 + offset + PIPE_GAP/2\n\nRemember, the top of the window is y=0, and the bottom is y=height(). In other words, the lower down on the screen a position is, the higher its y coordinate will be.\n\nFor the upper pipe, we can calculate the point where the bottom of the pipe should be like this:\n\nheight()/2 + offset - PIPE_GAP/2\n\nKaboom has an origin component that sets the point a character uses as its origin. This is topleft by default, which works well for our lower pipe, as our calculations above are calculating for that point. However, for the upper pipe, our calculations are for the bottom of the pipe. Therefore, we can use the origin component to specify that.\n\nSince we want the pipes to come from the right of the screen toward the left, where Flappy is, we'll set their X-position to be the width() of the screen.\n\nTo identify and query the pipes later, we add the text tag \"pipe\" to them.\n\nFinally, since we need to create many pipes during the game, let's wrap all the pipe code in a function that we will be able to call at regular intervals to make the pipes.\n\nHere is the code from all those considerations and calculations. Insert this code to the game scene:\n\nconst\n\nPIPE_GAP\n\n120\n\nfunction\n\nproducePipes\n\nconst\n\noffset\n\nrand\n\n50\n\n50\n\nadd\n\nsprite\n\n\"pipe\"\n\npos\n\nwidth\n\nheight\n\noffset\n\nPIPE_GAP\n\n\"pipe\"\n\narea\n\nadd\n\nsprite\n\n\"pipe\"\n\nflipY\n\ntrue\n\npos\n\nwidth\n\nheight\n\noffset\n\nPIPE_GAP\n\norigin\n\n\"botleft\"\n\n\"pipe\"\n\narea\n\nNow we need to do a few more things to make the pipes appear and move.\n\nTo move the pipes across the screen, we can use the onUpdate function to update all pipes' positions with each frame. Note that we only need to adjust the x position of the pipe. Add this code to the game scene part of your code:\n\nonUpdate\n\n\"pipe\"\n\npipe\n\n=>\n\npipe\n\nmove\n\n160\n\nNext we'll generate pipes at a steady rate. We can use the loop function for this. Add the following to the game scene part of the code:\n\nloop\n\n1.5\n\n=>\n\nproducePipes\n\nThis calls our producePipes() function every 1.5 seconds. You can adjust this rate, or make it variable to increase the rate as the game progresses.\n\nUpdate the game output window now and you should see the pipes being generated and moving across the screen. You can also fly Flappy, although crashing into the pipes does nothing for now.\n\nFlappy is flapping and the pipes are piling on. The next task is to detect when Flappy flies past a pipe, increasing the player's score.\n\nAdding in scoring\u200b\n\nWhen Flappy flies past a pipe, the player's score is incremented. To do this, we'll need to keep track of which pipes have gone past Flappy. Let's modify the pipe-generating function producePipes to add a custom property called passed to the pipes. It should look like this now:\n\nfunction\n\nproducePipes\n\nconst\n\noffset\n\nrand\n\n50\n\n50\n\nadd\n\nsprite\n\n\"pipe\"\n\npos\n\nwidth\n\nheight\n\noffset\n\nPIPE_GAP\n\n\"pipe\"\n\narea\n\npassed\n\nfalse\n\nadd\n\nsprite\n\n\"pipe\"\n\nflipY\n\ntrue\n\npos\n\nwidth\n\nheight\n\noffset\n\nPIPE_GAP\n\norigin\n\n\"botleft\"\n\n\"pipe\"\n\narea\n\nNext, we'll add in a variable to track the score, and a text element to display it on screen. Add this code to the game scene:\n\nlet\n\nscore\n\nconst\n\nscoreText\n\nadd\n\ntext\n\nscore\n\nsize\n\n50\n\nNow we can modify the onUpdate() event handler we created earlier for moving the pipes. We'll check if any pipes have moved past Flappy, and update their passed flag, so we don't count them more than once.", "start_char_idx": 3565, "end_char_idx": 7477, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1ce7bb97-c0bb-4aa8-97b8-b93472dfa92b": {"__data__": {"id_": "1ce7bb97-c0bb-4aa8-97b8-b93472dfa92b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "18311222ed6eacdd25e40f4cbd3719405ebfbbde4be1ed51bd1d1b1b795d47a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23ff36c9-6e23-4b2f-88c6-4b34668449cb", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "adead4d253cb516fbb910d0057b2213eeb9aaf5e3e51badb847b0462f36fcd81", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "36a9adf8-3397-4902-afe0-6a7343e5832c", "node_type": "1", "metadata": {}, "hash": "7ee0e3c2c42803137487645a7ddebebc8b5c27db16aa5f6506470c72bb51089f", "class_name": "RelatedNodeInfo"}}, "hash": "b1f7ca93c899d41988fdc814966db1c9613e8fef8039054bf2de34aed1fae73b", "text": "It should look like this now:\n\nfunction\n\nproducePipes\n\nconst\n\noffset\n\nrand\n\n50\n\n50\n\nadd\n\nsprite\n\n\"pipe\"\n\npos\n\nwidth\n\nheight\n\noffset\n\nPIPE_GAP\n\n\"pipe\"\n\narea\n\npassed\n\nfalse\n\nadd\n\nsprite\n\n\"pipe\"\n\nflipY\n\ntrue\n\npos\n\nwidth\n\nheight\n\noffset\n\nPIPE_GAP\n\norigin\n\n\"botleft\"\n\n\"pipe\"\n\narea\n\nNext, we'll add in a variable to track the score, and a text element to display it on screen. Add this code to the game scene:\n\nlet\n\nscore\n\nconst\n\nscoreText\n\nadd\n\ntext\n\nscore\n\nsize\n\n50\n\nNow we can modify the onUpdate() event handler we created earlier for moving the pipes. We'll check if any pipes have moved past Flappy, and update their passed flag, so we don't count them more than once. We'll only add the passed flag to one of the pipes, and detect it, so as not to add a point for both the upper and lower pipe. Update the onUpdate handler as follows:\n\nonUpdate\n\n\"pipe\"\n\npipe\n\n=>\n\npipe\n\nmove\n\n160\n\nif\n\npipe\n\npassed\n\n===\n\nfalse\n\n&&\n\npipe\n\npos\n\nplayer\n\npos\n\npipe\n\npassed\n\ntrue\n\nscore\n\n+=\n\nscoreText\n\ntext\n\nscore\n\nThis checks any pipe that we haven't marked as passed (passed === false) to see if it has passed Flappy (pipe.pos.x < player.pos.x). If the pipe has gone past, we add 1 to the score and update the score text onscreen.\n\nIf you update the game output window now, you should see the score increase as you fly past each pipe.\n\nCollision detection\u200b\n\nNow that we have scoring, the last thing to do is collision detection \u2013 that is, checking if Flappy has splatted into a pipe. Kaboom has a collides method that is added with the area collider component. We can use that to call a function when the player collides with any character with the \"pipe\" tag. Add this code to the game scene:\n\nplayer\n\ncollides\n\n\"pipe\"\n\n=>\n\ngo\n\n\"gameover\"\n\nscore\n\nIn the collision handler, we use the go function to switch to the gameover scene. We don't have anything in that scene yet, so let's update that to show a game over message and the score. We can also keep track of the high score to compare the player's latest score to. Update the gameover scene as follows:\n\nlet\n\nhighScore\n\nscene\n\n\"gameover\"\n\nscore\n\n=>\n\nif\n\nscore\n\nhighScore\n\nhighScore\n\nscore\n\nadd\n\ntext\n\n\"gameover!\\n\"\n\n\"score: \"\n\nscore\n\n\"\\nhigh score: \"\n\nhighScore\n\nsize\n\n45\n\nonKeyPress\n\n\"space\"\n\n=>\n\ngo\n\n\"game\"\n\nFirst, we create a highScore variable where we can track the top score across multiple game plays. Then, in our gameover scene, we check if the latest score passed in is bigger than the highScore we have recorded. If it is, the highScore is updated to the latest score.\n\nTo show a \"game over\" message, and the player's score along with the high score, we use the add function to add a text component to a new game object or character. We also make the font size large-ish for this message.\n\nLet's include a quick way for the player to play again and try to beat their score. We use the onKeyPress to listen for the player pressing the space bar. In our key-press handler, we go back to the main game scene, to start the game all over again.\n\nWe also need to end the game if Flappy flies too high out of the screen, or plummets down off the screen. We can do this by adding a handler for the player's onUpdate event, which is called each frame. Here we can check if Flappy's position is beyond the bounds of the game window. Add this code to the game scene:\n\nplayer\n\nonUpdate\n\n=>\n\nif\n\nplayer\n\npos\n\nheight\n\n30\n\n||\n\nplayer\n\npos\n\n30\n\ngo\n\n\"gameover\"\n\nscore\n\nThis gives a margin of 30 pixels above or below the window, to take account of Flappy's size. If Flappy is out of these bounds, we go to the gameover scene to end the game.\n\nUpdate the game output window again and test it out.", "start_char_idx": 6809, "end_char_idx": 10433, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36a9adf8-3397-4902-afe0-6a7343e5832c": {"__data__": {"id_": "36a9adf8-3397-4902-afe0-6a7343e5832c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "18311222ed6eacdd25e40f4cbd3719405ebfbbde4be1ed51bd1d1b1b795d47a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1ce7bb97-c0bb-4aa8-97b8-b93472dfa92b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}, "hash": "b1f7ca93c899d41988fdc814966db1c9613e8fef8039054bf2de34aed1fae73b", "class_name": "RelatedNodeInfo"}}, "hash": "7ee0e3c2c42803137487645a7ddebebc8b5c27db16aa5f6506470c72bb51089f", "text": "In our key-press handler, we go back to the main game scene, to start the game all over again.\n\nWe also need to end the game if Flappy flies too high out of the screen, or plummets down off the screen. We can do this by adding a handler for the player's onUpdate event, which is called each frame. Here we can check if Flappy's position is beyond the bounds of the game window. Add this code to the game scene:\n\nplayer\n\nonUpdate\n\n=>\n\nif\n\nplayer\n\npos\n\nheight\n\n30\n\n||\n\nplayer\n\npos\n\n30\n\ngo\n\n\"gameover\"\n\nscore\n\nThis gives a margin of 30 pixels above or below the window, to take account of Flappy's size. If Flappy is out of these bounds, we go to the gameover scene to end the game.\n\nUpdate the game output window again and test it out. If you fly into a pipe now, or flap too high, or fall out of the sky, you should be taken to the game over screen:\n\nNext steps\u200b\n\nHere are some ideas you can try to improve your clone of the Flappy Bird game:\n\nMake the game play faster as the player gets a higher score. You can do this by updating the speed that the pipes move by making the speed parameter passed to the pipe.move method a variable, which increases as the player score increases.\n\nAdd some different types of obstacles, other than the pipes, for Flappy to try to avoid.\n\nUse the Kaboom sprite editor to create your own graphics for your Flappy world!\n\nAdd in some more sound effects and play some game music using the play function.\n\nYou can find the code for this tutorial here:\n\n< Previous: Breakout with Kaboom.js\n\nNext: Mario with Kaboom.js >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nCreating a new project in Replit\n\nInitializing Kaboom\n\nAdding scenes\n\nBuilding the game world\n\nMaking Flappy fly\n\nAdding in the pipes\n\nAdding in scoring\n\nCollision detection\n\nNext steps", "start_char_idx": 9700, "end_char_idx": 11484, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"47dcd90c-be57-4d08-8e18-8cbdcf1104d6": {"node_ids": ["53ab9d94-e963-47c7-bb2b-1980a8817248", "23ff36c9-6e23-4b2f-88c6-4b34668449cb", "1ce7bb97-c0bb-4aa8-97b8-b93472dfa92b", "36a9adf8-3397-4902-afe0-6a7343e5832c"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-flappy-bird-with-kaboom.html"}}}, "docstore/metadata": {"53ab9d94-e963-47c7-bb2b-1980a8817248": {"doc_hash": "a440973dababbff2a410d5fdbacca41b83bc9521c6f9d28615e620449e894540", "ref_doc_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6"}, "23ff36c9-6e23-4b2f-88c6-4b34668449cb": {"doc_hash": "adead4d253cb516fbb910d0057b2213eeb9aaf5e3e51badb847b0462f36fcd81", "ref_doc_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6"}, "1ce7bb97-c0bb-4aa8-97b8-b93472dfa92b": {"doc_hash": "b1f7ca93c899d41988fdc814966db1c9613e8fef8039054bf2de34aed1fae73b", "ref_doc_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6"}, "36a9adf8-3397-4902-afe0-6a7343e5832c": {"doc_hash": "7ee0e3c2c42803137487645a7ddebebc8b5c27db16aa5f6506470c72bb51089f", "ref_doc_id": "47dcd90c-be57-4d08-8e18-8cbdcf1104d6"}}}