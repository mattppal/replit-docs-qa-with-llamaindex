{"docstore/data": {"b6520c94-acbf-445d-b653-f3adef2ac4c0": {"__data__": {"id_": "b6520c94-acbf-445d-b653-f3adef2ac4c0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c668ca78-14a6-461f-9248-4e9dc36b9080", "node_type": "1", "metadata": {}, "hash": "9267bed5284395f57a1a413adad696d0ea3938675e9b476fec6d243e6681a429", "class_name": "RelatedNodeInfo"}}, "hash": "e026c278d9e03455864b17b020777b42e87edacef0ffc48ab7ff22d85de25f7d", "text": "scene\n\n\"main\"\n\n=>\n\nlayers\n\n\"bg\"\n\n\"obj\"\n\n\"ui\"\n\n\"obj\"\n\nadd\n\nsprite\n\n\"stars\"\n\nlayer\n\n\"bg\"\n\n// todo.. add main scene code here\n\ngo\n\n\"main\"\n\nWe define the scene using the scene function. This function takes a string as the scene name \u2013 we're calling the scene \"main\".\nThen we create 3 layers: \"background\" (bg), \"object\" (obj) and \"user interface\" (ui). The obj layer is set as the default layer. We then add the stars sprite to the background layer.\n\nFinally, we use the go function to go to the main scene when the game starts up.\n\nNote The code snippets in the sections that follow have to be added within the body of the main scene unless specified otherwise.\n\nCreating the Game Map\u200b\n\nLet's get a scene layout, or map, drawn on the screen. This will define the ground and platforms in the game.\n\nKaboom has built-in support for defining game maps using text and the function addLevel. This takes away a lot of the hassle normally involved in loading and rendering maps.\n\nThe code below creates the game map. Add it to the main.js file, within the main scene (below the code to add the stars sprite to the background layer).\n\n// Game Parameters\n\nconst\n\nMAP_WIDTH\n\n440\n\nconst\n\nMAP_HEIGHT\n\n275\n\nconst\n\nBLOCK_SIZE\n\n11\n\nconst\n\nmap\n\naddLevel\n\n\"--------------------------------------------\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                pppppp    -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-   pppppp                                 -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                 pppppp                   -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"-                                          -\"\n\n\"============================================\"\n\n\"                                            \"\n\nwidth\n\nBLOCK_SIZE\n\nheight\n\nBLOCK_SIZE\n\npos\n\nvec2\n\n\"=\"\n\n=>\n\nrect\n\nBLOCK_SIZE\n\nBLOCK_SIZE\n\ncolor\n\n150\n\n75\n\n\"ground\"\n\narea\n\nsolid\n\n=>\n\nrect\n\nBLOCK_SIZE\n\nBLOCK_SIZE\n\ncolor\n\n255\n\n\"platform\"\n\narea\n\nsolid\n\n\"-\"\n\n=>\n\nrect\n\nBLOCK_SIZE\n\n10\n\nBLOCK_SIZE\n\ncolor\n\n\"boundary\"\n\narea\n\nsolid\n\nFirst, we add some game parameters, which we'll use when we define the size of the map, and the default block size for map elements.\n\nNext, we create the game map. The map, or level design, is expressed in an array of strings. Each row in the array represents one row on the screen, so we can design visually in text what the map should look like. The width and height parameters specify the size of each of the elements in the map. The pos parameter specifies where on the screen the map should be placed \u2013 we chose 0,0, which is the top left of the screen, as the starting point for the map.\n\nKaboom allows us to specify what to draw for each symbol in the text map. You can make maps out of different elements, e.g. a symbol for a wall, a symbol for ground, a symbol for a hump, and so on. To tell Kaboom what to draw for the symbol, we add the symbol as a key, for example =, and then specify parameters for it.\n\nIf we run the code, we should see the game map, like this:\n\nAdding the Spaceship\u200b\n\nLet's add the spaceship using the add function:\n\nconst\n\nplayer\n\nadd\n\nsprite\n\n\"spaceship\"\n\npos\n\n100\n\n200\n\nbody\n\narea\n\nscale\n\nrotate\n\norigin\n\n\"center\"\n\n\"player\"\n\nscore\n\nshield\n\n100\n\nThe add function constructs a game object using different components, e.g. pos, body, scale, etc. Each of these components gives the object different features.\n\nNotably, the body component makes the object react to gravity: the spaceship falls if it's not on the ground or a platform. The rotate component allows us to tilt the spaceship in the direction the player wants to go, providing good visual feedback. By default, all operations are calculated around the top left corner of game objects. To make the tilt work correctly, we add the origin component and set it to center, so that the tilt adjusts the angle from the center of the object.\n\nKaboom also allows us to attach custom data to a game object. We've added score to hold the player's latest score, and shield to hold the percentage of the ship's protection shield still available.", "start_char_idx": 0, "end_char_idx": 4782, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c668ca78-14a6-461f-9248-4e9dc36b9080": {"__data__": {"id_": "c668ca78-14a6-461f-9248-4e9dc36b9080", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6520c94-acbf-445d-b653-f3adef2ac4c0", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "e026c278d9e03455864b17b020777b42e87edacef0ffc48ab7ff22d85de25f7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a0fa3b60-e63c-409d-aca2-bcca15677870", "node_type": "1", "metadata": {}, "hash": "901121e9b90affde2aaa99d588aa8a7a6318f7a4d990dff2c22c9009ac298e8e", "class_name": "RelatedNodeInfo"}}, "hash": "9267bed5284395f57a1a413adad696d0ea3938675e9b476fec6d243e6681a429", "text": "pos, body, scale, etc. Each of these components gives the object different features.\n\nNotably, the body component makes the object react to gravity: the spaceship falls if it's not on the ground or a platform. The rotate component allows us to tilt the spaceship in the direction the player wants to go, providing good visual feedback. By default, all operations are calculated around the top left corner of game objects. To make the tilt work correctly, we add the origin component and set it to center, so that the tilt adjusts the angle from the center of the object.\n\nKaboom also allows us to attach custom data to a game object. We've added score to hold the player's latest score, and shield to hold the percentage of the ship's protection shield still available. We can adjust these as the player picks up items or crashes into aliens.\n\nWhen we created the map earlier, we added the solid component to map objects. This component marks objects as solid, meaning other objects can't move past them.\n\nMoving the Spaceship\u200b\n\nWe'll allow a few different moves for the spaceship: change direction left or right and fly up. We also need to keep track of which way the spaceship is facing, so that we'll know which side to shoot lasers from later.\n\nTo handle the changing and tracking of direction, add the following code:\n\nconst\n\ndirections\n\nLEFT\n\n\"left\"\n\nRIGHT\n\n\"right\"\n\nlet\n\ncurrent_direction\n\ndirections\n\nRIGHT\n\nonKeyDown\n\n\"left\"\n\n=>\n\nplayer\n\nflipX\n\nplayer\n\nangle\n\n11\n\ncurrent_direction\n\ndirections\n\nLEFT\n\nplayer\n\nmove\n\n100\n\nonKeyDown\n\n\"right\"\n\n=>\n\nplayer\n\nflipX\n\nplayer\n\nangle\n\n11\n\ncurrent_direction\n\ndirections\n\nRIGHT\n\nplayer\n\nmove\n\n100\n\nonKeyRelease\n\n\"left\"\n\n=>\n\nplayer\n\nangle\n\nonKeyRelease\n\n\"right\"\n\n=>\n\nplayer\n\nangle\n\nFirst, we create a constant object defining the directions our game allows. Then we create a variable to track the current_direction the spaceship is facing.\n\nThen we add the key-handling code. The key names left and right refer to the left and right arrow keys on the keyboard. Kaboom provides the onKeyDown event, which lets us know if a certain key is being pressed. We create onKeyDown event handlers for each of the arrow keys. As long as the given key is held down, onKeyDown calls the event handler repeatedly.\n\nThe code inside each onKeyDown event does the following:\n\nThe flipX function mirrors the player's spaceship image so that it looks different depending on the direction it is facing. We use -1 to flip it to appear facing the left, 1 the right.\n\nThe function player.angle slightly tilts the spaceship while the key is being held down. This is so the spaceship looks like it is about to move in the given direction.\n\nThe current_direction tracking variable is updated. We'll use this variable when we add shooting.\n\nThe move function moves the spaceship in the given direction.\n\nWe also have onKeyRelease event handlers for the left and right keys. These reset the spaceship's tilt angle to 0 (i.e. straight up) when the ship is no longer moving in that direction.\n\nNow we want to have the spaceship fly up when we press the up arrow key. To do this, we'll take advantage of Kaboom's jump attribute (which is part of the body component) and repurpose it for flying up. Add the following code to the main scene:\n\nonKeyDown\n\n\"up\"\n\n=>\n\nplayer\n\njump\n\n100\n\nAdding Laser Guns\u200b\n\nBecause the game takes place in outer space, the weapon of choice is a laser gun. We'll need to add functions to create the bullet when the player fires, and to control the direction of the bullets. We'll also need to add another key handler to check when the player presses a key to \"fire\", which is the space key in this game.", "start_char_idx": 4013, "end_char_idx": 7656, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a0fa3b60-e63c-409d-aca2-bcca15677870": {"__data__": {"id_": "a0fa3b60-e63c-409d-aca2-bcca15677870", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c668ca78-14a6-461f-9248-4e9dc36b9080", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "9267bed5284395f57a1a413adad696d0ea3938675e9b476fec6d243e6681a429", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3e37e66-2112-45b2-b3cc-f76b21878144", "node_type": "1", "metadata": {}, "hash": "d85cfa0914fc5978d52ffd691ade0ce90fc891a9f90fd48673ca1db9ae22d4f8", "class_name": "RelatedNodeInfo"}}, "hash": "901121e9b90affde2aaa99d588aa8a7a6318f7a4d990dff2c22c9009ac298e8e", "text": "We also have onKeyRelease event handlers for the left and right keys. These reset the spaceship's tilt angle to 0 (i.e. straight up) when the ship is no longer moving in that direction.\n\nNow we want to have the spaceship fly up when we press the up arrow key. To do this, we'll take advantage of Kaboom's jump attribute (which is part of the body component) and repurpose it for flying up. Add the following code to the main scene:\n\nonKeyDown\n\n\"up\"\n\n=>\n\nplayer\n\njump\n\n100\n\nAdding Laser Guns\u200b\n\nBecause the game takes place in outer space, the weapon of choice is a laser gun. We'll need to add functions to create the bullet when the player fires, and to control the direction of the bullets. We'll also need to add another key handler to check when the player presses a key to \"fire\", which is the space key in this game.\n\nconst\n\nBULLET_SPEED\n\n400\n\nonKeyPress\n\n\"space\"\n\n=>\n\nspawnBullet\n\nplayer\n\npos\n\nfunction\n\nspawnBullet\n\nbulletpos\n\nif\n\ncurrent_direction\n\n==\n\ndirections\n\nLEFT\n\nbulletpos\n\nbulletpos\n\nsub\n\n10\n\nelse\n\nif\n\ncurrent_direction\n\n==\n\ndirections\n\nRIGHT\n\nbulletpos\n\nbulletpos\n\nadd\n\n10\n\nadd\n\nrect\n\npos\n\nbulletpos\n\norigin\n\n\"center\"\n\ncolor\n\n255\n\n255\n\n255\n\narea\n\n\"bullet\"\n\nbulletSpeed\n\ncurrent_direction\n\n==\n\ndirections\n\nLEFT\n\nBULLET_SPEED\n\nBULLET_SPEED\n\nplay\n\n\"shoot\"\n\nvolume\n\n0.2\n\ndetune\n\nrand\n\n1200\n\n1200\n\nFirst, we add a constant BULLET_SPEED to define the speed at which the laser \"bullets\" fly across the screen. Then we use the onKeyPress event to trigger the shooting. Notice onKeyPress only calls the event handler once as the key is pressed, unlike the onKeyDown event we used for moving. This is because it's more fun if the player needs to bash the \"fire\" button as fast as possible to take down an enemy, rather than just having automatic weapons.\n\nThe onKeyPress handler calls the spawnBullet function with the player's current position. This function handles creating a new laser shot in the correct direction. The first few lines of the method adjust the bullet's starting position a little to the left or right of the spaceship's position. This is because the position of the spaceship that gets passed to the function is the center of the spaceship (remember the origin component we added to it earlier). We adjust it a little so that the bullet looks like it is coming from the edge of the spaceship.\n\nThen we add a new bullet object to the game using the add function. We don't use a sprite for the bullet, but draw a rect, or rectangle, with our given color. We tag it bullet so we can refer to it later when detecting if it hit something. We also give it a custom property, bulletSpeed, which is the distance and direction we want the bullet to move on each frame.\n\nFinally, we add sound effects when the player shoots. The play function plays our \"shoot.wav\" file. We adjust the volume down a bit, so it fits in better with the overall sound mix. We use the detune parameter along with a random number generator, rand, to change the pitch of the sound each time it's played. This is so the sound doesn't become too repetitive and also because it sounds weird and \"spacey\".\n\nNow that we've set up the bullet, we need to make it move on each frame. To do this we can use the onUpdate event, using the bullet tag to identify the objects we want to update:\n\nonUpdate\n\n\"bullet\"\n\n=>\n\nmove\n\nbulletSpeed\n\nif\n\npos\n\n||\n\npos\n\nMAP_WIDTH\n\ndestroy\n\nWith each frame, the action event updates the objects with the matching tag, in this case bullet. We call move on the bullet, using the custom value for bulletSpeed that we assigned to it on creation. We also check to see if the bullet has gone off the screen, and if it has, we destroy it.\n\nWe also need to destroy the bullet if it hits a platform. We can do this using the Kaboom onCollide event. Add the following code:\n\nonCollide\n\n\"bullet\"\n\n\"platform\"\n\nbullet\n\nplatform\n\n=>\n\ndestroy\n\nbullet\n\nRun the code now, and you should be able to shoot.\n\nAdding Alien Space Bugs\u200b\n\nNow that we have a spacecraft, and it can shoot, we need something to shoot at. Let's add some hostile exploding alien space bugs.", "start_char_idx": 6835, "end_char_idx": 10900, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3e37e66-2112-45b2-b3cc-f76b21878144": {"__data__": {"id_": "b3e37e66-2112-45b2-b3cc-f76b21878144", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a0fa3b60-e63c-409d-aca2-bcca15677870", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "901121e9b90affde2aaa99d588aa8a7a6318f7a4d990dff2c22c9009ac298e8e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e0c3b198-3307-4c83-9e52-fdfc8582cef0", "node_type": "1", "metadata": {}, "hash": "9ce3507a1c240e14aa62c0874fee306b79a56eb7b9d0900be64e510a72130a96", "class_name": "RelatedNodeInfo"}}, "hash": "d85cfa0914fc5978d52ffd691ade0ce90fc891a9f90fd48673ca1db9ae22d4f8", "text": "We call move on the bullet, using the custom value for bulletSpeed that we assigned to it on creation. We also check to see if the bullet has gone off the screen, and if it has, we destroy it.\n\nWe also need to destroy the bullet if it hits a platform. We can do this using the Kaboom onCollide event. Add the following code:\n\nonCollide\n\n\"bullet\"\n\n\"platform\"\n\nbullet\n\nplatform\n\n=>\n\ndestroy\n\nbullet\n\nRun the code now, and you should be able to shoot.\n\nAdding Alien Space Bugs\u200b\n\nNow that we have a spacecraft, and it can shoot, we need something to shoot at. Let's add some hostile exploding alien space bugs. We'll want to have them coming in a relatively constant stream to keep the game challenging. We also want them coming in from different sides and angles to keep the player on their toes. We'll add a new function to control the creation of alien space bugs:\n\nconst\n\nALIEN__BASE_SPEED\n\n100\n\nconst\n\nALIEN_SPEED_INC\n\n20\n\nfunction\n\nspawnAlien\n\nlet\n\nalienDirection\n\nchoose\n\ndirections\n\nLEFT\n\ndirections\n\nRIGHT\n\nlet\n\nxpos\n\nalienDirection\n\n==\n\ndirections\n\nLEFT\n\nMAP_WIDTH\n\nconst\n\npoints_speed_up\n\nMath\n\nfloor\n\nplayer\n\nscore\n\n1000\n\nconst\n\nalien_speed\n\nALIEN__BASE_SPEED\n\npoints_speed_up\n\nALIEN_SPEED_INC\n\nconst\n\nnew_alien_interval\n\n0.8\n\npoints_speed_up\n\n20\n\nadd\n\nsprite\n\n\"alien\"\n\npos\n\nxpos\n\nrand\n\nMAP_HEIGHT\n\n20\n\narea\n\n\"alien\"\n\nspeedX\n\nrand\n\nalien_speed\n\n0.5\n\nalien_speed\n\n1.5\n\nalienDirection\n\n==\n\ndirections\n\nLEFT\n\nspeedY\n\nrand\n\nalien_speed\n\n0.1\n\nalien_speed\n\n0.5\n\nchoose\n\nwait\n\nnew_alien_interval\n\nspawnAlien\n\nspawnAlien\n\nWe create 2 parameters for the alien's speed: a base rate and an incremental rate. Each time the player gains another 1000 points, we'll add to the incremental rate.\n\nTip: You can put these parameters and all the others we have defined at the top of the file, so that they are easy to find and adjust if you want to tweak the game parameters later.\n\nThen we define the spawnAlien function. To randomly choose the side of the screen the alien will fly in from, we use the Kaboom choose function, which picks an element at random from an array. From the chosen direction, we can determine the alien's starting position on the x axis (horizontal plane).\n\nThen we go into the calculation to figure out the speed that the alien should move at. First, we check if we need to increase the alien's speed based on the player's score. We divide the player's score by 1000 (since the aliens' speed increases with every 1000 points the player earns). We get rid of decimals by using the Math.floor function, which is built into JavaScript. The result is our points_speed_up value.\n\nNext we take the ALIEN_BASE_SPEED and add the incremental rate multiplied by our points_speed_up value.\n\nWe also calculate a new rate at which aliens are spawned, making the aliens not only faster at moving, but also faster at respawning.\n\nNow that we've calculated our basic parameters, we create a new alien using the add function again:\n\nsprite('alien') creates the alien with the image alien.\n\npos(xpos, rand(0, MAP_HEIGHT-20)) sets the starting position of the alien. We calculated the x pos from the randomly chosen direction. We also add a random y (vertical) position for the alien, between the top (position 0) of the map, and the bottom (MAP_HEIGHT) of the map (screen co-ordinates start from the top left of the screen). We remove 20 pixels from the bottom bounds, to account for the ground.\n\nWe add the \"alien\" tag to the object, so we can identify and call it in other parts of the code.\n\nWe also add a custom object with the speed of this particular alien, broken into it's speed along the x and y axis. For the speed along the x-axis speedX, we add a random component so that not all aliens move at exactly the same speed. Then we multiply the speed by -1 or 1 depending on whether the alien is meant to be moving left or right across the screen.\n\nFinally, we use Kaboom's wait function to wait a short amount of time before calling spawnAlien again to create a new alien. We also have a call to spawnAlien to get it started when the game starts.", "start_char_idx": 10294, "end_char_idx": 14347, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e0c3b198-3307-4c83-9e52-fdfc8582cef0": {"__data__": {"id_": "e0c3b198-3307-4c83-9e52-fdfc8582cef0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b3e37e66-2112-45b2-b3cc-f76b21878144", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "d85cfa0914fc5978d52ffd691ade0ce90fc891a9f90fd48673ca1db9ae22d4f8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c2474b32-fe42-4e3b-887f-0a93c6f4dd94", "node_type": "1", "metadata": {}, "hash": "ca307bc46c7825eafbe57a8a56c14efccb0a162ecf46b0822161755b61e8fa82", "class_name": "RelatedNodeInfo"}}, "hash": "9ce3507a1c240e14aa62c0874fee306b79a56eb7b9d0900be64e510a72130a96", "text": "We remove 20 pixels from the bottom bounds, to account for the ground.\n\nWe add the \"alien\" tag to the object, so we can identify and call it in other parts of the code.\n\nWe also add a custom object with the speed of this particular alien, broken into it's speed along the x and y axis. For the speed along the x-axis speedX, we add a random component so that not all aliens move at exactly the same speed. Then we multiply the speed by -1 or 1 depending on whether the alien is meant to be moving left or right across the screen.\n\nFinally, we use Kaboom's wait function to wait a short amount of time before calling spawnAlien again to create a new alien. We also have a call to spawnAlien to get it started when the game starts.\n\nMoving the Aliens\u200b\n\nTo move the aliens, we'll create a handler to attach to the onUpdate event, which fires for each alien object on every frame, like we did for the bullets:\n\nonUpdate\n\n\"alien\"\n\nalien\n\n=>\n\nalien\n\nmove\n\nalien\n\nspeedX\n\nalien\n\nspeedY\n\nif\n\nalien\n\npos\n\nalien\n\nheight\n\nMAP_HEIGHT\n\n||\n\nalien\n\npos\n\ndestroy\n\nalien\n\nif\n\nalien\n\npos\n\nalien\n\nwidth\n\n||\n\nalien\n\npos\n\nMAP_WIDTH\n\ndestroy\n\nalien\n\nFirst, the function moves the alien by the amount we calculated earlier and saved to the alien's custom data.\n\nThen the function checks to see if the alien has moved out of bounds of the map area. If it has, we destroy it, as it is no longer visible. Having too many active objects can decrease performance, so this step is important.\n\nRun the code now, you should see moving aliens.\n\nShooting the Aliens\u200b\n\nNow that we have moving aliens, a moving spaceship, and laser bullets, let's add the code to deal with a laser bullet hitting an alien. Of course, we want this to have a cool explosion and sound effect to give good feedback to the player.\n\nonCollide\n\n\"alien\"\n\n\"bullet\"\n\nalien\n\nbullet\n\n=>\n\nmakeExplosion\n\nalien\n\npos\n\ndestroy\n\nalien\n\ndestroy\n\nbullet\n\nplay\n\n\"explosion\"\n\nvolume\n\n0.2\n\ndetune\n\nrand\n\n1200\n\nThis is similar to the code used before to check if a bullet has hit a platform. We destroy both the bullet and alien to remove them from the scene. Then we use the play function to play the explosion sound effect. We set the volume so it fits in the mix, and we also put a random detune (pitch adjust) on the sound, to vary it and make it more interesting when a lot of aliens are being shot at.\n\nWe also call out to a function to create an explosion around the area where the alien bug used to be. This code is from the \"shooter\" example on the Kaboom examples page (which is a great game). It makes a series of bright white flashes around the explosion site, giving a cool cartoon or comic-book-like feel to the explosions. Add this code:\n\nfunction\n\nmakeExplosion\n\nrad\n\nsize\n\nfor\n\nlet\n\n++\n\nwait\n\nrand\n\n0.1\n\n=>\n\nfor\n\nlet\n\n++\n\nadd\n\npos\n\nadd\n\nrand\n\nvec2\n\nrad\n\nvec2\n\nrad\n\nrect\n\ncolor\n\n255\n\n255\n\n255\n\norigin\n\n\"center\"\n\nscale\n\nsize\n\nsize\n\ngrow\n\nrand\n\n48\n\n72\n\nsize\n\nlifespan\n\n0.1\n\nfunction\n\nlifespan\n\ntime\n\nlet\n\ntimer\n\nreturn\n\nupdate\n\ntimer\n\n+=\n\ndt\n\nif\n\ntimer\n\n>=\n\ntime\n\ndestroy\n\nthis\n\nfunction\n\ngrow\n\nrate\n\nreturn\n\nupdate\n\nconst\n\nrate\n\ndt\n\nthis\n\nscale\n\n+=\n\nthis\n\nscale\n\n+=\n\nThe makeExplosion function has four arguments (inputs to the function). These are:\n\np, the center position to base the explosions around\n\nn, the number of main flashes to make\n\nrad, the radius or distance from p to make the flashes in\n\nsize, the size of each of the flashes\n\nThe function creates a for loop to loop for n times (the number of main flashes we want to make). It uses the Kaboom wait function to leave a little bit of time (0.1) seconds between each main flash.\n\nadd function to add a\n\nrectangle shape for each flash, and setting the color to bright white (color components in Kaboom go from 0-1). This rectangle starts out at 1 pixel in each dimension.", "start_char_idx": 13618, "end_char_idx": 17391, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c2474b32-fe42-4e3b-887f-0a93c6f4dd94": {"__data__": {"id_": "c2474b32-fe42-4e3b-887f-0a93c6f4dd94", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e0c3b198-3307-4c83-9e52-fdfc8582cef0", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "9ce3507a1c240e14aa62c0874fee306b79a56eb7b9d0900be64e510a72130a96", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93841f3c-a154-4446-8954-f475208252d6", "node_type": "1", "metadata": {}, "hash": "ed8f633920a91c7cca7c8b2a0fd9726d85510ecdf3d2c3fdac26c1147bb6faf6", "class_name": "RelatedNodeInfo"}}, "hash": "ca307bc46c7825eafbe57a8a56c14efccb0a162ecf46b0822161755b61e8fa82", "text": "These are:\n\np, the center position to base the explosions around\n\nn, the number of main flashes to make\n\nrad, the radius or distance from p to make the flashes in\n\nsize, the size of each of the flashes\n\nThe function creates a for loop to loop for n times (the number of main flashes we want to make). It uses the Kaboom wait function to leave a little bit of time (0.1) seconds between each main flash.\n\nadd function to add a\n\nrectangle shape for each flash, and setting the color to bright white (color components in Kaboom go from 0-1). This rectangle starts out at 1 pixel in each dimension. Then the\n\nscale component is added to increase the size of the flash to the\n\norigin component is used to set the origin of the rectangle to it's center - this will be used when we \"grow\" the flash to give the impression that it is starting from a small point and exploding. We set the origin as the center so that scale is calculated from this position, giving it a more natural feel.\n\nTo make the flashes appear around the position p that we specified, the pos component is adjusted by a random amount, ranging from -rad to rad, the radius we specified (in other words, the blast area).\n\nThen there are references to two custom components - lifespan and grow. Kaboom allows us to define our own components to give objects any behaviour or attributes we want. All we need to do is create a function that returns an object with a method called update, which is then called for each frame of the object the component is added to.\n\nscale component on the object) on each frame. This is calculated from the\n\ndt function, which provides that time difference in seconds for us. The explosion flash will keep on growing in each frame, so we need a way to end the explosion before it covers the entire screen.\n\ndestroy the object after a short time, to solve the ever-growing explosion problem. It works by having a\n\ndt function again. When the\n\ndestroyed. This creates the impression of a quick explosion blast.\n\nExploding the Alien Bugs on Contact\u200b\n\nWhen the alien bugs hit something solid, they should explode. To do this, we'll add the following code:\n\nonCollide\n\n\"alien\"\n\n\"platform\"\n\nalien\n\nplatform\n\n=>\n\nmakeExplosion\n\nalien\n\npos\n\ndestroy\n\nalien\n\nplay\n\n\"explosion\"\n\nvolume\n\n0.1\n\ndetune\n\nrand\n\n1200\n\n1200\n\nonCollide\n\n\"alien\"\n\n\"ground\"\n\nalien\n\nground\n\n=>\n\nmakeExplosion\n\nalien\n\npos\n\ndestroy\n\nalien\n\nplay\n\n\"explosion\"\n\nvolume\n\n0.1\n\ndetune\n\nrand\n\n1200\n\n1200\n\nHere we have 2 collision handlers: one for aliens hitting a platform, and one for aliens hitting the ground. They both do the same thing. First, since we have a great explosion creating function, we use it gratuitously. Then we destroy the alien object to remove it from the scene. Finally, we play an explosion sound effect at a lower volume, as this explosion is not caused by the player and doesn't directly affect them. We also add the usual random detune function to modify the sound each time and keep it interesting.\n\nAdding Score and Shield UI\u200b\n\nLet's add the UI to show the ship's shield health and the player's overall score.\n\nFirst, add text for the player's score:\n\nadd\n\ntext\n\n\"SCORE: \"\n\nsize\n\nfont\n\n\"sink\"\n\npos\n\n100\n\n10\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nscoreText\n\nadd\n\ntext\n\n\"000000\"\n\nsize\n\nfont\n\n\"sink\"\n\npos\n\n150\n\n10\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nHere we add two new objects, rendered with the text component. The first is just the static label for the score. The second is the text placeholder for the actual score. Note that the layer component is used in both cases to place the text on the UI layer we created at the start of the tutorial. We haven't had to specify the layer for all our other game objects, because we set the obj layer as the default to use when we defined the layers.\n\nNow that we have the UI components for showing the score, we need a function to update the score when it changes, and reflect it on the UI.", "start_char_idx": 16797, "end_char_idx": 20698, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93841f3c-a154-4446-8954-f475208252d6": {"__data__": {"id_": "93841f3c-a154-4446-8954-f475208252d6", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c2474b32-fe42-4e3b-887f-0a93c6f4dd94", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "ca307bc46c7825eafbe57a8a56c14efccb0a162ecf46b0822161755b61e8fa82", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4e68335a-ad85-4ca8-a6a8-178bd1121d05", "node_type": "1", "metadata": {}, "hash": "562a279f3ec4583d4acaf923d8064f3985fa5f6b99ae9ebcd40512d447472f79", "class_name": "RelatedNodeInfo"}}, "hash": "ed8f633920a91c7cca7c8b2a0fd9726d85510ecdf3d2c3fdac26c1147bb6faf6", "text": "The first is just the static label for the score. The second is the text placeholder for the actual score. Note that the layer component is used in both cases to place the text on the UI layer we created at the start of the tutorial. We haven't had to specify the layer for all our other game objects, because we set the obj layer as the default to use when we defined the layers.\n\nNow that we have the UI components for showing the score, we need a function to update the score when it changes, and reflect it on the UI.\n\nfunction\n\nupdateScore\n\npoints\n\nplayer\n\nscore\n\n+=\n\npoints\n\nscoreText\n\ntext\n\nplayer\n\nscore\n\ntoString\n\npadStart\n\nplay\n\n\"score\"\n\nvolume\n\n0.5\n\ndetune\n\nrand\n\n1200\n\n1200\n\nThis updateScore function takes as its argument the number of points to add to the score and adds them to the player's current score - remember we added score as a custom property when we created the player (spaceship) object.\n\ntoString method, which is part of every object in JavaScript. It is also modified with\n\npadStart, which makes sure the resulting score string is exactly\n\ndetune to keep the sound fresh.\n\nTo increment the score when the alien bugs get hit by a bullet, update the onCollide event we added earlier for a bullet and alien bug as follows:\n\nonCollide\n\n\"alien\"\n\n\"bullet\"\n\nalien\n\nbullet\n\n=>\n\nmakeExplosion\n\nalien\n\npos\n\ndestroy\n\nalien\n\ndestroy\n\nbullet\n\nplay\n\n\"explosion\"\n\nvolume\n\n0.2\n\ndetune\n\nrand\n\n1200\n\nupdateScore\n\n10\n\n// new line\n\nThe next UI element to add is the ship's shield health. This would be great as a kind of health-bar-style display, that starts out green and turns red when the shield is low. The game should end when the shield is fully depleted, as the spaceship is then totally destroyed.\n\nadd\n\ntext\n\n\"SHIELD: \"\n\nsize\n\nfont\n\n\"sink\"\n\npos\n\n300\n\n10\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nshieldHolder\n\nadd\n\nrect\n\n52\n\n12\n\npos\n\n350\n\n10\n\ncolor\n\n100\n\n100\n\n100\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nshieldHolderInside\n\nadd\n\nrect\n\n50\n\n10\n\npos\n\n350\n\n10\n\ncolor\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nshieldBar\n\nadd\n\nrect\n\n50\n\n10\n\npos\n\n325\n\ncolor\n\n255\n\nlayer\n\n\"ui\"\n\nFirst, we add a text label so that players know what the bar represents. To create the shield bar UI, we use 3 elements :\n\nA border, or shieldHolder, to outline the bar.\n\nA black inner block to make the holder look like a thin line, shieldHolderInside.\n\nThe shieldBar itself, which will get shorter as the shield is damaged.\n\nNow we need a function to call when we want to update the shield's health:\n\nfunction\n\nupdatePlayerShield\n\nshieldPoints\n\nplayer\n\nshield\n\n+=\n\nshieldPoints\n\nplayer\n\nshield\n\nMath\n\nmax\n\nplayer\n\nshield\n\nplayer\n\nshield\n\nMath\n\nmin\n\nplayer\n\nshield\n\n100\n\nshieldBar\n\nwidth\n\n50\n\nplayer\n\nshield\n\n100\n\nif\n\nplayer\n\nshield\n\n20\n\nshieldBar\n\ncolor\n\nrgb\n\n255\n\nelse\n\nif\n\nplayer\n\nshield\n\n50\n\nshieldBar\n\ncolor\n\nrgb\n\n255\n\n127\n\nelse\n\nshieldBar\n\ncolor\n\nrgb\n\n255\n\nif\n\nplayer\n\nshield\n\n<=\n\ndestroy\n\nplayer\n\nfor\n\nlet\n\n500\n\n++\n\nwait\n\n0.01\n\n=>\n\nmakeExplosion\n\nvec2\n\nrand\n\nMAP_WIDTH\n\nrand\n\nMAP_HEIGHT\n\n10\n\n10\n\nplay\n\n\"explosion\"\n\ndetune\n\nrand\n\n1200\n\n1200\n\nwait\n\n=>\n\ngo\n\n\"endGame\"\n\nThis function has an argument for the number of shieldPoints to update the shield by and adjusts the custom shield property on the UI layer. It also clamps the minimum and maximum amount the shield can be to between 0 and 100.\n\nThe function sets the width of the shieldBar (its dimension along the x axis) to the percentage of the shield available (player.shield / 100), multiplied by the full width of the bar, 50.\n\nThen the function updates the color of the bar depending on the health of the shield:\n\nLess than 20% health, shield bar is red;\n\nLess than 50% but more than 20% health, shield bar is orange;\n\nThe shield bar is set to green for all other health values, in other words, when health is over 50%.", "start_char_idx": 20177, "end_char_idx": 23940, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4e68335a-ad85-4ca8-a6a8-178bd1121d05": {"__data__": {"id_": "4e68335a-ad85-4ca8-a6a8-178bd1121d05", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93841f3c-a154-4446-8954-f475208252d6", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "ed8f633920a91c7cca7c8b2a0fd9726d85510ecdf3d2c3fdac26c1147bb6faf6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8984452e-828d-49f4-9fcc-65b4986471b5", "node_type": "1", "metadata": {}, "hash": "4d199cd999ffcb9b1c32d003a5349874d7dec9f4d4c5b6a7c1dcc01a7515825d", "class_name": "RelatedNodeInfo"}}, "hash": "562a279f3ec4583d4acaf923d8064f3985fa5f6b99ae9ebcd40512d447472f79", "text": "It also clamps the minimum and maximum amount the shield can be to between 0 and 100.\n\nThe function sets the width of the shieldBar (its dimension along the x axis) to the percentage of the shield available (player.shield / 100), multiplied by the full width of the bar, 50.\n\nThen the function updates the color of the bar depending on the health of the shield:\n\nLess than 20% health, shield bar is red;\n\nLess than 50% but more than 20% health, shield bar is orange;\n\nThe shield bar is set to green for all other health values, in other words, when health is over 50%.\n\nThe final step in the shield health function is to check if the shield health is depleted, and end the game if it is.\n\nwait function to have a small delay between each explosion so that they don't all go off at once. Then we make each explosion happen at random positions on the map, passing in other parameters to the\n\nplay function. This time we don't adjust the volume down, as we want the sound to be as dramatic as possible. We detune it randomly again to create a true cacophony and sense of mayhem.\n\nwait for 2 seconds for everything to settle down, and then use the Kaboom function\n\ngo to switch to a new scene,\n\nscene\n\n\"endGame\"\n\n=>\n\nconst\n\nMAP_WIDTH\n\n440\n\nconst\n\nMAP_HEIGHT\n\n275\n\nadd\n\ntext\n\n\"GAME OVER \"\n\nsize\n\n40\n\nfont\n\n\"sink\"\n\npos\n\nMAP_WIDTH\n\nMAP_HEIGHT\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nonKeyRelease\n\n\"enter\"\n\n=>\n\ngo\n\n\"main\"\n\nadds a large \"GAME OVER\" text over the screen until the player presses and releases the\n\nonKeyRelease event returns the player to the main scene, and uses\n\ngo to switch scenes and restart the game. Because this is a new scene, in a new scope, we need to add the\n\nAllowing the Alien Bugs to Attack\u200b\n\nNow that we have mechanisms for updating points and shield health, we can add the code dealing with alien bugs hitting the spaceship to the main scene:\n\nconst\n\nALIEN_SHIELD_DAMAGE\n\n15\n\nonCollide\n\n\"alien\"\n\n\"player\"\n\nalien\n\nplayer\n\n=>\n\nshake\n\n20\n\nmakeExplosion\n\nalien\n\npos\n\ndestroy\n\nalien\n\nplay\n\n\"explosion\"\n\ndetune\n\n1200\n\nvolume\n\n0.5\n\nupdatePlayerShield\n\nALIEN_SHIELD_DAMAGE\n\nThis is a big event - it's the way the ship shield gets damaged and it can be fatal - so we want to add a bit more dramatic effect. Kaboom can create a cool screen-shaking effect, as if the player has been hit, which we can invoke by calling shake with a number representing how dramatic the shake should be. Then we add some visual effect with the makeExplosion function. We also destroy the alien and play the explosion effect again, this time a bit louder as the alien exploding has directly affected the player. We also detune the effect to the lowest pitch we can, to make it \"feel\" more direct, particularly if the player has a sub-woofer.\n\nThen we call the updatePlayerShield function we defined previously, with a constant that defines by how much a shield is damaged per hit. You can move the constant to the top of the main scene file to keep it neat if you want.\n\nRaining Gems\u200b\n\nIt's time to add the element that gives the game its purpose: gems the player can collect to earn points. Add this function to the main scene to create a gem:\n\nfunction\n\nspawnGem\n\nlet\n\nxpos\n\nrand\n\nBLOCK_SIZE\n\nMAP_WIDTH\n\nBLOCK_SIZE\n\nadd\n\nsprite\n\n\"gem\"\n\npos\n\nxpos\n\nBLOCK_SIZE\n\narea\n\nbody\n\n\"gem\"\n\nonUpdate\n\n\"gem\"\n\ngem\n\n=>\n\nif\n\ngem\n\npos\n\nMAP_HEIGHT\n\ndestroy\n\ngem\n\nspawnGem\n\nspawnGem\n\nrand function. We don't want the gems to fall right at the edge of the screen, as they will be cut off and the spaceship won't be able to get to them because of the\n\nadd the gem sprite to the scene. The\n\nbody component, which makes it subject to Kaboom gravity so that it falls down towards the ground. We give it the label\n\nonUpdate event handler for the gem - we need to do this for all objects with a\n\nsolid objects are taken care of. Sometimes, if the frame rate gets too low (if there's a lot of action, or the computer's slow), some\n\nobject falls through the solid. This could cause gems to fall through the ground, out of reach of the player's spaceship.", "start_char_idx": 23372, "end_char_idx": 27384, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8984452e-828d-49f4-9fcc-65b4986471b5": {"__data__": {"id_": "8984452e-828d-49f4-9fcc-65b4986471b5", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "15fe8cc79860bec0d640ae32f9f10543276047ede79aa583741fb1cd2876ecc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4e68335a-ad85-4ca8-a6a8-178bd1121d05", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}, "hash": "562a279f3ec4583d4acaf923d8064f3985fa5f6b99ae9ebcd40512d447472f79", "class_name": "RelatedNodeInfo"}}, "hash": "4d199cd999ffcb9b1c32d003a5349874d7dec9f4d4c5b6a7c1dcc01a7515825d", "text": "We don't want the gems to fall right at the edge of the screen, as they will be cut off and the spaceship won't be able to get to them because of the\n\nadd the gem sprite to the scene. The\n\nbody component, which makes it subject to Kaboom gravity so that it falls down towards the ground. We give it the label\n\nonUpdate event handler for the gem - we need to do this for all objects with a\n\nsolid objects are taken care of. Sometimes, if the frame rate gets too low (if there's a lot of action, or the computer's slow), some\n\nobject falls through the solid. This could cause gems to fall through the ground, out of reach of the player's spaceship. To account for this possibility, we check if the gem's\n\nFinally, we call spawnGem() to start the gem raining process.\n\nCollecting Gems\u200b\n\nNow that gems are raining down, we can add a handler to pick up when the player's spaceship moves over a gem. This is how the spaceship \"collects\" gems, and will earn the player points. Add the following onCollide event handler:\n\nconst\n\nPOINTS_PER_GEM\n\n100\n\nplayer\n\nonCollide\n\n\"gem\"\n\ngem\n\n=>\n\ndestroy\n\ngem\n\nupdateScore\n\nPOINTS_PER_GEM\n\nwait\n\nspawnGem\n\nThis fires whenever the spaceship and a gem collides. We destroy the gem to remove it from the scene, and call the updateScore function we added earlier to update the player's points by the amount declared in the POINTS_PER_GEM constant. Then we wait one second before another gem is spawned for the player to collect.\n\nRun the code now and start collecting gems.\n\nAdding Background Music\u200b\n\nHaving sound effects is cool, but games generally need a soundtrack to tie all the sounds together. Kaboom allows us to play a sound file on loop as constant background music. Add this code to the bottom of main.js file to play the track:\n\nconst\n\nmusic\n\nplay\n\n\"music\"\n\nmusic\n\nloop\n\nThe music is a track called \"Battle of Pogs\" by \"Komiku\" from \"Free music archive\", a good resource for music that you can legally use in your games.\n\nPlaying the Game\u200b\n\nCongratulations, you've finished making this Kaboom game! Try running and playing the game to see what score you can get. You can also experiment with adjusting the parameters to see how they change the gameplay.\n\nCredits\u200b\n\nThe game art and sounds used in this tutorial are from the following sources:\n\nMusic : https://freemusicarchive.org/music/Komiku/Captain_Glouglous_Incredible_Week_Soundtrack/pog\n\nLaser : https://freesound.org/people/sunnyflower/sounds/361471/\n\nExplosion: https://freesound.org/people/tommccann/sounds/235968/\n\nPoint Beep : https://freesound.org/people/LittleRobotSoundFactory/sounds/270303/\n\nGem: https://opengameart.org/content/planetcute-gem-bluepng\n\nSpace Background: https://opengameart.org/content/space-background-8\n\nAlien Bug: https://opengameart.org/content/8-bit-alien-assets\n\nThe spaceship was made by Ritza.\n\nThank you to all the creators for putting their assets up with a Creative Commons license and allowing us to use them.\n\nThings to Try Next\u200b\n\nHere are a few things you can try to add to the game and polish it up:\n\nSelf healing on the shield. Perhaps add back 1 or 2 shield points every 10 seconds, so that players can go further if they dodge the aliens.\n\nA better ending screen, with the player's score.\n\nAn intro scene, explaining the game and the controls.\n\nDifferent types of alien bugs. Perhaps a large \"boss\" bug that can also shoot back.\n\nYou can find the code for this tutorial in the repl below:\n\n< Previous: Space Invaders with Kaboom.js\n\nNext: Tic-tac-toe with Kaboom.js & WebSockets >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nGame Design\n\nCreating a New Project on Replit\n\nGetting Started with Kaboom.js\n\nSetting up Kaboom\n\nAdding the main game scene\n\nCreating the Game Map\n\nAdding the Spaceship\n\nMoving the Spaceship\n\nAdding Laser Guns\n\nAdding Alien Space Bugs\n\nMoving the Aliens\n\nShooting the Aliens\n\nExploding the Alien Bugs on Contact\n\nAdding Score and Shield UI\n\nAllowing the Alien Bugs to Attack\n\nRaining Gems\n\nCollecting Gems\n\nAdding Background Music\n\nPlaying the Game\n\nCredits\n\nThings to Try Next", "start_char_idx": 26738, "end_char_idx": 30785, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9dd615d1-607b-4fff-9cb3-e1853b84d589": {"node_ids": ["b6520c94-acbf-445d-b653-f3adef2ac4c0", "c668ca78-14a6-461f-9248-4e9dc36b9080", "a0fa3b60-e63c-409d-aca2-bcca15677870", "b3e37e66-2112-45b2-b3cc-f76b21878144", "e0c3b198-3307-4c83-9e52-fdfc8582cef0", "c2474b32-fe42-4e3b-887f-0a93c6f4dd94", "93841f3c-a154-4446-8954-f475208252d6", "4e68335a-ad85-4ca8-a6a8-178bd1121d05", "8984452e-828d-49f4-9fcc-65b4986471b5"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-shooter-with-kaboom.html"}}}, "docstore/metadata": {"b6520c94-acbf-445d-b653-f3adef2ac4c0": {"doc_hash": "e026c278d9e03455864b17b020777b42e87edacef0ffc48ab7ff22d85de25f7d", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "c668ca78-14a6-461f-9248-4e9dc36b9080": {"doc_hash": "9267bed5284395f57a1a413adad696d0ea3938675e9b476fec6d243e6681a429", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "a0fa3b60-e63c-409d-aca2-bcca15677870": {"doc_hash": "901121e9b90affde2aaa99d588aa8a7a6318f7a4d990dff2c22c9009ac298e8e", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "b3e37e66-2112-45b2-b3cc-f76b21878144": {"doc_hash": "d85cfa0914fc5978d52ffd691ade0ce90fc891a9f90fd48673ca1db9ae22d4f8", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "e0c3b198-3307-4c83-9e52-fdfc8582cef0": {"doc_hash": "9ce3507a1c240e14aa62c0874fee306b79a56eb7b9d0900be64e510a72130a96", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "c2474b32-fe42-4e3b-887f-0a93c6f4dd94": {"doc_hash": "ca307bc46c7825eafbe57a8a56c14efccb0a162ecf46b0822161755b61e8fa82", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "93841f3c-a154-4446-8954-f475208252d6": {"doc_hash": "ed8f633920a91c7cca7c8b2a0fd9726d85510ecdf3d2c3fdac26c1147bb6faf6", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "4e68335a-ad85-4ca8-a6a8-178bd1121d05": {"doc_hash": "562a279f3ec4583d4acaf923d8064f3985fa5f6b99ae9ebcd40512d447472f79", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}, "8984452e-828d-49f4-9fcc-65b4986471b5": {"doc_hash": "4d199cd999ffcb9b1c32d003a5349874d7dec9f4d4c5b6a7c1dcc01a7515825d", "ref_doc_id": "9dd615d1-607b-4fff-9cb3-e1853b84d589"}}}