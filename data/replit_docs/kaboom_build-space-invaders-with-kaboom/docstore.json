{"docstore/data": {"e8e22ce7-0bb5-44f7-a53d-de4335fcf9fd": {"__data__": {"id_": "e8e22ce7-0bb5-44f7-a53d-de4335fcf9fd", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5f7d206d-6dd5-4ece-9177-6e9cfb26c813", "node_type": "1", "metadata": {}, "hash": "5b3d0bfc6c2abe609e6fb48b6d7b691ac260bd4c7c45eb5c7a76033fbcf6fab9", "class_name": "RelatedNodeInfo"}}, "hash": "c1261529e9c66b9fe56f223599e0798ff73b4ac731df7525444d8ea75ae639c5", "text": "from\n\nto\n\nspeed\n\nloop\n\nfalse\n\nexplode\n\nfrom\n\nto\n\nspeed\n\nloop\n\ntrue\n\nThe first call, loadRoot, tells Kaboom which directory to use as default for loading sprites \u2013 this is just easier than typing out the full root for each asset when we load it.\n\nThen we load the sprite sheets. The first argument is the path to the sprite sheet, and the second argument is an object describing how to use the sprite sheet. The object has a key for each sprite in the sprite sheet, and the value is another object describing how to use that sprite. Let's take a look at the keys we've used:\n\nx and y describe where the sprites start, by specifying the top left corner of the sprite.\n\nwidth and height describe the size of the sprite.\n\nsliceX and sliceY describe how many sprites are in each row and column of the sprite sheet. We have four separate sprites in the x direction in the alien file, and three in the player file.\n\nanims is an object that describes the animation for each sprite. Here we use the names of the animations for the keys, and the values are objects describing the animation.\n\nfrom and to describe the index of the first and last frames of the animation.\n\nspeed is how many frames to show per second.\n\nloop is a boolean that tells Kaboom if the animation should loop, or only play once.\n\nMaking a scene\u200b\n\nScenes are like different stages in a Kaboom game. Generally, there are three scenes in games:\n\nThe intro scene, which gives some info and instructions, and waits for the player to press \"start\".\n\nThe main game, where we play.\n\nAn endgame, or game over scene, which gives the player their score or overall result, and allows them to start again.\n\nFor this tutorial, we'll omit the intro scene, since we already know what Space Invaders is and how to play it. You might like to add your own intro scene in later!\n\nLet's add the code for defining each scene:\n\nscene\n\n\"game\"\n\n=>\n\n// todo.. add scene code here\n\nscene\n\n\"gameOver\"\n\nscore\n\n=>\n\n// todo.. add scene code here\n\ngo\n\n\"game\"\n\nNotice in the \"gameOver\" scene definition, we add a custom parameter: score. This is so we can pass the player's final score to the end game scene to display it.\n\nTo start the whole game off, we use the go function, which switches between scenes.\n\nAdding the player object\u200b\n\nNow that we have the main structure and overhead functions out of the way, let's start adding in the characters that make up the Space Invaders world. In Kaboom, characters are anything that makes up the game world, including floor, platforms, and so on, not only the players and bots. They are also known as \"game objects\".\n\nLet's add in our player object. Add this code to the \"game\" scene:\n\nconst\n\nplayer\n\nadd\n\nsprite\n\n\"player\"\n\nscale\n\norigin\n\n\"center\"\n\npos\n\n50\n\n550\n\narea\n\nscore\n\nlives\n\n\"player\"\n\nplayer\n\nplay\n\n\"move\"\n\nThis uses the add function to add a new character to the scene. The add function takes an array ([ ]) of components that make up the look and behavior of a game character. In Kaboom, every character is made up of one or more components. Components give special properties to each character. There are built-in components for many properties, like:\n\nsprite, to give the character an avatar.\n\npos, to specify the starting position of the object and give it functionality like movement.\n\norigin, to specify whether pos uses the object's center or one of the corners.\n\nKaboom also allows us to add custom properties to a game object. For the player, we add in their score and number of lives remaining as custom properties. This makes it simple to keep track of these variables without using global variables.\n\nWe can also add a tag to the game objects. This is not too useful on the player object, but it will be very useful on the alien objects. The tag will allow us to select and manipulate a group of objects at once, like selecting and moving all aliens.\n\nAdding the aliens\u200b\n\nIn Space Invaders, the aliens operate as a unit in a tightly formed grid. They all move in sync with each other. This is what that looks like:\n\nTo create this grid, we could add each alien one at a time, but that would be a lot of code. Instead, we can use a for loop to cut down on the amount of code we need to write. We just need to decide how many rows and columns of aliens we want.\n\nLet's create two constants for the number of rows and columns of aliens.", "start_char_idx": 0, "end_char_idx": 4328, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5f7d206d-6dd5-4ece-9177-6e9cfb26c813": {"__data__": {"id_": "5f7d206d-6dd5-4ece-9177-6e9cfb26c813", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e8e22ce7-0bb5-44f7-a53d-de4335fcf9fd", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "c1261529e9c66b9fe56f223599e0798ff73b4ac731df7525444d8ea75ae639c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c88987d6-e9a9-40df-b983-3a2825212b8a", "node_type": "1", "metadata": {}, "hash": "766d6455dfdde505ab4202b489edb5b8f820fc08f781046324a1ef95dceb4d5d", "class_name": "RelatedNodeInfo"}}, "hash": "5b3d0bfc6c2abe609e6fb48b6d7b691ac260bd4c7c45eb5c7a76033fbcf6fab9", "text": "This makes it simple to keep track of these variables without using global variables.\n\nWe can also add a tag to the game objects. This is not too useful on the player object, but it will be very useful on the alien objects. The tag will allow us to select and manipulate a group of objects at once, like selecting and moving all aliens.\n\nAdding the aliens\u200b\n\nIn Space Invaders, the aliens operate as a unit in a tightly formed grid. They all move in sync with each other. This is what that looks like:\n\nTo create this grid, we could add each alien one at a time, but that would be a lot of code. Instead, we can use a for loop to cut down on the amount of code we need to write. We just need to decide how many rows and columns of aliens we want.\n\nLet's create two constants for the number of rows and columns of aliens. Add this code to top of the \"main\" file:\n\nconst\n\nALIEN_ROWS\n\nconst\n\nALIEN_COLS\n\nWe also need to specify the size of each \"block\" of the grid. Add these constants under the rows and columns we added above:\n\nconst\n\nBLOCK_HEIGHT\n\n40\n\nconst\n\nBLOCK_WIDTH\n\n32\n\nThe last constants we need are to determine how far from the top and left side the alien block should start. Add these below the block-size constants:\n\nconst\n\nOFFSET_X\n\n208\n\nconst\n\nOFFSET_Y\n\n100\n\nNow we can use the for loop to add each alien. We'll use an outer for loop to run through each row, and then we'll use an inner for loop to add the aliens in columns, in this type of pattern:\n\nfor each row       // Loop through each row\n\nfor each column  // Loop through each column\n\nadd alien      // Add an alien at position [row,column]\n\nWe'll also keep a reference to each alien in a 2D array. This will be useful later, when we need to choose an alien to shoot at the player.\n\nNow, let's translate that to actual code. Add the following code to the \"game\" scene:\n\nlet\n\nalienMap\n\nfunction\n\nspawnAliens\n\nfor\n\nlet\n\nrow\n\nrow\n\nALIEN_ROWS\n\nrow\n\n++\n\nalienMap\n\nrow\n\nfor\n\nlet\n\ncol\n\ncol\n\nALIEN_COLS\n\ncol\n\n++\n\nconst\n\ncol\n\nBLOCK_WIDTH\n\nOFFSET_X\n\nconst\n\nrow\n\nBLOCK_HEIGHT\n\nOFFSET_Y\n\nconst\n\nalien\n\nadd\n\npos\n\nsprite\n\n\"alien\"\n\narea\n\nscale\n\norigin\n\n\"center\"\n\n\"alien\"\n\nrow\n\nrow\n\ncol\n\ncol\n\nalien\n\nplay\n\n\"fly\"\n\nalienMap\n\nrow\n\ncol\n\nalien\n\nspawnAliens\n\nThis code adds the function spawnAliens to the \"game\" scene. We implement the double for loop in the function, and add the aliens to the scene.\n\nWe use the constants we defined earlier to calculate where to add each alien. We also add a custom property to each alien called row and col. This is so we can easily access which row and column the alien is in when we query it later. Our 2D array, alienMap, is where we store a reference to each alien at indices row and col. There is some code to initialise each row of the array after the first for loop.\n\nWe also call alien.play(\"fly\"), which tells Kaboom to run the \"fly\" animation on the alien. If you look at the loadSpriteAtlas call for the alien sprite, you'll see that it defines the \"fly\" animation, which switches between the first two frames of the sprite sheet.\n\nThen we call the spawnAliens function to add the aliens to the scene.\n\nIf you run the game, you should see a block of animated aliens and the blue player block at the bottom of the screen, like this:\n\nMoving the player\u200b\n\nThe next step is adding controls to move the player around the screen. Kaboom has the useful onKeyDown function that we can use to call a handler when specified keys are pressed. When we added the pos component to our player, it added methods to move the player.", "start_char_idx": 3509, "end_char_idx": 7021, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c88987d6-e9a9-40df-b983-3a2825212b8a": {"__data__": {"id_": "c88987d6-e9a9-40df-b983-3a2825212b8a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5f7d206d-6dd5-4ece-9177-6e9cfb26c813", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "5b3d0bfc6c2abe609e6fb48b6d7b691ac260bd4c7c45eb5c7a76033fbcf6fab9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a9a9385e-745d-4328-beb0-5d6b765b909b", "node_type": "1", "metadata": {}, "hash": "b4d28a49a0907b0045d2ee75b01f778be09d14f746c0399a298a3c4725a7ef17", "class_name": "RelatedNodeInfo"}}, "hash": "766d6455dfdde505ab4202b489edb5b8f820fc08f781046324a1ef95dceb4d5d", "text": "There is some code to initialise each row of the array after the first for loop.\n\nWe also call alien.play(\"fly\"), which tells Kaboom to run the \"fly\" animation on the alien. If you look at the loadSpriteAtlas call for the alien sprite, you'll see that it defines the \"fly\" animation, which switches between the first two frames of the sprite sheet.\n\nThen we call the spawnAliens function to add the aliens to the scene.\n\nIf you run the game, you should see a block of animated aliens and the blue player block at the bottom of the screen, like this:\n\nMoving the player\u200b\n\nThe next step is adding controls to move the player around the screen. Kaboom has the useful onKeyDown function that we can use to call a handler when specified keys are pressed. When we added the pos component to our player, it added methods to move the player. We'll use these functions to add this move-handling code to the \"game\" scene:\n\nlet\n\npause\n\nfalse\n\nonKeyDown\n\n\"left\"\n\n=>\n\nif\n\npause\n\nreturn\n\nif\n\nplayer\n\npos\n\n>=\n\nSCREEN_EDGE\n\nplayer\n\nmove\n\nPLAYER_MOVE_SPEED\n\nonKeyDown\n\n\"right\"\n\n=>\n\nif\n\npause\n\nreturn\n\nif\n\nplayer\n\npos\n\n<=\n\nwidth\n\nSCREEN_EDGE\n\nplayer\n\nmove\n\nPLAYER_MOVE_SPEED\n\nYou'll notice that we use two constants:\n\nSCREEN_EDGE, which provides a margin before the player gets right to the edge of the screen, and\n\nPLAYER_MOVE_SPEED, which is the speed at which the player moves.\n\nAdd the two constants at the top of the \"main\" file, along with the other constants:\n\nconst\n\nPLAYER_MOVE_SPEED\n\n500\n\nconst\n\nSCREEN_EDGE\n\n100\n\nYou'll also notice that we have a pause variable. We'll use this later on to prevent the player from moving when they have been shot.\n\nIf you run the game now, you'll be able to move the player left and right on the screen.\n\nMoving the aliens\u200b\n\nThe next step is to make the aliens move. In Space Invaders, the aliens move from one side of the screen to the other. When they reach either end of the screen, they move down a row, and start moving in the opposite direction.\n\nFor this, we'll need a few flags to determine where we are in the sequence. Add these to the \"game\" scene:\n\nlet\n\nalienDirection\n\nlet\n\nalienMoveCounter\n\nlet\n\nalienRowsMoved\n\nWe use alienDirection as a flag that can be either 1 or -1. It controls if the aliens move left or right. We use alienMoveCounter to track how many places the aliens have moved over in the current direction. When this counter reaches a certain value, we'll switch the alien direction and move them all down a row. We use alienRowsMoved to track how many rows down the aliens have moved. When they have moved down a certain number of rows and reach the ground, we'll end the game.\n\nWe'll also need a few constants that hold the speed the aliens should move at, how many columns the aliens should move before switching directions, and how many rows the aliens can move before reaching the ground. Add these along with the other constants:\n\nconst\n\nALIEN_SPEED\n\n15\n\nconst\n\nALIEN_STEPS\n\n322\n\nconst\n\nALIEN_ROWS_MOVE\n\nSince the aliens should move automatically, without the player pressing a key, we need a way to call our code to move the aliens every frame. Kaboom has a function onUpdate that we can use. Add the following code to the \"game\" scene:\n\nonUpdate\n\n=>\n\nif\n\npause\n\nreturn\n\nevery\n\n\"alien\"\n\nalien\n\n=>\n\nalien\n\nmove\n\nalienDirection\n\nALIEN_SPEED\n\nalienMoveCounter\n\n++\n\nif\n\nalienMoveCounter\n\nALIEN_STEPS\n\nalienDirection\n\nalienDirection\n\nalienMoveCounter\n\nmoveAliensDown\n\nif\n\nalienRowsMoved\n\nALIEN_ROWS_MOVE\n\npause\n\ntrue\n\nplayer\n\nplay\n\n\"explode\"\n\nwait\n\n=>\n\ngo\n\n\"gameOver\"\n\nplayer\n\nscore\n\nfunction\n\nmoveAliensDown\n\nalienRowsMoved\n\n++\n\nevery\n\n\"alien\"\n\nalien\n\n=>\n\nalien\n\nmoveBy\n\nBLOCK_HEIGHT\n\nThis code has a number of parts. First, we check if the game is in the pause state. If it is, we don't want to do anything, so we return early. Then we use the Kaboom every function, which selects game objects with a given tag, and runs the given function on each one. In this case, we're selecting all aliens and using move to move them across the screen, at the speed and direction specified by our direction flag.\n\nevery function.", "start_char_idx": 6188, "end_char_idx": 10262, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a9a9385e-745d-4328-beb0-5d6b765b909b": {"__data__": {"id_": "a9a9385e-745d-4328-beb0-5d6b765b909b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c88987d6-e9a9-40df-b983-3a2825212b8a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "766d6455dfdde505ab4202b489edb5b8f820fc08f781046324a1ef95dceb4d5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "91d3d763-3c3f-4c0b-b5c1-f0deeb329c62", "node_type": "1", "metadata": {}, "hash": "6969737fa8b443f6512e33d9daff3465b0ffe60785d67e3873b041533fbc3631", "class_name": "RelatedNodeInfo"}}, "hash": "b4d28a49a0907b0045d2ee75b01f778be09d14f746c0399a298a3c4725a7ef17", "text": "First, we check if the game is in the pause state. If it is, we don't want to do anything, so we return early. Then we use the Kaboom every function, which selects game objects with a given tag, and runs the given function on each one. In this case, we're selecting all aliens and using move to move them across the screen, at the speed and direction specified by our direction flag.\n\nevery function. This time, we make use of the\n\nmove and\n\nFinally, we check if the aliens have moved down more than ALIEN_ROWS_MOVE. If they have, we end the game. When the game ends, we change the player sprite to play the explode animation, which plays the last two frames of the sprite sheet. We also wait for two seconds before calling the go function to go to the \"gameOver\" scene, passing in the player's score so it can be shown to the player.\n\nFiring bullets\u200b\n\nNow our game characters can all move around. Let's add in some shooting. In Space Invaders, the player shoots up to the aliens. There should be a \"reload\" time between shots, so that the player can't just hold down the fire button and machine-gun all the aliens. That would make the game too easy, and therefore boring. To counter that, we'll need to keep track of when the last bullet was fired and implement a short \"cooldown\" period before the player can shoot again. We'll use the onKeyDown function to connect pressing the space bar to our shooting code. Add the following code to the \"game\" scene:\n\nlet\n\nlastShootTime\n\ntime\n\nonKeyPress\n\n\"space\"\n\n=>\n\nif\n\npause\n\nreturn\n\nif\n\ntime\n\nlastShootTime\n\nGUN_COOLDOWN_TIME\n\nlastShootTime\n\ntime\n\nspawnBullet\n\nplayer\n\npos\n\n\"bullet\"\n\nfunction\n\nspawnBullet\n\nbulletPos\n\ndirection\n\ntag\n\nadd\n\nrect\n\npos\n\nbulletPos\n\norigin\n\n\"center\"\n\ncolor\n\n255\n\n255\n\n255\n\narea\n\ncleanup\n\n\"missile\"\n\ntag\n\ndirection\n\nYou'll see in the code above that we have a helper function, spawnBullet, that handles creating a bullet. It has some parameters, like the starting position of the bullet bulletPos, the direction it should move in direction, and the tag to give the bullet. The reason this is in a separate function is so that we can re-use it for the aliens' bullets when we make them shoot. Notice that we use Kaboom's cleanup component to automatically remove the bullet when it leaves the screen. That is super useful, because once a bullet leaves the screen, we don't want Kaboom spending resources updating it every frame. With hundreds of bullets on the screen, this can be a performance killer.\n\nWe also use the constant GUN_COOLDOWN_TIME to test if the player can shoot again. This is the time in seconds between shots. Add this constant to the other constants we have used:\n\nconst\n\nGUN_COOLDOWN_TIME\n\nTo check the gun cooldown time, we use the Kaboom time function. The time function returns the time since the game started in seconds. Whenever the player shoots, we record the time in lastShootTime. Then, each time the player presses the space bar, we check if the time since the last shot is greater than GUN_COOLDOWN_TIME. If it is, we can shoot again. If it isn't, we can't shoot again. This way we can make sure the player needs to smash the fire button to get a rapid fire.\n\nThe code above handles the player pressing the fire button, the space bar, and spawning a bullet. This bullet will just be stationary until we add in some movement for it each frame. We've given each bullet spawned a tag called missile so that we'll be able to select it later. We also added a custom property direction to the bullet. Using those properties, we can move the bullet in the direction it should move using this code:\n\nonUpdate\n\n\"missile\"\n\nmissile\n\n=>\n\nif\n\npause\n\nreturn\n\nmissile\n\nmove\n\nBULLET_SPEED\n\nmissile\n\ndirection\n\nThe onUpdate function has an option to take a tag to select the game objects to update each frame. In this case, we're updating all bullets. We also have a constant BULLET_SPEED that specifies the speed of the bullets. Add this constant to the other constants:\n\nconst\n\nBULLET_SPEED\n\n300\n\nIf you run the game now, you should be able to shoot bullets. They won't kill the aliens yet. We'll add that next.", "start_char_idx": 9862, "end_char_idx": 13961, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "91d3d763-3c3f-4c0b-b5c1-f0deeb329c62": {"__data__": {"id_": "91d3d763-3c3f-4c0b-b5c1-f0deeb329c62", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a9a9385e-745d-4328-beb0-5d6b765b909b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "b4d28a49a0907b0045d2ee75b01f778be09d14f746c0399a298a3c4725a7ef17", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdfee175-f7c0-4b1a-ab07-53b92132f14f", "node_type": "1", "metadata": {}, "hash": "5237b2f16f1b0f5ba88fa996240a4d3d5065287005c0fcb884f7c1b0c21eca84", "class_name": "RelatedNodeInfo"}}, "hash": "6969737fa8b443f6512e33d9daff3465b0ffe60785d67e3873b041533fbc3631", "text": "This bullet will just be stationary until we add in some movement for it each frame. We've given each bullet spawned a tag called missile so that we'll be able to select it later. We also added a custom property direction to the bullet. Using those properties, we can move the bullet in the direction it should move using this code:\n\nonUpdate\n\n\"missile\"\n\nmissile\n\n=>\n\nif\n\npause\n\nreturn\n\nmissile\n\nmove\n\nBULLET_SPEED\n\nmissile\n\ndirection\n\nThe onUpdate function has an option to take a tag to select the game objects to update each frame. In this case, we're updating all bullets. We also have a constant BULLET_SPEED that specifies the speed of the bullets. Add this constant to the other constants:\n\nconst\n\nBULLET_SPEED\n\n300\n\nIf you run the game now, you should be able to shoot bullets. They won't kill the aliens yet. We'll add that next.\n\nBullet collisions with aliens\u200b\n\nNow that we have bullets and they move, we need to add collision detection and handling code to check when the bullet hits an alien. For this, we can use the Kaboom onCollide function. First add the constant below to the other constants:\n\nconst\n\nPOINTS_PER_ALIEN\n\n100\n\nThen add the following code to the \"game\" scene:\n\nonCollide\n\n\"bullet\"\n\n\"alien\"\n\nbullet\n\nalien\n\n=>\n\ndestroy\n\nbullet\n\nalien\n\nplay\n\n\"explode\"\n\nalien\n\nuse\n\nlifespan\n\n0.5\n\nfade\n\n0.1\n\nalienMap\n\nalien\n\nrow\n\nalien\n\ncol\n\nnull\n\n// Mark the alien as dead\n\nupdateScore\n\nPOINTS_PER_ALIEN\n\ndestroy function to destroy the bullet on the screen. Then we call the\n\nlifespan function to make the alien fade out and disappear after a short period of time. Finally, we mark the alien as dead in the\n\nFinally, we call a helper method updateScore to add to the player's score, and update it on screen. We need a bit of code to get this part working - including adding text elements to the screen to show the score. Add the following code to the \"game\" scene:\n\nadd\n\ntext\n\n\"SCORE:\"\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\n100\n\n40\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nscoreText\n\nadd\n\ntext\n\n\"000000\"\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\n200\n\n40\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nfunction\n\nupdateScore\n\npoints\n\nplayer\n\nscore\n\n+=\n\npoints\n\nscoreText\n\ntext\n\nplayer\n\nscore\n\ntoString\n\npadStart\n\n\"0\"\n\nFirst we add a text label for the score. We use the Kaboom text component to create a text element. Then we need a text element that shows the actual score. We add it the same way as the label, except this time we store a reference to this text element in scoreText. Then we have the helper function updateScore, which adds points to the player's score and updates the score text element. We use the padStart function to add leading zeros to the score, so that the score is always six digits long. This shows the player that it is possible to score a lot of points!\n\nIf you run the game now, you should be able to shoot at an alien, destroy it, and see your points increase.\n\nThe aliens fight back\u200b\n\nIt's not fair that only the player can shoot the aliens - we've got to give the aliens a chance to shoot back! Since we don't want the aliens to be shooting each other, we need to only allow aliens with a clear shot to the ground to be able to shoot. In other words, an alien that shoots must not have another alien in front of them. Recall that when we added the aliens, we created a 2D array that stores a reference to each alien. When an alien gets hit, we set the entry in the array to null. Therefore we can use this array to find an alien that has a clear shot to the ground to shoot at the player.\n\nTo make the aliens shoot at regular intervals, we'll use the Kaboom loop function, which calls a function at a regular interval.", "start_char_idx": 13123, "end_char_idx": 16749, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdfee175-f7c0-4b1a-ab07-53b92132f14f": {"__data__": {"id_": "fdfee175-f7c0-4b1a-ab07-53b92132f14f", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "91d3d763-3c3f-4c0b-b5c1-f0deeb329c62", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "6969737fa8b443f6512e33d9daff3465b0ffe60785d67e3873b041533fbc3631", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b3750e55-9aa3-46fb-954d-92cc7e801da7", "node_type": "1", "metadata": {}, "hash": "27d02d90e56b467e1e9b8b89f27463c02607568ea4f51fefc2e9b546402f93b8", "class_name": "RelatedNodeInfo"}}, "hash": "5237b2f16f1b0f5ba88fa996240a4d3d5065287005c0fcb884f7c1b0c21eca84", "text": "The aliens fight back\u200b\n\nIt's not fair that only the player can shoot the aliens - we've got to give the aliens a chance to shoot back! Since we don't want the aliens to be shooting each other, we need to only allow aliens with a clear shot to the ground to be able to shoot. In other words, an alien that shoots must not have another alien in front of them. Recall that when we added the aliens, we created a 2D array that stores a reference to each alien. When an alien gets hit, we set the entry in the array to null. Therefore we can use this array to find an alien that has a clear shot to the ground to shoot at the player.\n\nTo make the aliens shoot at regular intervals, we'll use the Kaboom loop function, which calls a function at a regular interval. Add the following code to the \"game\" scene:\n\n// Find a random alien to make shoot\n\nloop\n\n=>\n\nif\n\npause\n\nreturn\n\n// Randomly choose a column, then walk up from the\n\n// bottom row until an alien that is still alive is found\n\nlet\n\nrow\n\ncol\n\ncol\n\nrandi\n\nALIEN_COLS\n\nlet\n\nshooter\n\nnull\n\n// Look for the first alien in the column that is still alive\n\nfor\n\nrow\n\nALIEN_ROWS\n\nrow\n\n>=\n\nrow\n\n--\n\nshooter\n\nalienMap\n\nrow\n\ncol\n\nif\n\nshooter\n\n!=\n\nnull\n\nbreak\n\nif\n\nshooter\n\n!=\n\nnull\n\nspawnBullet\n\nshooter\n\npos\n\n\"alienBullet\"\n\nFirst, we check if we are in a paused state - if so, we get out early. If not, our task is to randomly choose an alien that has a clear shot at the ground. To do this, we use this logic:\n\nChoose a random column in the alien map.\n\nWalk up the rows from the bottom until we find an alien that is still alive.\n\nIf we find an alien, we can use it as the shooter.\n\nIf we successfully find a shooter, spawn a bullet at the shooter's position, and tag it as an alien bullet.\n\nThis way, there is no pattern that the player can learn to outsmart the aliens.\n\nIf you run the game now, you should see a random alien shoot at the player every second.\n\nBullet collisions with the player\u200b\n\nNow that the aliens can shoot, we can add code to determine if one of their bullets hit the player. To do this, we can use the Kaboom onCollide function again. Add the following code to the \"game\" scene:\n\nplayer\n\nonCollide\n\n\"alienBullet\"\n\nbullet\n\n=>\n\nif\n\npause\n\nreturn\n\ndestroyAll\n\n\"bullet\"\n\nplayer\n\nplay\n\n\"explode\"\n\nupdateLives\n\npause\n\ntrue\n\nwait\n\n=>\n\nif\n\nplayer\n\nlives\n\n==\n\ngo\n\n\"gameOver\"\n\nplayer\n\nscore\n\nelse\n\nplayer\n\nmoveTo\n\n50\n\n550\n\nplayer\n\nplay\n\n\"move\"\n\npause\n\nfalse\n\nThis code is similar to the previous collision handler we added for bullets hitting aliens. There are a few difference though.\n\nwait function, we either go to the end game screen (if the player has no more lives left) or reset the player to the start position (if the player still has lives) to allow the game to continue. Once the player has been reset, we set the\n\nThe updateLives helper function needs a few UI elements, as we did for the score. Add the following code to add the lives text elements to the \"game\" scene:\n\nadd\n\ntext\n\n\"LIVES:\"\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\n650\n\n40\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nlivesText\n\nadd\n\ntext\n\n\"3\"\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\n700\n\n40\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nfunction\n\nupdateLives\n\nlife\n\nplayer\n\nlives\n\n+=\n\nlife\n\nlivesText\n\ntext\n\nplayer\n\nlives\n\ntoString\n\nThis code follows the same pattern as the score UI elements, so we won't go into details here.\n\nWe made a call to the \"gameOver\" scene. At the moment, we just have a placeholder comment there. Let's add the code we need to show the final score and add the logic to start a new game.", "start_char_idx": 15991, "end_char_idx": 19505, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b3750e55-9aa3-46fb-954d-92cc7e801da7": {"__data__": {"id_": "b3750e55-9aa3-46fb-954d-92cc7e801da7", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "60bd01681d06a3a34de7ecf9e368668158f3936bf67d30184a46ba611513810a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdfee175-f7c0-4b1a-ab07-53b92132f14f", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}, "hash": "5237b2f16f1b0f5ba88fa996240a4d3d5065287005c0fcb884f7c1b0c21eca84", "class_name": "RelatedNodeInfo"}}, "hash": "27d02d90e56b467e1e9b8b89f27463c02607568ea4f51fefc2e9b546402f93b8", "text": "Add the following code to add the lives text elements to the \"game\" scene:\n\nadd\n\ntext\n\n\"LIVES:\"\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\n650\n\n40\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nconst\n\nlivesText\n\nadd\n\ntext\n\n\"3\"\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\n700\n\n40\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nfunction\n\nupdateLives\n\nlife\n\nplayer\n\nlives\n\n+=\n\nlife\n\nlivesText\n\ntext\n\nplayer\n\nlives\n\ntoString\n\nThis code follows the same pattern as the score UI elements, so we won't go into details here.\n\nWe made a call to the \"gameOver\" scene. At the moment, we just have a placeholder comment there. Let's add the code we need to show the final score and add the logic to start a new game. Add the following code to the \"gameOver\" scene:\n\nadd\n\ntext\n\n\"GAME OVER\"\n\nsize\n\n40\n\nfont\n\n\"sink\"\n\npos\n\nwidth\n\nheight\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nadd\n\ntext\n\n\"SCORE: \"\n\nscore\n\nsize\n\n20\n\nfont\n\n\"sink\"\n\npos\n\nwidth\n\nheight\n\n50\n\norigin\n\n\"center\"\n\nlayer\n\n\"ui\"\n\nonKeyPress\n\n\"space\"\n\n=>\n\ngo\n\n\"game\"\n\nIn the \"gameOver\" scene, we add a big, size 40 \"Game Over\" banner. The score is added below it, in smaller text. We also add a way to start a new game. We use the onKeyPress function to listen for the space bar being pressed. When this happens, we call the go function to start the game again.\n\nAll the elements for the game are now defined. Give it a go, and see how you do!\n\nNext steps\u200b\n\nThere are a number of things you can add to this game to make it more interesting.\n\nOnce the player shoots all the aliens and wins, nothing happens. Try making the screen fill with more aliens, and make them move or shoot faster for each level the player reaches.\n\nAdd some sound effects and music. Kaboom has the play function to play audio files. You can add effects for shooting, explosions, points scored, etc.\n\nAdd different types of aliens. In many Space Invaders versions, a \"boss\" ship flies across the top of the screen at random intervals. Shooting this ship gives the player lots of bonus points.\n\nTry giving the player a bonus life if they reach a certain score.\n\nWhat other features can you add to this game? Have fun, and happy coding!\n\n< Previous: Snake game with Kaboom.js\n\nNext: Space Shooter with Kaboom.js >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nGame mechanics\n\nGetting started on Replit\n\nSetting up Kaboom\n\nImporting sprites and other game assets\n\nMaking a scene\n\nAdding the player object\n\nAdding the aliens\n\nMoving the player\n\nMoving the aliens\n\nFiring bullets\n\nBullet collisions with aliens\n\nThe aliens fight back\n\nBullet collisions with the player\n\nNext steps", "start_char_idx": 18858, "end_char_idx": 21383, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"0d191bcd-2fa8-4167-a37a-63ebd56bb5a7": {"node_ids": ["e8e22ce7-0bb5-44f7-a53d-de4335fcf9fd", "5f7d206d-6dd5-4ece-9177-6e9cfb26c813", "c88987d6-e9a9-40df-b983-3a2825212b8a", "a9a9385e-745d-4328-beb0-5d6b765b909b", "91d3d763-3c3f-4c0b-b5c1-f0deeb329c62", "fdfee175-f7c0-4b1a-ab07-53b92132f14f", "b3750e55-9aa3-46fb-954d-92cc7e801da7"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/kaboom/build-space-invaders-with-kaboom.html"}}}, "docstore/metadata": {"e8e22ce7-0bb5-44f7-a53d-de4335fcf9fd": {"doc_hash": "c1261529e9c66b9fe56f223599e0798ff73b4ac731df7525444d8ea75ae639c5", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}, "5f7d206d-6dd5-4ece-9177-6e9cfb26c813": {"doc_hash": "5b3d0bfc6c2abe609e6fb48b6d7b691ac260bd4c7c45eb5c7a76033fbcf6fab9", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}, "c88987d6-e9a9-40df-b983-3a2825212b8a": {"doc_hash": "766d6455dfdde505ab4202b489edb5b8f820fc08f781046324a1ef95dceb4d5d", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}, "a9a9385e-745d-4328-beb0-5d6b765b909b": {"doc_hash": "b4d28a49a0907b0045d2ee75b01f778be09d14f746c0399a298a3c4725a7ef17", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}, "91d3d763-3c3f-4c0b-b5c1-f0deeb329c62": {"doc_hash": "6969737fa8b443f6512e33d9daff3465b0ffe60785d67e3873b041533fbc3631", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}, "fdfee175-f7c0-4b1a-ab07-53b92132f14f": {"doc_hash": "5237b2f16f1b0f5ba88fa996240a4d3d5065287005c0fcb884f7c1b0c21eca84", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}, "b3750e55-9aa3-46fb-954d-92cc7e801da7": {"doc_hash": "27d02d90e56b467e1e9b8b89f27463c02607568ea4f51fefc2e9b546402f93b8", "ref_doc_id": "0d191bcd-2fa8-4167-a37a-63ebd56bb5a7"}}}