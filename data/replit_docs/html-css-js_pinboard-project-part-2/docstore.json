{"docstore/data": {"fcdd9449-6e3a-482e-95bc-5702b5353d60": {"__data__": {"id_": "fcdd9449-6e3a-482e-95bc-5702b5353d60", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "87296c5a-99e3-4b6b-9265-1d35a274b566", "node_type": "1", "metadata": {}, "hash": "01c48c6b12e2b24dad4361c7287a6661164ef0c73e93c98eaa29c15e891e96d1", "class_name": "RelatedNodeInfo"}}, "hash": "5938df22bcea4de9027638e1c3bff66f1c4154a1e5866ab7598dbb3bb3b26f5d", "text": "However, there are still some other left-overs from our hardcoded HTML in part 1. If we enter a value into the filter field (top-left), we will still get autocompleted recommendations from our previous pins (even though we have no pins or tags on the page at the moment). To fix this, we must clear the contents of our <datalist> HTML element (since we'll be managing these via JavaScript):\n\nYou should change the current <datalist> element to:\n\ndatalist id\n\n\"existing-tags\"\n\ndatalist\n\nJavaScript Code\u200b\n\nNow we are ready to add our JavaScript code. Similar to what we did in part 1, we will add the JavaScript in its entirety and then walk through it step by step. Let's start by placing the entire snippet below in our script.js file:\n\nlet\n\npins\n\nconst\n\ndefaultPins\n\nid\n\n\"122203215486581930752615279550\"\n\nimage\n\n\"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\"\n\ntags\n\n\"engineering\"\n\nid\n\n\"144685389103194178251333634000\"\n\nimage\n\n\"https://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\"\n\ntags\n\n\"headphones\"\n\n\"ocean\"\n\n\"wellness\"\n\nid\n\n\"159279541173033634211014623228\"\n\nimage\n\n\"https://images.unsplash.com/photo-1580894908361-967195033215?w=600\"\n\ntags\n\n\"office\"\n\n\"coding\"\n\n\"desk\"\n\nid\n\n\"75261220651273643680893699100\"\n\nimage\n\n\"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=600\"\n\ntags\n\n\"boxing\"\n\n\"wellness\"\n\nid\n\n\"161051747537834597427464147310\"\n\nimage\n\n\"https://images.unsplash.com/photo-1581094271901-8022df4466f9?w=600\"\n\ntags\n\n\"lab\"\n\n\"engineering\"\n\nconst\n\nsavedPins\n\nlocalStorage\n\ngetItem\n\n\"savedPins\"\n\nif\n\nsavedPins\n\npins\n\nJSON\n\nparse\n\nsavedPins\n\nelse\n\npins\n\ndefaultPins\n\nconst\n\nexistingTagsNode\n\ndocument\n\nquerySelector\n\n\"#existing-tags\"\n\nconst\n\nfilterInputNode\n\ndocument\n\nquerySelector\n\n\"#filter-input\"\n\nconst\n\npinsListNode\n\ndocument\n\nquerySelector\n\n\"#pins-list\"\n\nconst\n\ndialogNode\n\ndocument\n\nquerySelector\n\n\"#dialog\"\n\nconst\n\ndialogStartNode\n\ndocument\n\nquerySelector\n\n\"#dialog-start\"\n\nconst\n\ndialogFormNode\n\ndocument\n\nquerySelector\n\n\"#dialog-form\"\n\nconst\n\ndialogImageNode\n\ndocument\n\nquerySelector\n\n\"#dialog-image\"\n\nconst\n\ndialogTagsNode\n\ndocument\n\nquerySelector\n\n\"#dialog-tags\"\n\nconst\n\ndialogSubmitNode\n\ndocument\n\nquerySelector\n\n\"#dialog-submit\"\n\nfunction\n\nupdateHTML\n\nprovidedPins\n\npinsListNode\n\ninnerHTML\n\nprovidedPins\n\n||\n\npins\n\nmap\n\nid\n\nimage\n\ntags\n\n=>\n\n<section class=\"pin\">\n\n<img class=\"image\" src=\"\n\n${\n\nimage\n\n\">\n\n<ul class=\"info\">\n\n${\n\ntags\n\nmap\n\ntag\n\n=>\n\n<li class=\"tag-wrap\">\n\n<button class=\"tag\">\n\n${\n\ntag\n\n</button>\n\n</li>\n\njoin\n\n\"\"\n\n</ul>\n\n<button class=\"remove\" aria-label=\"remove\" value=\"\n\n${\n\nid\n\n\">\n\n&#10005;\n\n</button>\n\n</section>\n\njoin\n\n\"\"\n\nfunction\n\nupdatePins\n\nnewPins\n\nif\n\nnewPins\n\npins\n\nnewPins\n\nlocalStorage\n\nsetItem\n\n\"savedPins\"\n\nJSON\n\nstringify\n\npins\n\nexistingTagsNode\n\ninnerHTML\n\npins\n\nreduce\n\nresult\n\ntags\n\n=>\n\nconst\n\nnewTags\n\ntags\n\nfilter\n\ntag\n\n=>\n\nresult\n\nincludes\n\ntag\n\nreturn\n\n.\n\nresult\n\n.\n\nnewTags\n\nmap\n\ntag\n\n=>\n\n<option>\n\n${\n\ntag\n\ntoUpperCase\n\n${\n\ntag\n\nslice\n\n</option>\n\njoin\n\n\"\"\n\nupdateHTML\n\nfunction\n\napplyFilter\n\nfilter\n\nif\n\nfilter\n\ntrim\n\n===\n\n\"\"\n\nreturn\n\nupdateHTML\n\nconst\n\narray\n\nfilter\n\nsplit\n\n\",", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "87296c5a-99e3-4b6b-9265-1d35a274b566": {"__data__": {"id_": "87296c5a-99e3-4b6b-9265-1d35a274b566", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fcdd9449-6e3a-482e-95bc-5702b5353d60", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "5938df22bcea4de9027638e1c3bff66f1c4154a1e5866ab7598dbb3bb3b26f5d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5115754b-099e-41b3-b4ed-118330725c3a", "node_type": "1", "metadata": {}, "hash": "b7a129a3ba70731b4fc06dbd7aafac9da365ae1ee43bb82107cf555077e39954", "class_name": "RelatedNodeInfo"}}, "hash": "01c48c6b12e2b24dad4361c7287a6661164ef0c73e93c98eaa29c15e891e96d1", "text": "</button>\n\n</section>\n\njoin\n\n\"\"\n\nfunction\n\nupdatePins\n\nnewPins\n\nif\n\nnewPins\n\npins\n\nnewPins\n\nlocalStorage\n\nsetItem\n\n\"savedPins\"\n\nJSON\n\nstringify\n\npins\n\nexistingTagsNode\n\ninnerHTML\n\npins\n\nreduce\n\nresult\n\ntags\n\n=>\n\nconst\n\nnewTags\n\ntags\n\nfilter\n\ntag\n\n=>\n\nresult\n\nincludes\n\ntag\n\nreturn\n\n.\n\nresult\n\n.\n\nnewTags\n\nmap\n\ntag\n\n=>\n\n<option>\n\n${\n\ntag\n\ntoUpperCase\n\n${\n\ntag\n\nslice\n\n</option>\n\njoin\n\n\"\"\n\nupdateHTML\n\nfunction\n\napplyFilter\n\nfilter\n\nif\n\nfilter\n\ntrim\n\n===\n\n\"\"\n\nreturn\n\nupdateHTML\n\nconst\n\narray\n\nfilter\n\nsplit\n\n\",\"\n\nmap\n\ntext\n\n=>\n\ntext\n\ntrim\n\nmap\n\ntext\n\n=>\n\ntext\n\ntoLowerCase\n\nconst\n\nfilteredPins\n\npins\n\nfilter\n\ntags\n\n=>\n\nconst\n\nmatchedTags\n\ntags\n\nfilter\n\ntag\n\n=>\n\narray\n\nincludes\n\ntag\n\nreturn\n\nmatchedTags\n\nlength\n\n>=\n\narray\n\nlength\n\nupdateHTML\n\nfilteredPins\n\nfunction\n\nhandleInput\n\nevent\n\nif\n\nevent\n\ntarget\n\n===\n\nfilterInputNode\n\napplyFilter\n\nescape\n\nevent\n\ntarget\n\nvalue\n\nelse\n\nif\n\nevent\n\ntarget\n\n===\n\ndialogImageNode\n\n||\n\nevent\n\ntarget\n\n===\n\ndialogTagsNode\n\nif\n\ndialogImageNode\n\nvalue\n\ntrim\n\n!==\n\n\"\"\n\n&&\n\ndialogTagsNode\n\nvalue\n\ntrim\n\n!==\n\n\"\"\n\ndialogSubmitNode\n\ndisabled\n\nfalse\n\nelse\n\ndialogSubmitNode\n\ndisabled\n\ntrue\n\nfunction\n\nhandleClick\n\nevent\n\nif\n\nevent\n\ntarget\n\n===\n\ndialogStartNode\n\n||\n\nevent\n\ntarget\n\n===\n\ndialogNode\n\ndialogNode\n\nclassList\n\ntoggle\n\n\"hidden\"\n\ndialogNode\n\nopen\n\ndialogNode\n\nopen\n\nelse\n\nif\n\nevent\n\ntarget\n\nclassList\n\ncontains\n\n\"remove\"\n\nupdatePins\n\npins\n\nfilter\n\nid\n\n=>\n\nid\n\n!==\n\nevent\n\ntarget\n\nvalue\n\napplyFilter\n\nfilterInputNode\n\nvalue\n\nelse\n\nif\n\nevent\n\ntarget\n\nclassList\n\ncontains\n\n\"tag\"\n\nfilterInputNode\n\nvalue\n\nevent\n\ntarget\n\ninnerText\n\napplyFilter\n\nfilterInputNode\n\nvalue\n\nfunction\n\nhandleSubmit\n\nevent\n\nevent\n\npreventDefault\n\nconst\n\ntime\n\nnew\n\nDate\n\ngetTime\n\nconst\n\nid\n\n${\n\ntime\n\n${\n\nMath\n\nrandom\n\n100000000000000000\n\nconst\n\nimage\n\nencodeURI\n\ndialogImageNode\n\nvalue\n\ntrim\n\nconst\n\ntags\n\ndialogTagsNode\n\nvalue\n\nsplit\n\n\",\"\n\nmap\n\ntag\n\n=>\n\ntag\n\ntrim\n\nmap\n\ntag\n\n=>\n\ntag\n\ntoLowerCase\n\nmap\n\ntag\n\n=>\n\nescape\n\ntag\n\nupdatePins\n\n.\n\npins\n\nid\n\nimage\n\ntags\n\napplyFilter\n\nfilterInputNode\n\nvalue\n\ndialogNode\n\nclassList\n\nadd\n\n\"hidden\"\n\ndialogNode\n\nopen\n\nfalse\n\ndialogImageNode\n\nvalue\n\n\"\"\n\ndialogTagsNode\n\nvalue\n\n\"\"\n\ndialogSubmitNode\n\ndisabled\n\ntrue\n\ndocument\n\nbody\n\naddEventListener\n\n\"input\"\n\nhandleInput\n\ndocument\n\nbody\n\naddEventListener\n\n\"click\"\n\nhandleClick\n\ndocument\n\nbody\n\naddEventListener\n\n\"submit\"\n\nhandleSubmit\n\nupdatePins\n\nHandling Data\u200b\n\nLocal Storage\u200b\n\nAll the above JavaScript will stop running once we close the page, so any data stored in the pins variable (whether added by a user or the default pins) will be lost. This means that the array will be created again from scratch when the user returns to their pinboard - not helpful.\n\nFortunately, all modern browsers allow us to persist data even after we close our pinboard. We can use the localStorage.setItem method to save data locally to our device, and then use localStorage.getItem to retrieve the data again when the page loads. While localStorage is super powerful, there are a couple of things to keep in mind:\n\nIt does not persist between different browsers.\n\nIt won't sync between devices.\n\nIf you clear your browser history, it might delete your localStorage data too.\n\nYou can only save strings (a single line of text data) in localStorage.\n\nEach string needs to be assigned to a unique name in localStorage.\n\nThe last two points are important since it means that we are unable to store arrays or objects to localStorage. A common way around this is to turn our data structures into strings (via JSON.stringify) before saving it to localStorage, and then turn it back into an array or object (via JSON.parse) after retrieving it from localStorage.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5115754b-099e-41b3-b4ed-118330725c3a": {"__data__": {"id_": "5115754b-099e-41b3-b4ed-118330725c3a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "87296c5a-99e3-4b6b-9265-1d35a274b566", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "01c48c6b12e2b24dad4361c7287a6661164ef0c73e93c98eaa29c15e891e96d1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bc00ae73-bf35-4347-bf92-cfa7584b06f6", "node_type": "1", "metadata": {}, "hash": "46ea1c128058b4251018ff126228e04623f2c38435b7689e18347d108ebe5940", "class_name": "RelatedNodeInfo"}}, "hash": "b7a129a3ba70731b4fc06dbd7aafac9da365ae1ee43bb82107cf555077e39954", "text": "Fortunately, all modern browsers allow us to persist data even after we close our pinboard. We can use the localStorage.setItem method to save data locally to our device, and then use localStorage.getItem to retrieve the data again when the page loads. While localStorage is super powerful, there are a couple of things to keep in mind:\n\nIt does not persist between different browsers.\n\nIt won't sync between devices.\n\nIf you clear your browser history, it might delete your localStorage data too.\n\nYou can only save strings (a single line of text data) in localStorage.\n\nEach string needs to be assigned to a unique name in localStorage.\n\nThe last two points are important since it means that we are unable to store arrays or objects to localStorage. A common way around this is to turn our data structures into strings (via JSON.stringify) before saving it to localStorage, and then turn it back into an array or object (via JSON.parse) after retrieving it from localStorage.\n\nFor example, by running JSON.stringify on our array, we are able to save a string resembling the following in localStorage:\n\n\"[{id:\\\"1222032154865\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580983218765-f663bec07b37?w=600\\\",tags:[\\\"engineering\\\"],},{id:\\\"1446853891031\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1572932491814-4833690788ad?w=600\\\",tags:[\\\"headphones\\\",\\\"ocean\\\",\\\"wellness\\\"],},{id:\\\"1592795411730\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580894908361-967195033215?w=600\\\",tags:[\\\"office\\\",\\\"coding\\\",\\\"desk\\\"],},{id:\\\"752612206512\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1584464491033-06628f3a6b7b?w=600\\\",tags:[\\\"boxing\\\",\\\"wellness\\\"],},{id:\\\"1610517475378\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1581094271901-8022df4466f9?w=600\\\",tags:[\\\"lab\\\",\\\"engineering\\\"],},]\"\n\nThis is how we use localStorage in our JavaScript code:\n\nWe check if there is a string called savedPins saved in our localStorage.\n\nIf there is a string assigned, we run JSON.parse on it to turn it into an array.\n\nWe then set our active pins variable to the returned array. (If no such savedPins value exists in localStorage, we know that this is the first time a user is visiting our page.)\n\nWe populate the pins variable with the default pins:\n\nlet\n\npins\n\nconst\n\ndefaultPins\n\nid\n\n\"1222032154865\"\n\nimage\n\n\"https://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\"\n\ntags\n\n\"engineering\"\n\nid\n\n\"1446853891031\"\n\nimage\n\n\"https://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\"\n\ntags\n\n\"headphones\"\n\n\"ocean\"\n\n\"wellness\"\n\nid\n\n\"1592795411730\"\n\nimage\n\n\"https://images.unsplash.com/photo-1580894908361-967195033215?w=600\"\n\ntags\n\n\"office\"\n\n\"coding\"\n\n\"desk\"\n\nid\n\n\"752612206512\"\n\nimage\n\n\"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=600\"\n\ntags\n\n\"boxing\"\n\n\"wellness\"\n\nid\n\n\"1610517475378\"\n\nimage\n\n\"https://images.unsplash.com/photo-1581094271901-8022df4466f9?w=600\"\n\ntags\n\n\"lab\"\n\n\"engineering\"\n\nconst\n\nsavedPins\n\nlocalStorage\n\ngetItem\n\n\"savedPins\"\n\nif\n\nsavedPins\n\npins\n\nJSON\n\nparse\n\nsavedPins\n\nelse\n\npins\n\ndefaultPins\n\nHTML DOM Nodes\u200b\n\nIn addition to keeping all our active pins in a pins variable, it's also helpful to declare all the HTML elements that we will be using upfront. This means that when returning, you'll see all the IDs used by JavaScript grouped together. All of these HTML elements are selected by means of the document.querySelector method. The query we use is similar to selectors in CSS, for example, #existing-tags means that JavaScript needs to look for an HTML tag with an id attribute of existing-tags.", "start_char_idx": 5240, "end_char_idx": 8788, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bc00ae73-bf35-4347-bf92-cfa7584b06f6": {"__data__": {"id_": "bc00ae73-bf35-4347-bf92-cfa7584b06f6", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5115754b-099e-41b3-b4ed-118330725c3a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "b7a129a3ba70731b4fc06dbd7aafac9da365ae1ee43bb82107cf555077e39954", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "14bdc755-50ca-4111-b7bc-5b2bede0e40c", "node_type": "1", "metadata": {}, "hash": "926cb659ef0b1e13fcc3632676097e92c2d57958abe596137652a0a82733fca8", "class_name": "RelatedNodeInfo"}}, "hash": "46ea1c128058b4251018ff126228e04623f2c38435b7689e18347d108ebe5940", "text": "This means that when returning, you'll see all the IDs used by JavaScript grouped together. All of these HTML elements are selected by means of the document.querySelector method. The query we use is similar to selectors in CSS, for example, #existing-tags means that JavaScript needs to look for an HTML tag with an id attribute of existing-tags.\n\nIn part one, we created a couple of id attributes in our HTML that we can use to find the required elements:\n\nconst\n\nexistingTagsNode\n\ndocument\n\nquerySelector\n\n\"#existing-tags\"\n\nconst\n\nfilterInputNode\n\ndocument\n\nquerySelector\n\n\"#filter-input\"\n\nconst\n\npinsListNode\n\ndocument\n\nquerySelector\n\n\"#pins-list\"\n\nconst\n\ndialogNode\n\ndocument\n\nquerySelector\n\n\"#dialog\"\n\nconst\n\ndialogStartNode\n\ndocument\n\nquerySelector\n\n\"#dialog-start\"\n\nconst\n\ndialogFormNode\n\ndocument\n\nquerySelector\n\n\"#dialog-form\"\n\nconst\n\ndialogImageNode\n\ndocument\n\nquerySelector\n\n\"#dialog-image\"\n\nconst\n\ndialogTagsNode\n\ndocument\n\nquerySelector\n\n\"#dialog-tags\"\n\nconst\n\ndialogSubmitNode\n\ndocument\n\nquerySelector\n\n\"#dialog-submit\"\n\nFunctions\u200b\n\nNow that we've created our basic data structures, we'll be declaring some JavaScript functions that we can run when specific conditions are met. All of these snippets just create the functions and don't do anything until the functions are called later in our code.\n\nUpdating Displayed HTML\u200b\n\nAny type of interactivity on the web is only possible by directly modifying the HTML or CSS that is displayed by the user. This is done by\n\nLoading a new page (using server-side rendering), or\n\nDirectly manipulating the former with JavaScript.\n\nLet's go with option 2. We will create a low-level function that we can run each time our pins array changes. By running this function, our HTML will be re-rendered to reflect the current state of our pins array.\n\nWe start by referencing the pinsListNode variable, which holds the div HTML tag that wraps all our displayed pins. Because we made changes, it only contains a <span class=\"loader\"></span> HTML at the moment. Once we run our updateHTML function, the HTML inside the div will be overridden by a new HTML string created by the following logic:\n\nWhen the updateHTML function is called, an optional providedPins array can be passed directly to it as an argument.\n\nWithin the function, we start with (providedPins || pins) which tells JavaScript to use the providedPins argument if it is passed to the function, otherwise it should fall back to the default pins variable declared at the top of the file.\n\nNext, we start by running the .map method, the array that was selected in the last step. The .map method accepts a function as an argument, which we immediately pass as an arrow function. This function will be executed on every single item in our array (a pin object in our case), and will then return a new array populated with the results of each execution.\n\nEach object in our starting array should have an id, image and tags property (which we decided when we created the pins variable above). This means that we can directly destructure them into the arrow function that we pass.\n\nEach time the arrow function executes, it returns a string of HTML created by a template literal (wrapped in back-tick characters). Template literals are super useful because they allow us to insert dynamic values straight into the string. Dynamic values should be wrapped in the following syntax: ${ }. This is called interpolation.\n\nThe first variable we interpolate is the image property retrieved directly from the object by destructuring. However, the next interpolation is an actual JavaScript expression (in this case, the result of the expression will be placed in our string where the interpolation is defined).\n\nIn this interpolated expression, we do another .map, this time over the tags array inside each pin object. We're again using interpolation to add the value dynamically to the returned HTML string.\n\nOur interpolation expression should have an array of HTML strings once it finishes, for example: [\"<li class=\"tag-wrap\"><button class=\"tag\">engineering</button></li>\", <li class=\"tag-wrap\"><button class=\"tag\">Wellness</button></li>\", <li class=\"tag-wrap\"><button class=\"tag\">Coding</button></li>\"]\n\nAt the end of the interpolated expression, we are running a .join('') method. The .join method combines all values of an array into a single string. The argument that we pass to .join determines how the items will be divided in the final string. Since we don't want any dividers between our lines of HTML strings above, we simply pass an empty string as an argument (''). For example, [1,2,3].join('-') will create the string: \"1-2-3\".", "start_char_idx": 8442, "end_char_idx": 13079, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "14bdc755-50ca-4111-b7bc-5b2bede0e40c": {"__data__": {"id_": "14bdc755-50ca-4111-b7bc-5b2bede0e40c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bc00ae73-bf35-4347-bf92-cfa7584b06f6", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "46ea1c128058b4251018ff126228e04623f2c38435b7689e18347d108ebe5940", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "57233d82-204e-4353-9f09-af84bd98cbd5", "node_type": "1", "metadata": {}, "hash": "6b4e726c506ccadbe86cf6b16450dd62f245973bbe81fa5cb0986ef0b4872716", "class_name": "RelatedNodeInfo"}}, "hash": "926cb659ef0b1e13fcc3632676097e92c2d57958abe596137652a0a82733fca8", "text": "We're again using interpolation to add the value dynamically to the returned HTML string.\n\nOur interpolation expression should have an array of HTML strings once it finishes, for example: [\"<li class=\"tag-wrap\"><button class=\"tag\">engineering</button></li>\", <li class=\"tag-wrap\"><button class=\"tag\">Wellness</button></li>\", <li class=\"tag-wrap\"><button class=\"tag\">Coding</button></li>\"]\n\nAt the end of the interpolated expression, we are running a .join('') method. The .join method combines all values of an array into a single string. The argument that we pass to .join determines how the items will be divided in the final string. Since we don't want any dividers between our lines of HTML strings above, we simply pass an empty string as an argument (''). For example, [1,2,3].join('-') will create the string: \"1-2-3\". Likewise [1,2,3].join('') will create \"123\"\n\nFinally, you'll see that we do the exact same thing on the first .map that provides the final value to pinsListNode.innerHTML.\n\nfunction\n\nupdateHTML\n\nprovidedPins\n\npinsListNode\n\ninnerHTML\n\nprovidedPins\n\n||\n\npins\n\nmap\n\nid\n\nimage\n\ntags\n\n=>\n\n<section class=\"pin\">\n\n<img class=\"image\" src=\"\n\n${\n\nimage\n\n\">\n\n<ul class=\"info\">\n\n${\n\ntags\n\nmap\n\ntag\n\n=>\n\n<li class=\"tag-wrap\">\n\n<button class=\"tag\">\n\n${\n\ntag\n\n</button>\n\n</li>\n\njoin\n\n\"\"\n\n</ul>\n\n<button class=\"remove\" aria-label=\"remove\" value=\"\n\n${\n\nid\n\n\">\n\n&#10005;\n\n</button>\n\n</section>\n\njoin\n\n\"\"\n\nThe above should create a string that looks something like the below, and is assigned as the HTML inside pinListNode:\n\npinsListNode\n\ninnerHTML\n\nsection\n\nclass\n\npin\n\nimg\n\nclass\n\nimage\n\nsrc\n\nhttps://images.unsplash.com/photo-1580983218765-f663bec07b37?w=600\n\nul\n\nclass\n\ninfo\n\nli\n\nclass\n\ntag-wrap\n\nbutton\n\nclass\n\ntag\n\nengineering\n\n</\n\nbutton\n\n</\n\nli\n\n</\n\nul\n\nbutton\n\nclass\n\nremove\n\naria-label\n\nremove\n\nvalue\n\n1222032154865\n\n&#10005;\n\n</\n\nbutton\n\n</\n\nsection\n\nsection\n\nclass\n\npin\n\nimg\n\nclass\n\nimage\n\nsrc\n\nhttps://images.unsplash.com/photo-1572932491814-4833690788ad?w=600\n\nul\n\nclass\n\ninfo\n\nli\n\nclass\n\ntag-wrap\n\nbutton\n\nclass\n\ntag\n\nheadphones\n\n</\n\nbutton\n\n</\n\nli\n\nli\n\nclass\n\ntag-wrap\n\nbutton\n\nclass\n\ntag\n\nocean\n\n</\n\nbutton\n\n</\n\nli\n\nli\n\nclass\n\ntag-wrap\n\nbutton\n\nclass\n\ntag\n\nwellness\n\n</\n\nbutton\n\n</\n\nli\n\n</\n\nul\n\nbutton\n\nclass\n\nremove\n\naria-label\n\nremove\n\nvalue\n\n1446853891031\n\n&#10005;\n\n</\n\nbutton\n\n</\n\nsection\n\nUpdating Saved Pins\u200b\n\nIt's not enough to just update our HTML. We need to perform some higher-level tasks, too. For example, we need to save the current pins variable to localStorage and update our datalist HTML (so that we get the most up-to-date autocomplete recommendations). We do this using the following function:\n\nfunction\n\nupdatePins\n\nnewPins\n\nif\n\nnewPins\n\npins\n\nnewPins\n\nlocalStorage\n\nsetItem\n\n\"savedPins\"\n\nJSON\n\nstringify\n\npins\n\nexistingTagsNode\n\ninnerHTML\n\npins\n\nreduce\n\nresult\n\ntags\n\n=>\n\nconst\n\nnewTags\n\ntags\n\nfilter\n\ntag\n\n=>\n\nresult\n\nincludes\n\ntag\n\nreturn\n\n...\n\nresult\n\n...\n\nnewTags\n\nmap\n\ntag\n\n=>\n\n<option>\n\n${\n\ntag\n\ntoUpperCase\n\n${\n\ntag\n\nslice\n\n</option>\n\njoin\n\n\"\"\n\nupdateHTML\n\nWe get the current pins array and run the .reduce() method on it. To recap, .reduce() is similar to .map(), and also runs a function (passed as an arrow function to reduce) on each item in the original array. However, instead of providing the item itself as the argument of the arrow function, .reduce() provides two arguments. The first result contains the last value returned. The next argument (which we restructure as { tags }) is the current array item that it is looping over. This allows us to do some powerful things in JavaScript.", "start_char_idx": 12254, "end_char_idx": 15804, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "57233d82-204e-4353-9f09-af84bd98cbd5": {"__data__": {"id_": "57233d82-204e-4353-9f09-af84bd98cbd5", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "14bdc755-50ca-4111-b7bc-5b2bede0e40c", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "926cb659ef0b1e13fcc3632676097e92c2d57958abe596137652a0a82733fca8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "50e49fbe-d3d6-4003-9a45-be2736e107a4", "node_type": "1", "metadata": {}, "hash": "3670800a23e255a973f913b97915f970f9e4cd5b2b2ee480beb335f6b16b3c66", "class_name": "RelatedNodeInfo"}}, "hash": "6b4e726c506ccadbe86cf6b16450dd62f245973bbe81fa5cb0986ef0b4872716", "text": "To recap, .reduce() is similar to .map(), and also runs a function (passed as an arrow function to reduce) on each item in the original array. However, instead of providing the item itself as the argument of the arrow function, .reduce() provides two arguments. The first result contains the last value returned. The next argument (which we restructure as { tags }) is the current array item that it is looping over. This allows us to do some powerful things in JavaScript. For example, we can add all the values in an array: [1,2,3,4,5,6,7,8].reduce((result, number) => result + number), 0); which will return 36.\n\nIn our case, we are destructuring only the tags array from each object in our array (although the other properties still exist on the object).\n\nWe then use the filter method to create a new array that contains only the tag items that are not already in the existing result. The .filter() method works similar to .map() and .reduce() as it returns a new array, but items from the original array are only copied over if the arrow function executed on the particular item returns true. For example [21, 9, 40, 0, 3, 11].filter(number => number < 10) will return [9, 0, 3].\n\nIn our function, we use the includes() method to determine if a tag already exists in results. If it does, it will return true; if not, false.\n\nWe then modify the result of our .reduce() method by combining the newly created array with the existing result values. If the newly created array is empty (if it has no tags or all its tags are already present in result), then an empty array will be added to result (ie keeping result as is).\n\nIn addition to the arrow function that we pass to .reduce(), we also need to pass a second argument. This second argument determines the result value when the reduce() method starts. In our case, we want it be an empty array ([]).\n\nNow, since we're only getting the string value of the tags themselves in the result of .reduce(), we still need to wrap them in actual HTML. We do this by passing the results to a .map() method that simply wraps them in an <options> HTML element.\n\nThen we pass another expression into the interpolation of this template literal. In this case, the expression simply capitalizes the first character of the tag value by means of selecting it and running .toUpperCase() on it and then interpolating the rest of the value after it. .slice(1) extracts all characters after the first one. For example, engineering will be converted to Engineering.\n\nLastly, we run .join('') on the final array to turn it into one big HTML string.\n\nThe above should replace the inner HTML inside existingTagsNode with something like:\n\nexistingTagsNode\n\ninnerHTML\n\noption\n\nEngineering\n\n</\n\noption\n\noption\n\nHeadphones\n\n</\n\noption\n\noption\n\nWellness\n\n</\n\noption\n\noption\n\nOcean\n\n</\n\noption\n\noption\n\nOffice\n\n</\n\noption\n\noption\n\nCoding\n\n</\n\noption\n\noption\n\nDesk\n\n</\n\noption\n\noption\n\nBoxing\n\n</\n\noption\n\noption\n\nLab\n\n</\n\noption\n\nAt the end, we automatically trigger the updateHTML function to make sure that we are showing the correct pins.\n\nFiltering Displayed Pins\u200b\n\nLet's create our last core function before we move on to event handlers. This function updates the HTML being displayed to the user based on a single text value (passed directly to the function). This value will correspond to the input of the filter field in our HTML:\n\nfunction\n\napplyFilter\n\nfilter\n\nif\n\nfilter\n\ntrim\n\n===\n\n\"\"\n\nreturn\n\nupdateHTML\n\nconst\n\narray\n\nfilter\n\nsplit\n\n\",\"\n\nmap\n\ntext\n\n=>\n\ntext\n\ntrim\n\nmap\n\ntext\n\n=>\n\ntext\n\ntoLowerCase\n\nconst\n\nfilteredPins\n\npins\n\nfilter\n\ntags\n\n=>\n\nconst\n\nmatchedTags\n\ntags\n\nfilter\n\ntag\n\n=>\n\narray\n\nincludes\n\ntag\n\nreturn\n\nmatchedTags\n\nlength\n\n>=\n\narray\n\nlength\n\nupdateHTML\n\nfilteredPins\n\nHowever, if the string passed by means of filter is not empty, we start by turning it into a variable called array that can be looped over when comparing tags. We do this to allow users to pass chained filters into a single string by means of separating them by commas (,), for example \"Engineering, Office, Lab\". To transform this into a useable array value, we will:\n\nRun split on the string.", "start_char_idx": 15331, "end_char_idx": 19446, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "50e49fbe-d3d6-4003-9a45-be2736e107a4": {"__data__": {"id_": "50e49fbe-d3d6-4003-9a45-be2736e107a4", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "57233d82-204e-4353-9f09-af84bd98cbd5", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "6b4e726c506ccadbe86cf6b16450dd62f245973bbe81fa5cb0986ef0b4872716", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab47a234-5f99-4a6f-b531-4942712b4e1b", "node_type": "1", "metadata": {}, "hash": "5b9490336a8f5e518e700088282ae3d3c0393c2b2cebb34c00c027a02f003ef1", "class_name": "RelatedNodeInfo"}}, "hash": "3670800a23e255a973f913b97915f970f9e4cd5b2b2ee480beb335f6b16b3c66", "text": "We do this to allow users to pass chained filters into a single string by means of separating them by commas (,), for example \"Engineering, Office, Lab\". To transform this into a useable array value, we will:\n\nRun split on the string. This breaks the string into an array, with the argument passed being used as the point of division (essentially the opposite of .join()). This means that our example above will be transformed into the following array: [\"Engineering\", \" Office\", \" Lab\"]\n\nThe last two items in the array have spaces before them, so they won't match any of our tags \u2013\" Office\" is not the same as \"Office\" according to JavaScript. We use .map() and the trim() method again to remove any whitespace around our tags. This should also get rid of random spaces added by users.\n\nWe also don't want our filtering to be case sensitive, so we run .map() over the array and covert all tags to lowercase (since we are keeping everything as lowercase in our JavaScript).\n\nIn addition to the above, we have created another array. This array, titled filteredPins is a duplicate of the default pins array, but we have removed all the objects that do not have tags that match any items in array. To create this array, we:\n\nRun the filter() method on our pins array and pass an arrow function that automatically destructures the tags array from each object in pins.\n\nRun a second nested filter inside the arrow function on the tags property from the pin object.\n\nWithin this nested arrow function, we loop over each tag assigned to an object and use .includes() to see if it matches one of the values created in our initial array variable above (based on the filter string that was passed to the function).\n\nThe nested filter() will only return tags that actually match the filter array, so we can say that if it returns 0 items (checked with .length) then none of the tags in the object match any items in our reference array variable. This object should not be added to our new filteredPins array.\n\nOn the other hand, if there is at least one item in the matchingTags array, we can say that at least one tag matches our original filter array. This means that the object should be copied to the new filteredPins array.\n\nAfter only the objects that have matching tags are copied to filteredPins, we run updateHTML passing filteredPins as the array to use (using the providePins parameter created in the updateHTMl function). This means that the default pins variable won't be used, replaced by the filtered pins array that we pass.\n\nTaking this approach also means that we can simply run the default updateHTML function (without passing an argument) if the filter value changes to empty, essentially syncing up the displayed HTML with the full pins array again.\n\nEvent Specific Functions\u200b\n\nWe created three modular, low-level tasks by means of functions. These can be reused throughout our JavaScript logic and abstract away common tasks. However, at this point, we've only declared these functions so nothing will happen if we run our JavaScript up until this point. To actually use the above functions, we need to trigger them in response to actions performed by users.\n\nThis is commonly done by adding event listeners directly to HTML nodes. For example in the case of our \"Add New Image\" button, we want to remove the hidden CSS class from our dialog element. We can do the following:\n\ndialogStartNode\n\naddEventListener\n\n\"click\"\n\n=>\n\ndialogNode\n\nclassList\n\nremove\n\n\"hidden\"\n\ndialogNode\n\nopen\n\ntrue\n\nThis is a common approach to handling user-triggered events, but it becomes tricky if we relinquish the creation of our HTML to JavaScript itself. This is because when we recreate HTML via JavaScript (as we do with updateHTML), we need to manually re-add each individual event listener. We also need to manually remove all previous event listeners (via removeEventListener ) before swapping out the HTML. Otherwise, as outlined by Nolan Lawson, we can cause unexpected memory leaks. This is not a problem with our example because the dialogStartNodenever gets replaced. However, when we do replace HTML, this approach introduces large amounts of overhead.\n\nLuckily, the HTML DOM itself gives us a way around this. Most modern browsers do event propagation. This means that if an event is fired, it ripples up the entire HTML tree until it is captured or reaches the top-level <body> element.\n\nThis means we can get around placing event listeners directly on our HTML elements by rather adding them to the highest level parent the HTML <body> element.", "start_char_idx": 19212, "end_char_idx": 23764, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab47a234-5f99-4a6f-b531-4942712b4e1b": {"__data__": {"id_": "ab47a234-5f99-4a6f-b531-4942712b4e1b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "50e49fbe-d3d6-4003-9a45-be2736e107a4", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "3670800a23e255a973f913b97915f970f9e4cd5b2b2ee480beb335f6b16b3c66", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9060a2f3-69eb-4bbe-b5d0-860c2a8a7385", "node_type": "1", "metadata": {}, "hash": "6af32eb21168cacae05bf57d7f8cc8b8eed2ecd52ed337064c4d573d3a05c4ac", "class_name": "RelatedNodeInfo"}}, "hash": "5b9490336a8f5e518e700088282ae3d3c0393c2b2cebb34c00c027a02f003ef1", "text": "This is because when we recreate HTML via JavaScript (as we do with updateHTML), we need to manually re-add each individual event listener. We also need to manually remove all previous event listeners (via removeEventListener ) before swapping out the HTML. Otherwise, as outlined by Nolan Lawson, we can cause unexpected memory leaks. This is not a problem with our example because the dialogStartNodenever gets replaced. However, when we do replace HTML, this approach introduces large amounts of overhead.\n\nLuckily, the HTML DOM itself gives us a way around this. Most modern browsers do event propagation. This means that if an event is fired, it ripples up the entire HTML tree until it is captured or reaches the top-level <body> element.\n\nThis means we can get around placing event listeners directly on our HTML elements by rather adding them to the highest level parent the HTML <body> element. However, since all events in our HTML will set off the event listener added to the <body> element, we need to be able to distinguish between events. This is easy and only requires us to look at the target property of an event's dispatched object.\n\nWith this approach, we can create three separate functions that handle all our click, input and submit events on the page. Note these functions are not the event listeners themselves, but are used to respond to the event listeners by being passed as a callback to, for example, document.body.addEventListener('input', handleInput).\n\nHandling Input Events\u200b\n\nLet's start with a piece of interaction that seems like it might require a fair bit of complexity: input. Because things need to update real-time as our input events fire, the associated logic might be heavily nested. In fact, both cases of where we listen to input events are actually pretty trivial because we have already done most of the work with our previous core functions. However, we need to take into account character escaping.\n\nWe allow users to enter values into our inputs without restriction, so we should prevent them from entering anything that might be harmful or break the functionality of our pinboard. For example, if a user enters console.log('You've been hacked!') into the input, we want to prevent this value from accidentally getting executed by JavaScript as code (thereby logging \"You've been hacked\" to the browser console).\n\nGoing back to one of our examples at the very top where we discussed how an array can be changed into a string with JSON.stringify (in order to save it into localStorage), we looked at the following example:\n\n\"[{id:\\\"1222032154865\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580983218765-f663bec07b37?w=600\\\",tags:[\\\"engineering\\\"],},{id:\\\"1446853891031\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1572932491814-4833690788ad?w=600\\\",tags:[\\\"headphones\\\",\\\"ocean\\\",\\\"wellness\\\"],},{id:\\\"1592795411730\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1580894908361-967195033215?w=600\\\",tags:[\\\"office\\\",\\\"coding\\\",\\\"desk\\\"],},{id:\\\"752612206512\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1584464491033-06628f3a6b7b?w=600\\\",tags:[\\\"boxing\\\",\\\"wellness\\\"],},{id:\\\"1610517475378\\\",image:\\\"https:\\/\\/images.unsplash.com\\/photo-1581094271901-8022df4466f9?w=600\\\",tags:[\\\"lab\\\",\\\"engineering\\\"],},]\"\n\nYou'll see that all our double quotation marks (\") have backslashes (\\) before them. This tells JavaScript that the double quote symbol should be treated as the string character \" and not as an actual JavaScript syntax symbol. If we didn't escape the quotes, JavaScript would actually close the above string prematurely, since the \" symbol is used in JavaScript to end string declarations.\n\nThis means that JavaScript would end the string when it reaches the double quote as follows:\n\n\"[{id:\"\n\nWe will be escaping some of the data provided by users, so it's important to understand exactly why we are doing this.", "start_char_idx": 22861, "end_char_idx": 26739, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9060a2f3-69eb-4bbe-b5d0-860c2a8a7385": {"__data__": {"id_": "9060a2f3-69eb-4bbe-b5d0-860c2a8a7385", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ab47a234-5f99-4a6f-b531-4942712b4e1b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "5b9490336a8f5e518e700088282ae3d3c0393c2b2cebb34c00c027a02f003ef1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c4fdada0-9310-4f20-b335-b2143190fed2", "node_type": "1", "metadata": {}, "hash": "f1cc4167daa4cd853250992b2f6f6ec6e2da22f57717f747a28c8fe9fa1c3059", "class_name": "RelatedNodeInfo"}}, "hash": "6af32eb21168cacae05bf57d7f8cc8b8eed2ecd52ed337064c4d573d3a05c4ac", "text": "This tells JavaScript that the double quote symbol should be treated as the string character \" and not as an actual JavaScript syntax symbol. If we didn't escape the quotes, JavaScript would actually close the above string prematurely, since the \" symbol is used in JavaScript to end string declarations.\n\nThis means that JavaScript would end the string when it reaches the double quote as follows:\n\n\"[{id:\"\n\nWe will be escaping some of the data provided by users, so it's important to understand exactly why we are doing this. Let's look at the function itself:\n\nfunction\n\nhandleInput\n\nevent\n\nif\n\nevent\n\ntarget\n\n===\n\nfilterInputNode\n\napplyFilter\n\nescape\n\nevent\n\ntarget\n\nvalue\n\nelse\n\nif\n\nevent\n\ntarget\n\n===\n\ndialogImageNode\n\n||\n\nevent\n\ntarget\n\n===\n\ndialogTagsNode\n\nif\n\ndialogImageNode\n\nvalue\n\ntrim\n\n!==\n\n\"\"\n\n&&\n\ndialogTagsNode\n\nvalue\n\ntrim\n\n!==\n\n\"\"\n\ndialogSubmitNode\n\ndisabled\n\nfalse\n\nelse\n\ndialogSubmitNode\n\ndisabled\n\ntrue\n\nWe can see that there are two types of event listeners that we are interested in:\n\nWhere the target is the same as the filterInputNode input.\n\nWhere the target is either the dialogImageNode or dialogTagsNode inputs.\n\nThe actual card filtering event is simple; we check if it was the filterInputNode that triggered input and if so, we pass the value of the input to the applyFilter function. However, we want to add another piece of functionality to this behaviour. Because the fields used in our dialog are empty when our page loads, we also want to set the button to add the values as a pin to disabled. However, having a button that is indefinitely disabled is useless, so we want to check the values whenever either the image URL or entered tags change. Only once both of these are full do we enable the button. We do this by:\n\nRemoving all surrounding whitespace from the both input field values by means of .trim().\n\nIf neither of these values are empty (i.e. they do not trim to '' ), we set the disabled state of the submit button to false (allowing it to be clicked).\n\nIf either of the latter return '' when trimmed, we will either keep the button disabled or set it back to disabled.\n\nHandling Click Events\u200b\n\nA click event listener is one of the most common event listeners on the web. It is triggered whenever a user presses anything in our HTML (this includes touch events on mobile). Currently, there are four types of click events that we are interested in:\n\nA user clicks on the Add New Image\" button.\n\nA user clicks outside of the dialog form.\n\nA user clicks on the remove button (x) on top of a pinned image.\n\nA user clicks on one of the tag buttons on top of a pinned image.\n\nWe can cover all of these with the following function:\n\nfunction\n\nhandleClick\n\nevent\n\nif\n\nevent\n\ntarget\n\n===\n\ndialogStartNode\n\n||\n\nevent\n\ntarget\n\n===\n\ndialogNode\n\ndialogNode\n\nclassList\n\ntoggle\n\n\"hidden\"\n\ndialogNode\n\nopen\n\ndialogNode\n\nopen\n\nelse\n\nif\n\nevent\n\ntarget\n\nclassList\n\ncontains\n\n\"remove\"\n\nupdatePins\n\npins\n\nfilter\n\nid\n\n=>\n\nid\n\n!==\n\nevent\n\ntarget\n\nvalue\n\napplyFilter\n\nfilterInputNode\n\nvalue\n\nelse\n\nif\n\nevent\n\ntarget\n\nclassList\n\ncontains\n\n\"tag\"\n\nfilterInputNode\n\nvalue\n\nevent\n\ntarget\n\ninnerText\n\napplyFilter\n\nfilterInputNode\n\nvalue\n\nLet's go through this function step by step:\n\nlogical not operator). While the last attribute has no effect on what is shown to users, it is helpful for search engines and accessibility devices.\n\nThis means that we can once again use the .filter() method and tell it to create a new array that only contains objects that do not match the supplied ID (using the value attribute). We then pass this new array directly to updatePins and the pin is removed from the HTML and our pins array. After updating the pins, we also re-apply the current filter value (if there is one) so the HTML update that removed the pin does not break any current filtering condition.\n\nLastly, if our event is neither of these, then we can check if the target has a class of tag. If so, then we know that we are dealing with one of the tags buttons overlaid on top of a pin (when a user hovers over a pin). This means that we can use its inner text to check the name of the tag that was clicked on, and override the current filtering input with this value. However, since we are doing this programmatically (and it is not triggered by the user), we need to manually trigger the input event.", "start_char_idx": 26212, "end_char_idx": 30533, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c4fdada0-9310-4f20-b335-b2143190fed2": {"__data__": {"id_": "c4fdada0-9310-4f20-b335-b2143190fed2", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9060a2f3-69eb-4bbe-b5d0-860c2a8a7385", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "6af32eb21168cacae05bf57d7f8cc8b8eed2ecd52ed337064c4d573d3a05c4ac", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d9516a7-603c-4f4e-80ab-b9183181a1d0", "node_type": "1", "metadata": {}, "hash": "21e36d71860a5328f5a3cdce5723d43ef7737ad011e1e37821ffb3d62fb5f48b", "class_name": "RelatedNodeInfo"}}, "hash": "f1cc4167daa4cd853250992b2f6f6ec6e2da22f57717f747a28c8fe9fa1c3059", "text": "We then pass this new array directly to updatePins and the pin is removed from the HTML and our pins array. After updating the pins, we also re-apply the current filter value (if there is one) so the HTML update that removed the pin does not break any current filtering condition.\n\nLastly, if our event is neither of these, then we can check if the target has a class of tag. If so, then we know that we are dealing with one of the tags buttons overlaid on top of a pin (when a user hovers over a pin). This means that we can use its inner text to check the name of the tag that was clicked on, and override the current filtering input with this value. However, since we are doing this programmatically (and it is not triggered by the user), we need to manually trigger the input event.\n\nHandling Submit Events\u200b\n\nLastly, we have the submit event function. This is fired whenever a form is submitted on our page. Because we only have one form on our page, we don't need to check where the event came from. We just execute the following logic:\n\nfunction\n\nhandleSubmit\n\nevent\n\nevent\n\npreventDefault\n\nconst\n\nid\n\nnew\n\nDate\n\ngetTime\n\ntoString\n\nconst\n\nimage\n\nencodeURI\n\ndialogImageNode\n\nvalue\n\ntrim\n\nconst\n\ntags\n\ndialogTagsNode\n\nvalue\n\nsplit\n\n\",\"\n\nmap\n\ntag\n\n=>\n\ntag\n\ntrim\n\nmap\n\ntag\n\n=>\n\nescape\n\ntag\n\nupdatePins\n\n...\n\npins\n\nid\n\nimage\n\ntags\n\napplyFilter\n\nfilterInputNode\n\nvalue\n\ndialogNode\n\nclassList\n\nadd\n\n\"hidden\"\n\ndialogNode\n\nopen\n\nfalse\n\ndialogImageNode\n\nvalue\n\n\"\"\n\ndialogTagsNode\n\nvalue\n\n\"\"\n\ndialogSubmitNode\n\ndisabled\n\ntrue\n\nBy default, when a form is submitted on a web page the page automatically refreshes (assuming that the data will be handled by the server). However, since we are using JavaScript to handle our logic (and not a server), we want to override this behaviour. Luckily, the submit event object includes a method (preventDefault) that we can run on the event itself to prevent this from happening.\n\nWe then need to create a unique id value to identify this new pin added to the pins array. We generate a unique id value by using the current date and time. We simply get the current date and time with new Date() and then run getTime() on it. The latter turns the created date object into a number of milliseconds that have passed since midnight 1 January 1970 (called the unix epoch in programming).\n\nThe implication here is that unless a user presses the submit button twice at the exact same millisecond, each of their pins will have a different unique value (based on when it was created).\n\nTo be technically correct, we should save our ID as a string, not a number, by running the .toString() method on our millisecond number. Although an amount of milliseconds looks like a number, when we use it as a unique ID it technically isn't a number anymore.\n\nThen we retrieve the URL value provided and run encodeURI() on it. Not only does encodeURI() escape characters (eg. turning ;,/?:@&=+$# into %3B%2C%2F%3F%3A%40%26%3D%2B%24%23), it also does this in a way that still makes it useable as a URL.\n\nWe then create the tags that were entered. This very closely resembles the logic we use in our applyFilter function, with the exception that we loop over the items afterwards and manually run the native JavaScript escape function on each item.\n\nNext, we create a new array by destructuring the current pins array and adding an object to it that uses the values we created above.\n\nWe manually trigger applyFilter to not break any filtering that is currently applied.\n\nWe close the dialog by making direct use of the dialog HTML element.\n\nWe reset all HTML elements inside the dialog to empty and disabled.\n\nExecuting Code\u200b\n\nWe've created all the logic required by our pinboard, but if we run our JavaScript up to this point, nothing will happen. This is because we only created the required data structures and functions that will be used by JavaScript. We need to action them. We do this using four lines of code:\n\ndocument\n\nbody\n\naddEventListener\n\n\"input\"\n\nhandleInput\n\ndocument\n\nbody\n\naddEventListener\n\n\"click\"\n\nhandleClick\n\ndocument\n\nbody\n\naddEventListener\n\n\"submit\"\n\nhandleSubmit\n\nupdatePins\n\nEach line is responsible for actioning a different function:\n\nWe attach an event listener to the HTML body element and tell it to fire handleInput when users input values into any input field.", "start_char_idx": 29747, "end_char_idx": 34051, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d9516a7-603c-4f4e-80ab-b9183181a1d0": {"__data__": {"id_": "1d9516a7-603c-4f4e-80ab-b9183181a1d0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "ef2dbed13568e56fdbcfd6dcda88271d836cab13176b883fd4033767309a44fa", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c4fdada0-9310-4f20-b335-b2143190fed2", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}, "hash": "f1cc4167daa4cd853250992b2f6f6ec6e2da22f57717f747a28c8fe9fa1c3059", "class_name": "RelatedNodeInfo"}}, "hash": "21e36d71860a5328f5a3cdce5723d43ef7737ad011e1e37821ffb3d62fb5f48b", "text": "We manually trigger applyFilter to not break any filtering that is currently applied.\n\nWe close the dialog by making direct use of the dialog HTML element.\n\nWe reset all HTML elements inside the dialog to empty and disabled.\n\nExecuting Code\u200b\n\nWe've created all the logic required by our pinboard, but if we run our JavaScript up to this point, nothing will happen. This is because we only created the required data structures and functions that will be used by JavaScript. We need to action them. We do this using four lines of code:\n\ndocument\n\nbody\n\naddEventListener\n\n\"input\"\n\nhandleInput\n\ndocument\n\nbody\n\naddEventListener\n\n\"click\"\n\nhandleClick\n\ndocument\n\nbody\n\naddEventListener\n\n\"submit\"\n\nhandleSubmit\n\nupdatePins\n\nEach line is responsible for actioning a different function:\n\nWe attach an event listener to the HTML body element and tell it to fire handleInput when users input values into any input field.\n\nWe attach an event listener to the HTML body element and tell it to fire handleClick when a user clicks on anything in our HTML.\n\nWe attach an event listener to the HTML body element and tell it to fire handleSubmit when a user submits a form created in our HTML.\n\nWe manually trigger updatePins in order to create the HTML for the pins that have been loaded by JavaScript.\n\nWhere next\u200b\n\nWe've touched on many concepts and native functionality of JavaScript itself. We've explained each concept as we went.\n\nIf you want a deeper understanding of something, take a look at the Mozilla Developer Network Glossary page.\n\nYou can extend the project by starting from our example repl below. For example, you can add more advanced tagging functionality to allow the user to specify multiple tags and say whether they want to show cards that match all tags (an \"AND\" search) or any cards (an \"OR\" search).\n\nIf you want to add back-end functionality, you can add a database and use sign-up so that people can view their pins from any device, instead of only the one where they originally saved them.\n\n< Previous: Pinboard project Part 1: HTML & CSS\n\nNext: Miscellanious >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nUpdating HTML and CSS\n\nJavaScript Code\n\nHandling DataLocal StorageHTML DOM Nodes\n\nFunctionsUpdating Displayed HTMLUpdating Saved PinsFiltering Displayed Pins\n\nEvent Specific FunctionsHandling Input EventsHandling Click EventsHandling Submit Events\n\nExecuting Code\n\nWhere next", "start_char_idx": 33142, "end_char_idx": 35542, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"19e63b7f-34d7-4615-88d9-70a29b56e0bc": {"node_ids": ["fcdd9449-6e3a-482e-95bc-5702b5353d60", "87296c5a-99e3-4b6b-9265-1d35a274b566", "5115754b-099e-41b3-b4ed-118330725c3a", "bc00ae73-bf35-4347-bf92-cfa7584b06f6", "14bdc755-50ca-4111-b7bc-5b2bede0e40c", "57233d82-204e-4353-9f09-af84bd98cbd5", "50e49fbe-d3d6-4003-9a45-be2736e107a4", "ab47a234-5f99-4a6f-b531-4942712b4e1b", "9060a2f3-69eb-4bbe-b5d0-860c2a8a7385", "c4fdada0-9310-4f20-b335-b2143190fed2", "1d9516a7-603c-4f4e-80ab-b9183181a1d0"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/html-css-js/pinboard-project-part-2.html"}}}, "docstore/metadata": {"fcdd9449-6e3a-482e-95bc-5702b5353d60": {"doc_hash": "5938df22bcea4de9027638e1c3bff66f1c4154a1e5866ab7598dbb3bb3b26f5d", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "87296c5a-99e3-4b6b-9265-1d35a274b566": {"doc_hash": "01c48c6b12e2b24dad4361c7287a6661164ef0c73e93c98eaa29c15e891e96d1", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "5115754b-099e-41b3-b4ed-118330725c3a": {"doc_hash": "b7a129a3ba70731b4fc06dbd7aafac9da365ae1ee43bb82107cf555077e39954", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "bc00ae73-bf35-4347-bf92-cfa7584b06f6": {"doc_hash": "46ea1c128058b4251018ff126228e04623f2c38435b7689e18347d108ebe5940", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "14bdc755-50ca-4111-b7bc-5b2bede0e40c": {"doc_hash": "926cb659ef0b1e13fcc3632676097e92c2d57958abe596137652a0a82733fca8", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "57233d82-204e-4353-9f09-af84bd98cbd5": {"doc_hash": "6b4e726c506ccadbe86cf6b16450dd62f245973bbe81fa5cb0986ef0b4872716", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "50e49fbe-d3d6-4003-9a45-be2736e107a4": {"doc_hash": "3670800a23e255a973f913b97915f970f9e4cd5b2b2ee480beb335f6b16b3c66", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "ab47a234-5f99-4a6f-b531-4942712b4e1b": {"doc_hash": "5b9490336a8f5e518e700088282ae3d3c0393c2b2cebb34c00c027a02f003ef1", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "9060a2f3-69eb-4bbe-b5d0-860c2a8a7385": {"doc_hash": "6af32eb21168cacae05bf57d7f8cc8b8eed2ecd52ed337064c4d573d3a05c4ac", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "c4fdada0-9310-4f20-b335-b2143190fed2": {"doc_hash": "f1cc4167daa4cd853250992b2f6f6ec6e2da22f57717f747a28c8fe9fa1c3059", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}, "1d9516a7-603c-4f4e-80ab-b9183181a1d0": {"doc_hash": "21e36d71860a5328f5a3cdce5723d43ef7737ad011e1e37821ffb3d62fb5f48b", "ref_doc_id": "19e63b7f-34d7-4615-88d9-70a29b56e0bc"}}}