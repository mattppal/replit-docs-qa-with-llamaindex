{"docstore/data": {"ed6f09a1-2d22-46d7-8adc-17aa51b47c0f": {"__data__": {"id_": "ed6f09a1-2d22-46d7-8adc-17aa51b47c0f", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "18227091-a829-4e0e-95a4-d4f3f6d0016f", "node_type": "1", "metadata": {}, "hash": "0a4e95b54516fb38ea29eb543f599fc10801cfaab202475334dd1bd47f447995", "class_name": "RelatedNodeInfo"}}, "hash": "4a3d0d163e7e9ca65ddf1f5fc4d5320644f0bf31b3b46fcacdf9b64865750b35", "text": "for\n\ndir\n\nin\n\n\"UPLOAD_DIR\"\n\n\"OUTPUT_DIR\"\n\n\"PLOT_DIR\"\n\nif\n\nnot\n\nos\n\npath\n\nexists\n\nsite\n\nconfig\n\ndir\n\nos\n\nmkdir\n\nsite\n\nconfig\n\ndir\n\nHere we define our directories and create them if they don't exist, using our Flask app's configuration dictionary.\n\nNow let's restrict the kinds of files that can be uploaded, to prevent users from uploading the wrong files. Enter the following code just below the lines you added above:\n\nALLOWED_EXTENSIONS\n\n'xlsx'\n\n'xls'\n\n'ods'\n\ndef\n\nallowed_file\n\nfilename\n\nreturn\n\n'.'\n\nin\n\nfilename\n\nand\n\nfilename\n\nrsplit\n\n'.'\n\nlower\n\nin\n\nALLOWED_EXTENSIONS\n\nThis code comes from Flask's file upload pattern. The allowed_file function will return True if the filename passed to it has an extension and that extension is in our set of allowed extensions, permitting spreadsheet files only.\n\nNow let's create our application's homepage. Find the index() function definition, and replace pass with the function body shown below.\n\n@site\n\nroute\n\n'/'\n\ndef\n\nindex\n\nreturn\n\n\"\"\"\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Sales Report Generator</title>\n\n</head>\n\n<body>\n\n<h1>Upload sales spreadsheet</h1>\n\n<form action=\"/process\" method=\"post\" enctype=\"multipart/form-data\">\n\n<input type=\"file\" name=\"file\">\n\n<input type=\"submit\" value=\"Generate report\">\n\n</form>\n\n</body>\n\n</html>\n\n\"\"\"\n\nFeel free to spice up this bare-bones upload page with your own text and styling. Once you're satisfied, we can move on to the process route, which will handle files uploaded by this form. Find the upload_and_process() function definition and replace pass with the function body below.\n\n@site\n\nroute\n\n'/process'\n\nmethods\n\n\"POST\"\n\ndef\n\nupload_and_process\n\nif\n\n\"file\"\n\nnot\n\nin\n\nrequest\n\nfiles\n\n# invalid request\n\nreturn\n\n\"Invalid request.\"\n\nfile\n\nrequest\n\nfiles\n\n'file'\n\nif\n\nfile\n\nfilename\n\n==\n\n''\n\n# no file uploaded by user\n\nreturn\n\n\"No file selected.\"\n\nif\n\nfile\n\nand\n\nallowed_file\n\nfile\n\nfilename\n\nfilename\n\nsecure_filename\n\nfile\n\nfilename\n\nfile\n\nsave\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n'UPLOAD_DIR'\n\nfilename\n\ntry\n\nprocess_spreadsheet\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n'UPLOAD_DIR'\n\nfilename\n\nexcept\n\nException\n\nas\n\nprint\n\ntraceback\n\nprint_exc\n\nreturn\n\n\"An error occurred. Please ensure that your spreadsheet is correctly formatted and try again.\"\n\nelse\n\nreturn\n\nsend_from_directory\n\ndirectory\n\nsite\n\nconfig\n\n\"OUTPUT_DIR\"\n\npath\n\n\"report.pdf\"\n\nThe first two if statements in this code handle errors: if an improper or empty POST request is made to the /process route, it will return an error.\n\nThe final if statement checks whether the uploaded file has an allowed extension, using the secure_filename utility we imported above to sanitize its filename, and saves it to our uploads directory.\n\nOur code then attempts to process the spreadsheet. This is a complex process that can throw errors, if, for example, users upload spreadsheets in unexpected formats, so we will use Python's error handling to recover from such errors gracefully.\n\nIf spreadsheet processing fails, our web application will show the web user a short and user-friendly error message while displaying the real error for us in the console. Real error messages often contain sensitive information, such as directory names and lines of code, and can be confusing for non-technical users, so it's better to avoid displaying them in our web interface.\n\nIf spreadsheet processing succeeds, it will send the newly created PDF to the user.\n\nFor now, if you run your repl and try to upload spreadsheets, it will lead to an error, as we have not yet defined the process_spreadsheet() function. We'll do so in the next section.\n\nProcessing spreadsheets with pandas\u200b\n\nNow that we've created our interface, we can start doing some data processing. We'll be using this spreadsheet of fruit sales as an example. Download it now and take a look inside. You'll see two worksheets: one with sales data, and one with inventory data.\n\nReturn to Replit and at the top of main.py, add the following lines:\n\nimport\n\npandas\n\nas\n\npd\n\nimport\n\nnumpy\n\nas\n\nnp\n\nimport\n\nopenpyxl\n\nPandas is a widely used Python data analysis library, commonly used by data scientists. It provides a number of useful functions and objects for working with series and tabular data, most notably the DataFrame object. NumPy provides mathematical functions for use with arrays and matrices, and is often used together with pandas.", "start_char_idx": 0, "end_char_idx": 4340, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "18227091-a829-4e0e-95a4-d4f3f6d0016f": {"__data__": {"id_": "18227091-a829-4e0e-95a4-d4f3f6d0016f", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ed6f09a1-2d22-46d7-8adc-17aa51b47c0f", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "4a3d0d163e7e9ca65ddf1f5fc4d5320644f0bf31b3b46fcacdf9b64865750b35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e909cde1-6a68-4c99-9651-d79e943736e0", "node_type": "1", "metadata": {}, "hash": "ebc0838b938a2aa5d69f78b0cc3c58aa47e2b564cff35df541bbf74f98c32240", "class_name": "RelatedNodeInfo"}}, "hash": "0a4e95b54516fb38ea29eb543f599fc10801cfaab202475334dd1bd47f447995", "text": "We'll do so in the next section.\n\nProcessing spreadsheets with pandas\u200b\n\nNow that we've created our interface, we can start doing some data processing. We'll be using this spreadsheet of fruit sales as an example. Download it now and take a look inside. You'll see two worksheets: one with sales data, and one with inventory data.\n\nReturn to Replit and at the top of main.py, add the following lines:\n\nimport\n\npandas\n\nas\n\npd\n\nimport\n\nnumpy\n\nas\n\nnp\n\nimport\n\nopenpyxl\n\nPandas is a widely used Python data analysis library, commonly used by data scientists. It provides a number of useful functions and objects for working with series and tabular data, most notably the DataFrame object. NumPy provides mathematical functions for use with arrays and matrices, and is often used together with pandas. Finally, openpyxl is the library pandas uses for reading spreadsheet files \u2013 we won't use this library directly, but we need to include it in our imports so that our repl installs it.\n\nDefine the process_spreadsheet() function above the index() function definition. Use the following code:\n\ndef\n\nprocess_spreadsheet\n\nfilename\n\n# Wrangle spreadsheet\n\nspreadsheet\n\npd\n\nread_excel\n\nfilename\n\nsheet_name\n\n\"Sales\"\n\n\"Inventory\"\n\nsale_data\n\nspreadsheet\n\n\"Sales\"\n\nitem_data\n\nspreadsheet\n\n\"Inventory\"\n\nHere we use pandas's read_excel function to import each worksheet in our spreadsheet as a DataFrame object. The DataFrame, being a tabular structure, shares a number of similarities with spreadsheets, as well as tables in an SQL database.\n\nSpeaking of SQL tables, the next thing we're going to do is join sale_data with item_data, using the item code column. Add the line below to the bottom of process_spreadsheet():\n\n# Join item data to sale data\n\nsale_data\n\nsale_data\n\njoin\n\nitem_data\n\nset_index\n\n\"Code\"\n\non\n\n\"Item Code\"\n\nhow\n\n\"inner\"\n\nThis code will give each row of our sales data the appropriate item information, including the item's name, cost price and sale price. If you'd like to learn more about combining DataFrames, this RealPython tutorial provides an overview.\n\nTo see what the newly joined sales DataFrame looks like, add the following line below the definition of sale_data:\n\nprint\n\nsale_data\n\nThen run your repl, upload the sales-july-2021.xlsx spreadsheet, click \"Generate report\" after selecting the spreadsheet, and watch the Replit console. You should see something like this:\n\nCalculating insights from data\u200b\n\nNow that we've integrated our data, let's generate some insights to report on. We'd like to make a report that answers the following questions:\n\nWhich sales person brought in the most revenue?\n\nWhich sales person brought in the most profit?\n\nWhat was our most discounted item on average?\n\nHow much of each item do we have left in stock?\n\nTo answer the first two questions, we'll need to group our data by sales person. To answer the last two questions, we'll need to group our data by item. Let's do this now, using DataFrame's groupby method. Add the below code to the bottom of process_spreadsheet():\n\n# Group data\n\nsales_by_salesperson\n\nsale_data\n\ngroupby\n\n\"Sales Person\"\n\nsales_by_item\n\nsale_data\n\ngroupby\n\n\"Item Name\"\n\nNow we can use our grouped data to calculate the answer to each question. We'll add the answers to the relevant dataframes as we go.\n\nRevenue by salesperson\u200b\n\nWe can get the revenue for each sale with the below calculation:\n\nSale Revenue = Quantity Sold * (Sale Price * (1 - Discount))\n\nBy making use of the DataFrame's operator overloading, we can apply this calculation to every column at once. Add the following code to the bottom of your process_spreadsheet() function:\n\n# 1. Which sales person brought in the most revenue?\n\n# 1.1 Calculate revenue for each sale\n\nsale_data\n\n\"Sale Revenue\"\n\nsale_data\n\n\"Quantity Sold\"\n\nsale_data\n\n\"Sale Price\"\n\nsale_data\n\n\"Discount\"\n\nNote that we're using a backslash (\\) to split a single line of code over two physical lines, for improved readability. Don't confuse this with the division operator (forward slash: /).\n\nIf we look at our data now (use a print statement like the one we used earlier to print to the console and rerun your repl), you'll notice that the Sale Revenue column contains more than two decimal places.\n\nSeeing as this is a currency column, we want to round it down to the nearest hundredth.", "start_char_idx": 3545, "end_char_idx": 7845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e909cde1-6a68-4c99-9651-d79e943736e0": {"__data__": {"id_": "e909cde1-6a68-4c99-9651-d79e943736e0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "18227091-a829-4e0e-95a4-d4f3f6d0016f", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "0a4e95b54516fb38ea29eb543f599fc10801cfaab202475334dd1bd47f447995", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "eb101574-74cc-40f2-8e85-9219ee0f07be", "node_type": "1", "metadata": {}, "hash": "5d66efdf580956dafa659618ced6a6138594d516f80acd7610a0fb7eae602516", "class_name": "RelatedNodeInfo"}}, "hash": "ebc0838b938a2aa5d69f78b0cc3c58aa47e2b564cff35df541bbf74f98c32240", "text": "Add the following code to the bottom of your process_spreadsheet() function:\n\n# 1. Which sales person brought in the most revenue?\n\n# 1.1 Calculate revenue for each sale\n\nsale_data\n\n\"Sale Revenue\"\n\nsale_data\n\n\"Quantity Sold\"\n\nsale_data\n\n\"Sale Price\"\n\nsale_data\n\n\"Discount\"\n\nNote that we're using a backslash (\\) to split a single line of code over two physical lines, for improved readability. Don't confuse this with the division operator (forward slash: /).\n\nIf we look at our data now (use a print statement like the one we used earlier to print to the console and rerun your repl), you'll notice that the Sale Revenue column contains more than two decimal places.\n\nSeeing as this is a currency column, we want to round it down to the nearest hundredth. We'll write a quick inner function for this now, by placing the following code just below def process_spreadsheet(filename): above:\n\ndef\n\nfloor_currency\n\nvalue\n\n# Round down to two decimal places\n\nreturn\n\nnp\n\nfloor\n\nvalue\n\n100\n\n100\n\nHere we use NumPy's floor() function to round values down. As floor() rounds to integer values, we can multiply and then divide by 100 to get two decimal places.\n\nNow that we've added that function, we can return to our calculations at the bottom of the process_spreadsheet() function. Add the line below:\n\n# 1.2 Round down to 2 decimal places\n\nsale_data\n\n\"Sale Revenue\"\n\nsale_data\n\n\"Sale Revenue\"\n\napply\n\nfloor_currency\n\nThis uses the DataFrame.apply() method to run floor_currency() on every row in the Sale Revenue Column. This is similar to map() in standard Python.\n\nFinally, we'll use our sales_by_salesperson grouping to calculate each sales person's total revenue, and sort them from highest to lowest. Add the following code:\n\n# 1.3 Group sales by sales person and sum sale revenue\n\nrevenue_by_salesperson\n\nsales_by_salesperson\n\n\"Sale Revenue\"\n\nsum\n\nsort_values\n\nascending\n\nFalse\n\nNote that sales_by_salesperson recognises the Sales Revenue column even though we defined it before that column was added. We can think of objects returned by groupby as filters or views on DataFrames, rather than as DataFrames in and of themselves.\n\nProfit by salesperson\u200b\n\nWe can get the profit for each sale using the following calculation:\n\nSale Profit = Sale Revenue - (Cost Price * Quantity Sold)\n\nThe code for this calculation is largely similar to the code used for calculating revenue by sales person. Add it beneath the code you inserted above.\n\n# 2. Which sales person brought in the most profit?\n\n# 2.1 Calculate profit for each sale\n\nsale_data\n\n\"Sale Profit\"\n\nsale_data\n\n\"Sale Revenue\"\n\nsale_data\n\n\"Cost Price\"\n\nsale_data\n\n\"Quantity Sold\"\n\n# 2.2 Round down to 2 decimal places\n\nsale_data\n\n\"Sale Profit\"\n\nsale_data\n\n\"Sale Profit\"\n\napply\n\nfloor_currency\n\n# 2.3 Group sales by sales person and sum sale profit\n\nprofit_by_salesperson\n\nsales_by_salesperson\n\n\"Sale Profit\"\n\nsum\n\nsort_values\n\nascending\n\nFalse\n\nAverage discount by item\u200b\n\nThis is a simple one: we just need the average of each item's Discount values. We can do this in one line of code, as below:\n\n# 3. What was our most discounted item on average?\n\naverage_discounts\n\nsales_by_item\n\n\"Discount\"\n\nmean\n\nsort_values\n\nascending\n\nFalse\n\nRemaining stock by item\u200b\n\nHere we'll need to get the Quantity Sold per item from sales_data and subtract it from the Stock of each item in item_data. Add the following code:\n\n# 4. How much of each item do we have left in stock?\n\n# 4.1 Sort item_data by name to match sales_by_item\n\nitem_data\n\nitem_data\n\nsort_values\n\n\"Item Name\"\n\n# 4.2 Calculate total sold of each item and add it to item_data as a new column\n\nitem_data\n\nitem_data\n\nassign\n\nStockSold\n\nsales_by_item\n\n\"Quantity Sold\"\n\nsum\n\nvalues\n\n# 4.3 Add a second new column showing the difference between Stock and StockSold\n\nitem_data\n\n\"StockLeft\"\n\nitem_data\n\n\"Stock\"\n\nitem_data\n\n\"StockSold\"\n\nSeeing results\u200b\n\nTo see the results of these calculations in the Replit console, add the following print statements just below the above code. We'll use the DataFrame.head() method to only show the first five rows of each result.", "start_char_idx": 7089, "end_char_idx": 11150, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb101574-74cc-40f2-8e85-9219ee0f07be": {"__data__": {"id_": "eb101574-74cc-40f2-8e85-9219ee0f07be", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e909cde1-6a68-4c99-9651-d79e943736e0", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "ebc0838b938a2aa5d69f78b0cc3c58aa47e2b564cff35df541bbf74f98c32240", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "15d4f08c-fb69-4cf5-9ed2-fe585bbf0ab3", "node_type": "1", "metadata": {}, "hash": "f94d0f9fa4a703ebe89d16bcf49d4682c1c5e2bc3eb801d8221ccf718c8a5705", "class_name": "RelatedNodeInfo"}}, "hash": "5d66efdf580956dafa659618ced6a6138594d516f80acd7610a0fb7eae602516", "text": "Add the following code:\n\n# 4. How much of each item do we have left in stock?\n\n# 4.1 Sort item_data by name to match sales_by_item\n\nitem_data\n\nitem_data\n\nsort_values\n\n\"Item Name\"\n\n# 4.2 Calculate total sold of each item and add it to item_data as a new column\n\nitem_data\n\nitem_data\n\nassign\n\nStockSold\n\nsales_by_item\n\n\"Quantity Sold\"\n\nsum\n\nvalues\n\n# 4.3 Add a second new column showing the difference between Stock and StockSold\n\nitem_data\n\n\"StockLeft\"\n\nitem_data\n\n\"Stock\"\n\nitem_data\n\n\"StockSold\"\n\nSeeing results\u200b\n\nTo see the results of these calculations in the Replit console, add the following print statements just below the above code. We'll use the DataFrame.head() method to only show the first five rows of each result.\n\n# Display results\n\nprint\n\nrevenue_by_salesperson\n\nhead\n\nprint\n\nprofit_by_salesperson\n\nhead\n\nprint\n\naverage_discounts\n\nhead\n\nprint\n\nitem_data\n\n\"Item Name\"\n\n\"Stock\"\n\n\"StockSold\"\n\n\"StockLeft\"\n\nhead\n\nNote the notation in the final line: this allows us to show only selected columns of any DataFrame.\n\nNow run your repl and upload the sales-july-2021.xlsx spreadsheet you downloaded earlier. If your code is working correctly, you should see a number of tables in the Replit console, similar to the screenshot below.\n\nPlotting graphs\u200b\n\nNow that we've got our data ready, we need to put it into some nice visualizations. Pandas includes methods for generating charts and graphs from DataFrames and other data objects. These methods are thin wrappers over Matplotlib, Python's most widely used data visualization library.\n\nAlthough we won't be using it directly, we'll need to import Matplotlib so that we can configure it to run in the background, otherwise Replit will open a Tkinter window to render our plots in. Add the following lines to the top of main.py to do this:\n\nimport\n\nmatplotlib\n\nas\n\nmpl\n\nmpl\n\nuse\n\n'Agg'\n\nWe're going to create two pie charts for our sales data, and one bar chart for our discount data. We'll leave our stock data as a table.\n\nSales pie charts\u200b\n\nBecause we're creating two pie charts, let's start by defining an internal function. Add the following code to the bottom of process_spreadsheet():\n\n# Create sales pie charts\n\ndef\n\nsalesperson_pie_chart\n\ndf\n\nyaxis\n\nfilename\n\nexplode\n\nnp\n\nzeros\n\ndf\n\nshape\n\nexplode\n\n0.1\n\npie_profit\n\ndf\n\nplot\n\nyaxis\n\nkind\n\n\"pie\"\n\nexplode\n\nexplode\n\nautopct\n\nlambda\n\nvalue\n\n\"${:,.2f}\"\n\nformat\n\nfloor_currency\n\nvalue\n\n100\n\ndf\n\nsum\n\npie_profit\n\nget_figure\n\ngca\n\nset_ylabel\n\n\"\"\n\npie_profit\n\nget_figure\n\ntight_layout\n\npie_profit\n\nget_figure\n\nsavefig\n\nfilename\n\npie_profit\n\nget_figure\n\nclf\n\nThere's a lot happening here, so let's go through it step by step:\n\nOur new inner function takes three parameters, a DataFrame to plot, the name of the column to use as the y-axis, and a filename to save the finished plot to. We will be passing revenue_by_salesperson and profit_by_salesperson into it.\n\nBefore drawing our graph, we create an array explode, which is a numpy array of zeros of the same length as our DataFrame (DataFrame.shape[0] is a handy way of getting the number of rows). We then replace the first value with 0.1. This will allow us to pull out the largest slice of the pie, improving the visualization.\n\nWe then plot the pie chart, using the specified yaxis.\n\nThe autopct argument allows us to specify how we would like to display the numeric labels on each slice. Pie charts in Matplotlib default to showing percentages, but we want to see currency values, so we pass in an anonymous function that multiplies each percentage by the sum of our DataFrame's second column. We also use our floor_currency() function and Python string formatting to make our values display as currency values.\n\nWe then remove the y-axis label, use tight_layout() to avoid excess white space, and save our figure to a file.\n\nFinally, we call our plot's clf() method. This clears the current plot, so we can start drawing a new one. Because of the way Matplotlib works, if we don't do this, we'll end up drawing plots on top of each other.", "start_char_idx": 10424, "end_char_idx": 14428, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "15d4f08c-fb69-4cf5-9ed2-fe585bbf0ab3": {"__data__": {"id_": "15d4f08c-fb69-4cf5-9ed2-fe585bbf0ab3", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb101574-74cc-40f2-8e85-9219ee0f07be", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "5d66efdf580956dafa659618ced6a6138594d516f80acd7610a0fb7eae602516", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "00c6bf0e-f085-4d8e-991b-695341de04ed", "node_type": "1", "metadata": {}, "hash": "e8964e3c90ef0c00fc96c335f6e218e551baa8088a5798d9d3e69c36e51fd6b2", "class_name": "RelatedNodeInfo"}}, "hash": "f94d0f9fa4a703ebe89d16bcf49d4682c1c5e2bc3eb801d8221ccf718c8a5705", "text": "This will allow us to pull out the largest slice of the pie, improving the visualization.\n\nWe then plot the pie chart, using the specified yaxis.\n\nThe autopct argument allows us to specify how we would like to display the numeric labels on each slice. Pie charts in Matplotlib default to showing percentages, but we want to see currency values, so we pass in an anonymous function that multiplies each percentage by the sum of our DataFrame's second column. We also use our floor_currency() function and Python string formatting to make our values display as currency values.\n\nWe then remove the y-axis label, use tight_layout() to avoid excess white space, and save our figure to a file.\n\nFinally, we call our plot's clf() method. This clears the current plot, so we can start drawing a new one. Because of the way Matplotlib works, if we don't do this, we'll end up drawing plots on top of each other.\n\nBelow this function definition, we'll add the following calls, which will generate both pie charts:\n\nsalesperson_pie_chart\n\nrevenue_by_salesperson\n\n\"Sale Revenue\"\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"PLOT_DIR\"\n\n\"revenue_by_salesperson.png\"\n\nsalesperson_pie_chart\n\nprofit_by_salesperson\n\n\"Sale Profit\"\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"PLOT_DIR\"\n\n\"profit_by_salesperson.png\"\n\nIf you run your repl now and reupload the spreadsheet, you should see two new image files in the plots directory.\n\nDiscount bar chart\u200b\n\nOur bar chart code is fairly similar to our pie chart code. Add the following code at the bottom of process_spreadsheet().\n\n# Create bar chart\n\nbar_ave_discount\n\naverage_discounts\n\nplot\n\n\"Discount\"\n\nkind\n\n\"bar\"\n\nrot\n\n45\n\nbar_ave_discount\n\nget_figure\n\ngca\n\nset_xlabel\n\n\"\"\n\nbar_ave_discount\n\nget_figure\n\ntight_layout\n\nbar_ave_discount\n\nyaxis\n\nset_major_formatter\n\nmtick\n\nPercentFormatter\n\nxmax\n\n1.0\n\ndecimals\n\nbar_ave_discount\n\nget_figure\n\nsavefig\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"PLOT_DIR\"\n\n\"item_average_discount.png\"\n\nbar_ave_discount\n\nget_figure\n\nclf\n\nIn addition to setting this plot as a bar graph, we're use the rot argument to show the labels for the chart's x-axis at an angle, and we're using Matplotlib's PercentFormatter to show the chart's y-axis labels as percentages. To use this function, add the following import statement near the top of main.py, just below your other matplotlib imports:\n\nimport\n\nmatplotlib\n\nticker\n\nas\n\nmtick\n\nRun your repl now, upload the spreadsheet, and you should see three images in the plots directory. In the next and final section of this tutorial, we'll be putting these three images into a PDF document, along with some textual and tabular data.\n\nCreating a PDF\u200b\n\nWe will create our PDF using the PyFPDF library. Add the following import statement to the top of main.py to use this library:\n\nfrom\n\nfpdf\n\nimport\n\nFPDF\n\nNow return to the bottom of process_spreadsheet(), and add the following code to initialize a new PDF document:\n\n# Create PDF\n\npdf\n\nFPDF\n\n'L'\n\n# landscape\n\npdf\n\nadd_page\n\n# first page\n\npdf\n\nset_font\n\n'arial'\n\n''\n\n12\n\n# 12pt Arial text\n\nThe FPDF class provides a few different ways to insert text and images into our PDF. We will be using the cell() and image() methods for inserting table cells and images.\n\nCalls to cell and image will insert elements at the current position on the page. We'll call this position the cursor. The cell method includes a parameter which specifies where to place the cursor following the insertion of each cell. The cursor can also be set manually using x and y coordinates. These two factors, especially the former, can make it difficult to mentally model FPDF code, so it's good practice to leave a lot of comments.\n\nThe first thing we'll add to our page is a heading for our revenue pie chart. Add the following code below the line where you set the font.\n\n# Pie charts\n\npdf\n\ncell\n\n112\n\n# width\n\n20\n\n# height\n\n\"Revenue by salesperson\"\n\n# text\n\n# border (0 = none, 1 = border)\n\n# where to put the cursor for the next cell\n\n# (0 = right, 1 = next line, 2 = directly below)\n\n\"L\"\n\n# text alignment\n\nAs this is a landscape page, we'll place the heading for the profit pie chart to the right of this one, using the following code.", "start_char_idx": 13525, "end_char_idx": 17655, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "00c6bf0e-f085-4d8e-991b-695341de04ed": {"__data__": {"id_": "00c6bf0e-f085-4d8e-991b-695341de04ed", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "15d4f08c-fb69-4cf5-9ed2-fe585bbf0ab3", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "f94d0f9fa4a703ebe89d16bcf49d4682c1c5e2bc3eb801d8221ccf718c8a5705", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9165c1b7-3c6e-405f-9613-35884a2dd8b0", "node_type": "1", "metadata": {}, "hash": "7e81bd66786a9180200d2e1ad3b2881d0565e2fcc22aae14adabd358669d0c1f", "class_name": "RelatedNodeInfo"}}, "hash": "e8964e3c90ef0c00fc96c335f6e218e551baa8088a5798d9d3e69c36e51fd6b2", "text": "The cursor can also be set manually using x and y coordinates. These two factors, especially the former, can make it difficult to mentally model FPDF code, so it's good practice to leave a lot of comments.\n\nThe first thing we'll add to our page is a heading for our revenue pie chart. Add the following code below the line where you set the font.\n\n# Pie charts\n\npdf\n\ncell\n\n112\n\n# width\n\n20\n\n# height\n\n\"Revenue by salesperson\"\n\n# text\n\n# border (0 = none, 1 = border)\n\n# where to put the cursor for the next cell\n\n# (0 = right, 1 = next line, 2 = directly below)\n\n\"L\"\n\n# text alignment\n\nAs this is a landscape page, we'll place the heading for the profit pie chart to the right of this one, using the following code.\n\npdf\n\ncell\n\n110\n\n20\n\n\"Profit by salesperson\"\n\n\"L\"\n\nOur cursor is now at the start of the line below our headings. To help us place our pie charts, we will record the current cursor coordinates with the code below:\n\nstart_x\n\npdf\n\nget_x\n\nstart_y\n\npdf\n\nget_y\n\nNow we can place our first pie chart:\n\npdf\n\nimage\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"PLOT_DIR\"\n\n\"revenue_by_salesperson.png\"\n\n110\n\nAnd our second one, using set_xy() to move the cursor to a position next to our first pie chart:\n\npdf\n\nset_xy\n\nstart_x\n\n110\n\nstart_y\n\npdf\n\nimage\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"PLOT_DIR\"\n\n\"profit_by_salesperson.png\"\n\n110\n\nNote that unlike cell, image doesn't let us specify where to place the cursor next \u2013 it will always place the cursor at the start of the next line. Let's record that position now, so we can return to it later:\n\nbelow_pie_y\n\npdf\n\nget_y\n\nNow we have some more space on the right side of the page, so let's insert our stock table. We'll construct this using cell again, but this time we'll give our cells borders. Insert the following code to place our cursor at the top right of the page and create the table headings:\n\n# Stock table\n\npdf\n\nset_font\n\n'arial'\n\n'B'\n\n10\n\n# table heading font\n\npdf\n\nset_y\n\nstart_y\n\npdf\n\nset_x\n\nstart_x\n\n220\n\npdf\n\ncell\n\n30\n\n10\n\n\"Item\"\n\n\"C\"\n\npdf\n\ncell\n\n30\n\n10\n\n\"Stock Left\"\n\n\"C\"\n\npdf\n\ncell\n\n30\n\nThe final line returns the cursor to the left-hand side of the Item heading cell. Without this line, our table body would be offset by one cell. Refer to our first invocation of the cell method if you don't remember what all the numbers mean.\n\nNow we'll use the DataFrame.iterrows() method to iterate over item_data and create our table's body columns. Add the following code:\n\npdf\n\nset_font\n\n'arial'\n\n''\n\n10\n\n# table rows font\n\nfor\n\nrow\n\nin\n\nitem_data\n\niterrows\n\npdf\n\nset_x\n\nstart_x\n\n220\n\npdf\n\ncell\n\n30\n\n10\n\nrow\n\n\"Item Name\"\n\n\"L\"\n\npdf\n\ncell\n\n30\n\n10\n\nstr\n\nrow\n\n\"StockLeft\"\n\n\"R\"\n\npdf\n\ncell\n\n30\n\nWe can now add our average discount bar chart, which we're placing just below our pie charts. Add the following code:\n\n# Bar chart\n\npdf\n\nset_font\n\n'arial'\n\n''\n\n12\n\n# 12pt Arial text\n\npdf\n\nset_xy\n\nstart_x\n\nbelow_pie_y\n\n10\n\npdf\n\ncell\n\n30\n\n10\n\n\"Average discounts\"\n\n\"L\"\n\npdf\n\nimage\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"PLOT_DIR\"\n\n\"item_average_discount.png\"\n\n103\n\nOur report is now complete. End the process_spreadsheet() function with the following return statement, which uses the FPDF class's output() method to write our PDF to a file:\n\nreturn\n\npdf\n\noutput\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"OUTPUT_DIR\"\n\n\"report.pdf\"\n\n\"F\"\n\nTo ensure that your PDF opens correctly, open your repl's website in a new tab.\n\nThen upload sales-july-2021.xlsx again, and wait for your report to generate. It should look something like this:\n\nWhere next?\u200b\n\nWe've covered a number of methods for working and displaying tabular data in this tutorial. From here, you can apply this to your own data munging and visualization needs. Additionally, there's much more to learn about all of these topics.", "start_char_idx": 16940, "end_char_idx": 20642, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9165c1b7-3c6e-405f-9613-35884a2dd8b0": {"__data__": {"id_": "9165c1b7-3c6e-405f-9613-35884a2dd8b0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c736fe30-447a-4299-a4b4-c2374d422655", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "27771bf6be88ae00af33bc3fcadcc59a7403aaed6f0ff224612eccc4381a3c17", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "00c6bf0e-f085-4d8e-991b-695341de04ed", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}, "hash": "e8964e3c90ef0c00fc96c335f6e218e551baa8088a5798d9d3e69c36e51fd6b2", "class_name": "RelatedNodeInfo"}}, "hash": "7e81bd66786a9180200d2e1ad3b2881d0565e2fcc22aae14adabd358669d0c1f", "text": "End the process_spreadsheet() function with the following return statement, which uses the FPDF class's output() method to write our PDF to a file:\n\nreturn\n\npdf\n\noutput\n\nos\n\npath\n\njoin\n\nsite\n\nconfig\n\n\"OUTPUT_DIR\"\n\n\"report.pdf\"\n\n\"F\"\n\nTo ensure that your PDF opens correctly, open your repl's website in a new tab.\n\nThen upload sales-july-2021.xlsx again, and wait for your report to generate. It should look something like this:\n\nWhere next?\u200b\n\nWe've covered a number of methods for working and displaying tabular data in this tutorial. From here, you can apply this to your own data munging and visualization needs. Additionally, there's much more to learn about all of these topics.\n\nSome of our other tutorials delve into other aspects of Flask, such as this stock market dashboard tutorial. The web application interface we've built above is minimal and may benefit from additional functionality.\n\nWe also have another tutorial on Matplotlib.\n\nThe pandas community has written a number of tutorials, linked here.\n\nFinally, the FPDF documentation is available here.\n\nYou can find the code for this tutorial in the repl below:\n\n< Previous: Paid content site with replit.web & Stripe\n\nNext: Stock market dashboard >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nSet up\n\nCreating the web application\n\nProcessing spreadsheets with pandas\n\nCalculating insights from dataRevenue by salespersonProfit by salespersonAverage discount by itemRemaining stock by itemSeeing results\n\nPlotting graphsSales pie chartsDiscount bar chart\n\nCreating a PDF\n\nWhere next?", "start_char_idx": 19960, "end_char_idx": 21514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"c736fe30-447a-4299-a4b4-c2374d422655": {"node_ids": ["ed6f09a1-2d22-46d7-8adc-17aa51b47c0f", "18227091-a829-4e0e-95a4-d4f3f6d0016f", "e909cde1-6a68-4c99-9651-d79e943736e0", "eb101574-74cc-40f2-8e85-9219ee0f07be", "15d4f08c-fb69-4cf5-9ed2-fe585bbf0ab3", "00c6bf0e-f085-4d8e-991b-695341de04ed", "9165c1b7-3c6e-405f-9613-35884a2dd8b0"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/pdf-report-generator-from-spreadsheet.html"}}}, "docstore/metadata": {"ed6f09a1-2d22-46d7-8adc-17aa51b47c0f": {"doc_hash": "4a3d0d163e7e9ca65ddf1f5fc4d5320644f0bf31b3b46fcacdf9b64865750b35", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}, "18227091-a829-4e0e-95a4-d4f3f6d0016f": {"doc_hash": "0a4e95b54516fb38ea29eb543f599fc10801cfaab202475334dd1bd47f447995", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}, "e909cde1-6a68-4c99-9651-d79e943736e0": {"doc_hash": "ebc0838b938a2aa5d69f78b0cc3c58aa47e2b564cff35df541bbf74f98c32240", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}, "eb101574-74cc-40f2-8e85-9219ee0f07be": {"doc_hash": "5d66efdf580956dafa659618ced6a6138594d516f80acd7610a0fb7eae602516", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}, "15d4f08c-fb69-4cf5-9ed2-fe585bbf0ab3": {"doc_hash": "f94d0f9fa4a703ebe89d16bcf49d4682c1c5e2bc3eb801d8221ccf718c8a5705", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}, "00c6bf0e-f085-4d8e-991b-695341de04ed": {"doc_hash": "e8964e3c90ef0c00fc96c335f6e218e551baa8088a5798d9d3e69c36e51fd6b2", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}, "9165c1b7-3c6e-405f-9613-35884a2dd8b0": {"doc_hash": "7e81bd66786a9180200d2e1ad3b2881d0565e2fcc22aae14adabd358669d0c1f", "ref_doc_id": "c736fe30-447a-4299-a4b4-c2374d422655"}}}