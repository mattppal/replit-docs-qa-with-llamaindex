{"docstore/data": {"b6ead443-c7ac-4196-a349-6c7cc8c72796": {"__data__": {"id_": "b6ead443-c7ac-4196-a349-6c7cc8c72796", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "32d877d8-4de3-4ecf-bbbd-fce770b6d4a3", "node_type": "1", "metadata": {}, "hash": "68e6f7c84bcb85f9f18820f21d2a997416c9f46355340849fac030d149660e12", "class_name": "RelatedNodeInfo"}}, "hash": "4e6afdd9c4c9821b23fff728a25d41b26a7c36f7b71a42b7a3b34213fe58c80f", "text": "req\n\nres\n\n=>\n\nconst\n\nsession\n\nawait\n\nstripe\n\ncheckout\n\nsessions\n\ncreate\n\npayment_method_types\n\n\"card\"\n\nline_items\n\nprice_data\n\ncurrency\n\n\"usd\"\n\nproduct_data\n\nname\n\n\"Stubborn Attachments\"\n\nimages\n\n\"https://i.imgur.com/EHyR2nP.png\"\n\nunit_amount\n\n2000\n\nquantity\n\nmode\n\n\"payment\"\n\nsuccess_url\n\n${\n\nYOUR_DOMAIN\n\n/success.html\n\ncancel_url\n\n${\n\nYOUR_DOMAIN\n\n/cancel.html\n\nres\n\njson\n\nid\n\nsession\n\nid\n\napp\n\nlisten\n\n4242\n\n=>\n\nconsole\n\nlog\n\n\"Running on port 4242\"\n\nA brief explanation:\u200b\n\nThis is the shell of the endpoint we'll be sending a POST request to, from the frontend:\n\napp\n\npost\n\n\"/create-checkout-session\"\n\nasync\n\nreq\n\nres\n\n=>\n\n//.......\n\nInside this request, we'll create the Checkout Session with Stripe, and return the Session id, which the frontend will use to redirect to Stripe's checkout page:\n\nconst\n\nsession\n\nawait\n\nstripe\n\ncheckout\n\nsessions\n\ncreate\n\n//......\n\nres\n\njson\n\nid\n\nsession\n\nid\n\nWe'll go over the contents of this request in Part 3 of this tutorial.\n\nYou may have noticed that the integration builder has hardcoded our API key. This isn\u2019t great.\n\nLuckily, Replit supports environment variables, and these are stored under secrets on the repl. Check out the Replit .env tutorial here.\n\nTo create an environment variable for the API key, click on the lock icon on the left side panel of the repl. Set the key as STRIPE_KEY and enter the value for your Stripe key. It will be something like:\n\nsk_test_51IKlwdAhJUZ4ZUqHFBRpOTbbNVakSMbHbouhVH89YPszHcOftinFd6Vi5oOOaY1HZ1PDNmOfiKEEdR03vOqeaHWU00TnpDSj8N\n\nWe can then reference the environment variable in code using process.env.STRIPE_KEY. Change this line:\n\nconst\n\nstripe\n\nrequire\n\n\"stripe\"\n\n\"sk_test_51IKlwdAhJUZ4ZUqHFBRpOTbbNVakSMbHbouhVH89YPszHcOftinFd6Vi5oOOaY1HZ1PDNmOfiKEEdR03vOqeaHWU00TnpDSj8N\"\n\nto:\n\nconst\n\nstripe\n\nrequire\n\n\"stripe\"\n\nprocess\n\nenv\n\nSTRIPE_KEY\n\nBefore we continue, there are a couple of extra config elements we'll need to enable to make sure our frontend and server-side can communicate. These are:\n\n1. Adding body parsing\n\nThis will allow us to pass the request body from the frontend to the server-side. Just add the following lines after const app = express();\n\napp\n\nuse\n\nexpress\n\nurlencoded\n\nextended\n\ntrue\n\napp\n\nuse\n\nexpress\n\njson\n\n2. Enabling CORS\n\nThis will allow us to accept body content on the server-side. We need to add the CORS dependency. Import the package by typing the following in the repl shell:\n\nnpm\n\ninstall\n\n--save cors\n\nNow import cors at the top of index.js:\n\nconst\n\ncors\n\nrequire\n\n\"cors\"\n\nNext, add the following line after the two lines we added in step 1.\n\napp\n\nuse\n\ncors\n\nThe full code now looks like this:\n\nconst\n\nstripe\n\nrequire\n\n\"stripe\"\n\nprocess\n\nenv\n\nSTRIPE_KEY\n\nconst\n\nexpress\n\nrequire\n\n\"express\"\n\nconst\n\ncors\n\nrequire\n\n\"cors\"\n\nconst\n\napp\n\nexpress\n\napp\n\nuse\n\nexpress\n\nurlencoded\n\nextended\n\ntrue\n\napp\n\nuse\n\nexpress\n\njson\n\napp\n\nuse\n\ncors\n\nconst\n\nYOUR_DOMAIN\n\n\"http://localhost:4242\"\n\napp\n\npost\n\n\"/create-checkout-session\"\n\nasync\n\nreq\n\nres\n\n=>\n\nconst\n\nsession\n\nawait\n\nstripe\n\ncheckout\n\nsessions\n\ncreate\n\npayment_method_types\n\n\"card\"\n\nline_items\n\nprice_data\n\ncurrency\n\n\"usd\"\n\nproduct_data\n\nname\n\n\"Stubborn Attachments\"\n\nimages\n\n\"https://i.imgur.com/EHyR2nP.png\"\n\nunit_amount\n\n2000\n\nquantity\n\nmode\n\n\"payment\"\n\nsuccess_url\n\n${\n\nYOUR_DOMAIN\n\n/success.html\n\ncancel_url\n\n${\n\nYOUR_DOMAIN\n\n/cancel.html\n\nres\n\njson\n\nid\n\nsession\n\nid\n\napp\n\nlisten\n\n4242\n\n=>\n\nconsole\n\nlog\n\n\"Running on port 4242\"\n\nYou\u2019ll notice the Stripe code requires a YOUR_DOMAIN variable, that\u2019s currently set to https://localhost:4242.", "start_char_idx": 0, "end_char_idx": 3514, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "32d877d8-4de3-4ecf-bbbd-fce770b6d4a3": {"__data__": {"id_": "32d877d8-4de3-4ecf-bbbd-fce770b6d4a3", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b6ead443-c7ac-4196-a349-6c7cc8c72796", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "4e6afdd9c4c9821b23fff728a25d41b26a7c36f7b71a42b7a3b34213fe58c80f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cebbae42-73b3-471f-bdf9-cc33a19c5089", "node_type": "1", "metadata": {}, "hash": "22eba00a142077f68948696ccd6343d348b5da5f55c94600e899823e9c56fb45", "class_name": "RelatedNodeInfo"}}, "hash": "68e6f7c84bcb85f9f18820f21d2a997416c9f46355340849fac030d149660e12", "text": "In order to link this up with our site, we need to create one. Continue to Part 2 \u2013 Buying bricks with a repl frontend!\n\nPart 2: Buying Bricks With a Repl Frontend\u200b\n\nIn this section, we will make a site that\u2019ll act as the online store where we can buy our bricks. We will connect the site to our Stripe integration we created in Part 1.\n\nTo do this, we\u2019ll start off with a new repl, using the \u201cHTML,CSS, JS\u201d option and call it \"BrickSite\".\n\nWe\u2019ll create a one-page application with minimal functionality: a static list of bricks that a user can buy. Each brick has a price, a name, a description and an image. A \"Buy this brick\" button will allow the user to purchase a brick.\n\n1. Making BrickSite\u200b\n\nOur first step is to add the Bulma styling library. It\u2019s a great way to style BrickSite with little effort. We\u2019ll include the CDN by replacing the default rel=\u201dstylesheet\u201d with the Bulma CDN.\n\nNifty-tip! Searching \u201cbulma\u201d in the packages tab in our Replit IDE means we can insert it automatically. See here:\n\nThis inserts the following into our index.html:\n\nscript\n\nsrc\n\nhttps://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\n\n</\n\nscript\n\nChange this to the code below and paste it in the <head> tag:\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\n\n/>\n\nNow, we want to create a list of bricks a user can buy. Each brick has its own name, description, predefined styles, price and image. We paste this in our script.js:\n\nconst\n\nBRICKS\n\nname\n\n\"Brickson Brick\"\n\ndesc\n\n\"this is a plain brick\"\n\nstyle\n\n\"is-info\"\n\ncost\n\nimages\n\n\"https://www.kulucrete.co.za/website/wp-content/uploads/2016/11/smooth-brick.jpg\"\n\nname\n\n\"Bricketty Brick\"\n\ndesc\n\n\"this is a cooler brick\"\n\nstyle\n\n\"is-warning\"\n\ncost\n\nimages\n\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJc_W56qiCUiHHECVkar1jKQSrTniYAaqL_g&usqp=CAU\"\n\nname\n\n\"MyBrickerty McBrickson\"\n\ndesc\n\n\"this is the best brick\"\n\nstyle\n\n\"is-success\"\n\ncost\n\n100\n\nimages\n\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\"\n\nIn order to display these bricks, we want to add some basic HTML that we can dynamically add content to on render. We define the following <body> after the closing </head> tag and within the <html> tags of our index.html:\n\nbody\n\ndiv\n\nclass\n\nsection\n\ndiv\n\nclass\n\ncontainer\n\ndiv\n\nclass\n\ntitle\n\nMy Site to Buy Bricks\n\n</\n\ndiv\n\ndiv\n\nid\n\nbricks\n\nclass\n\ntile is-ancestor\n\n</\n\ndiv\n\n</\n\ndiv\n\n</\n\ndiv\n\nscript\n\nsrc\n\nscript.js\n\n</\n\nscript\n\n</\n\nbody\n\nWe'll be dynamically adding our array of bricks to the id=bricks div tag.\n\nThe full code for index.html is:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\n/>\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width\n\n/>\n\ntitle\n\nBrickSite\n\n</\n\ntitle\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\n\n/>\n\n</\n\nhead\n\nbody\n\ndiv\n\nclass\n\nsection\n\ndiv\n\nclass\n\ncontainer\n\ndiv\n\nclass\n\ntitle\n\nMy Site to Buy Bricks\n\n</\n\ndiv\n\ndiv\n\nid\n\nbricks\n\nclass\n\ntile is-ancestor\n\n</\n\ndiv\n\n</\n\ndiv\n\n</\n\ndiv\n\nscript\n\nsrc\n\nscript.js\n\n</\n\nscript\n\n</\n\nbody\n\n</\n\nhtml\n\nNow, going back to our script.js, we want to add dynamic vanilla JS elements to the content on the page. For every brick in the BRICKS array, we'll create a div element, add its own name, styling, content and button, and then add it to the DOM.", "start_char_idx": 3515, "end_char_idx": 6860, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cebbae42-73b3-471f-bdf9-cc33a19c5089": {"__data__": {"id_": "cebbae42-73b3-471f-bdf9-cc33a19c5089", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "32d877d8-4de3-4ecf-bbbd-fce770b6d4a3", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "68e6f7c84bcb85f9f18820f21d2a997416c9f46355340849fac030d149660e12", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "93804e09-4c4f-4f7e-b476-ed31ef2b69e8", "node_type": "1", "metadata": {}, "hash": "a1de338d8e1873fb445772a5312c643d599d6ae5aa7d0eb52f97da108963ce80", "class_name": "RelatedNodeInfo"}}, "hash": "22eba00a142077f68948696ccd6343d348b5da5f55c94600e899823e9c56fb45", "text": "For every brick in the BRICKS array, we'll create a div element, add its own name, styling, content and button, and then add it to the DOM.\n\nWe add the following content in order:\n\nFor each brick in our predefined list:\n\nfor\n\nvar\n\nBRICKS\n\nlength\n\n++\n\nAdd a new div to the DOM and give it some styling (predefined by Bulma, so we don't need to do the css ourselves):\n\nlet\n\nnewBrick\n\ndocument\n\ncreateElement\n\n\"div\"\n\nnewBrick\n\nclassName\n\n\"tile is-parent\"\n\nAdd an article element on the document and give it some styling. Each brick has its own style defined in the BRICKS array, so use this in the class definitions:\n\nlet\n\nnewBrickArticle\n\ndocument\n\ncreateElement\n\n\"article\"\n\nnewBrickArticle\n\nclassName\n\n\"tile is-child notification \"\n\nBRICKS\n\nstyle\n\nCreate a new p element on the document, give it title styling and make the text (innerHTML) the name of the brick:\n\nlet\n\nnewBrickTitle\n\ndocument\n\ncreateElement\n\n\"p\"\n\nnewBrickTitle\n\nclassName\n\n\"title\"\n\nnewBrickTitle\n\ninnerHTML\n\nBRICKS\n\nname\n\nDo the same with the brick's description:\n\nlet\n\nnewBrickDesc\n\ndocument\n\ncreateElement\n\n\"p\"\n\nnewBrickDesc\n\nclassName\n\n\"subtitle\"\n\nnewBrickDesc\n\ninnerHTML\n\nBRICKS\n\ndesc\n\nAnd show the brick's price by adding a new div with the price in a little description:\n\nlet\n\nnewBrickCost\n\ndocument\n\ncreateElement\n\n\"div\"\n\nnewBrickCost\n\nclassName\n\n\"box\"\n\nnewBrickCost\n\ninnerHTML\n\n\"This brick costs: $\"\n\nBRICKS\n\ncost\n\nLastly, add the a element for purchasing the brick with some styling and text. Also, give it an id that's the number of the brick, so we know what content to pass to the method when the button is clicked.", "start_char_idx": 6721, "end_char_idx": 8314, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "93804e09-4c4f-4f7e-b476-ed31ef2b69e8": {"__data__": {"id_": "93804e09-4c4f-4f7e-b476-ed31ef2b69e8", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cebbae42-73b3-471f-bdf9-cc33a19c5089", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "22eba00a142077f68948696ccd6343d348b5da5f55c94600e899823e9c56fb45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5fe2cb41-7575-4633-9f0b-c9cda30f141a", "node_type": "1", "metadata": {}, "hash": "f86fd34098fb9512eb0fbb25c3c0354ffa012b57e7ef3a0bba1259dda10466bb", "class_name": "RelatedNodeInfo"}}, "hash": "a1de338d8e1873fb445772a5312c643d599d6ae5aa7d0eb52f97da108963ce80", "text": "Also, give it an id that's the number of the brick, so we know what content to pass to the method when the button is clicked. We'll create the onclick method and functionality for this a little later:\n\nlet\n\nnewBrickButton\n\ndocument\n\ncreateElement\n\n\"a\"\n\nnewBrickButton\n\nid\n\nnewBrickButton\n\nclassName\n\n\"button is-dark\"\n\nnewBrickButton\n\ninnerHTML\n\n\"Buy this brick\"\n\nNow add the new title, description, cost and button elements to the article element:\n\nnewBrickArticle\n\nappendChild\n\nnewBrickTitle\n\nnewBrickArticle\n\nappendChild\n\nnewBrickDesc\n\nnewBrickArticle\n\nappendChild\n\nnewBrickCost\n\nnewBrickArticle\n\nappendChild\n\nnewBrickButton\n\nAnd, finally, add the article to the parent brick div and append it as a child to the div we defined as id=\"bricks\" in our index.html; and close the for loop:\n\nnewBrick\n\nappendChild\n\nnewBrickArticle\n\ndocument\n\ngetElementById\n\n\"bricks\"\n\nappendChild\n\nnewBrick\n\nAltogether, our script.js now looks like:\n\nconst\n\nBRICKS\n\nname\n\n\"Brickson Brick\"\n\ndesc\n\n\"this is a plain brick\"\n\nstyle\n\n\"is-info\"\n\ncost\n\nimages\n\n\"https://www.kulucrete.co.za/website/wp-content/uploads/2016/11/smooth-brick.jpg\"\n\nname\n\n\"Bricketty Brick\"\n\ndesc\n\n\"this is a cooler brick\"\n\nstyle\n\n\"is-warning\"\n\ncost\n\nimages\n\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJc_W56qiCUiHHECVkar1jKQSrTniYAaqL_g&usqp=CAU\"\n\nname\n\n\"MyBrickerty McBrickson\"\n\ndesc\n\n\"this is the best brick\"\n\nstyle\n\n\"is-success\"\n\ncost\n\n100\n\nimages\n\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\"\n\nfor\n\nvar\n\nBRICKS\n\nlength\n\n++\n\nlet\n\nnewBrick\n\ndocument\n\ncreateElement\n\n\"div\"\n\nnewBrick\n\nclassName\n\n\"tile is-parent\"\n\nlet\n\nnewBrickArticle\n\ndocument\n\ncreateElement\n\n\"article\"\n\nnewBrickArticle\n\nclassName\n\n\"tile is-child notification \"\n\nBRICKS\n\nstyle\n\nlet\n\nnewBrickTitle\n\ndocument\n\ncreateElement\n\n\"p\"\n\nnewBrickTitle\n\nclassName\n\n\"title\"\n\nnewBrickTitle\n\ninnerHTML\n\nBRICKS\n\nname\n\nlet\n\nnewBrickDesc\n\ndocument\n\ncreateElement\n\n\"p\"\n\nnewBrickDesc\n\nclassName\n\n\"subtitle\"\n\nnewBrickDesc\n\ninnerHTML\n\nBRICKS\n\ndesc\n\nlet\n\nnewBrickCost\n\ndocument\n\ncreateElement\n\n\"div\"\n\nnewBrickCost\n\nclassName\n\n\"box\"\n\nnewBrickCost\n\ninnerHTML\n\n\"This brick costs: $\"\n\nBRICKS\n\ncost\n\nlet\n\nnewBrickButton\n\ndocument\n\ncreateElement\n\n\"a\"\n\nnewBrickButton\n\nid\n\nnewBrickButton\n\nclassName\n\n\"button is-dark\"\n\nnewBrickButton\n\ninnerHTML\n\n\"Buy this brick\"\n\nnewBrickArticle\n\nappendChild\n\nnewBrickTitle\n\nnewBrickArticle\n\nappendChild\n\nnewBrickDesc\n\nnewBrickArticle\n\nappendChild\n\nnewBrickCost\n\nnewBrickArticle\n\nappendChild\n\nnewBrickButton\n\nnewBrick\n\nappendChild\n\nnewBrickArticle\n\ndocument\n\ngetElementById\n\n\"bricks\"\n\nappendChild\n\nnewBrick\n\nReferring back to the server's endpoint code that we got from the Stripe walkthrough, you will notice it requires both a success.html and a cancel.html. Let\u2019s make new files for these in the root of our repl.\n\nPlace the code below in the success.html file:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width\n\ntitle\n\nMySite - Success\n\n</\n\ntitle\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\n\n/>\n\n</\n\nhead\n\nbody\n\ndiv\n\nclass\n\nsection\n\ndiv\n\nclass\n\ncontainer\n\narticle\n\nclass\n\nmessage is-large is-success\n\ndiv\n\nclass\n\nmessage-header\n\nCongratulations!\n\n</\n\n</\n\ndiv\n\ndiv\n\nclass\n\nmessage-body\n\nYou have purchased a brick. We hope you build great big things with your brick and come back to buy more bricks from us. May the bricks be ever in your favour and the bricklaying be bountiful and swift.", "start_char_idx": 8189, "end_char_idx": 11681, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5fe2cb41-7575-4633-9f0b-c9cda30f141a": {"__data__": {"id_": "5fe2cb41-7575-4633-9f0b-c9cda30f141a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "93804e09-4c4f-4f7e-b476-ed31ef2b69e8", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "a1de338d8e1873fb445772a5312c643d599d6ae5aa7d0eb52f97da108963ce80", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c519b41d-e9e1-4809-80bf-5a77ad5b07db", "node_type": "1", "metadata": {}, "hash": "8ba3109c253793db32cda8025719adaa6d34d3f28ea62c5410729792fe7779ef", "class_name": "RelatedNodeInfo"}}, "hash": "f86fd34098fb9512eb0fbb25c3c0354ffa012b57e7ef3a0bba1259dda10466bb", "text": "Let\u2019s make new files for these in the root of our repl.\n\nPlace the code below in the success.html file:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width\n\ntitle\n\nMySite - Success\n\n</\n\ntitle\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\n\n/>\n\n</\n\nhead\n\nbody\n\ndiv\n\nclass\n\nsection\n\ndiv\n\nclass\n\ncontainer\n\narticle\n\nclass\n\nmessage is-large is-success\n\ndiv\n\nclass\n\nmessage-header\n\nCongratulations!\n\n</\n\n</\n\ndiv\n\ndiv\n\nclass\n\nmessage-body\n\nYou have purchased a brick. We hope you build great big things with your brick and come back to buy more bricks from us. May the bricks be ever in your favour and the bricklaying be bountiful and swift.\n\n</\n\ndiv\n\n</\n\narticle\n\nscript\n\nsrc\n\nscript.js\n\n</\n\nscript\n\n</\n\nbody\n\n</\n\nhtml\n\nWe can test this page by adding the file name as the button's href inside the script.js:\n\nnewBrickButton\n\nhref\n\n\"success.html\"\n\nHere\u2019s how the success page will look - success.html:\n\nPlace the code below in the cancel.html file:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nhead\n\nmeta\n\ncharset\n\nutf-8\n\nmeta\n\nname\n\nviewport\n\ncontent\n\nwidth=device-width\n\ntitle\n\nMySite- Cancel\n\n</\n\ntitle\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\nhttps://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.2/css/bulma.min.css\n\n/>\n\n</\n\nhead\n\nbody\n\ndiv\n\nclass\n\nsection\n\ndiv\n\nclass\n\ncontainer\n\narticle\n\nclass\n\nmessage is-large is-danger\n\ndiv\n\nclass\n\nmessage-header\n\nFailed!\n\n</\n\n</\n\ndiv\n\ndiv\n\nclass\n\nmessage-body\n\nYou have failed to purchase a brick. Please come back and try again when you are ready to purchase a brick.\n\n</\n\ndiv\n\n</\n\narticle\n\nscript\n\nsrc\n\nscript.js\n\n</\n\nscript\n\n</\n\nbody\n\n</\n\nhtml\n\nWe can test this page by adding the file name as the button's href inside the script.js:\n\nnewBrickButton\n\nhref\n\n\"cancel.html\"\n\nAnd here\u2019s how the cancel page will look:\n\nAlright, now that we have the groundwork on the frontend, this brings us to Part 3 \u2013 connecting the parts!\n\nPart 3: Connecting the Parts\u200b\n\nGoing back to our server repl, we\u2019ll notice the YOUR_DOMAIN constant. Set that with the value of your repl \u201cfrontend\u201d URL.\n\ne.g. My frontend URL is: https://bricksite-stripe-checkout.ritza.repl.co as you can see below:\n\nReplace YOUR_DOMAIN with the frontend URL:\n\nconst\n\nYOUR_DOMAIN\n\n\"https://bricksite-stripe-checkout.ritza.repl.co\"\n\nNow, within the create-checkout-session post request, we need to do a couple of things. The first is to define the payment methods available:\n\npayment_method_types\n\n'card'\n\nNext is to define the line_items. We want to add our own content here that would get passed from the frontend Replit, so we define the product inventory information based on what is sent through to the frontend:\n\nline_items\n\nname\n\nreq\n\nbody\n\nname\n\nimages\n\nreq\n\nbody\n\nimages\n\ndescription\n\nreq\n\nbody\n\ndesc\n\namount\n\nreq\n\nbody\n\nprice\n\ncurrency\n\n'usd'\n\nquantity\n\nNext, we need to define the mode. There are three options supported by Stripe: payment, subscription or setup. One-time purchases use the payment mode.\n\nmode\n\n\"payment\"\n\nLastly, we need to define the success and cancel pages; the same pages we created earlier on the frontend.", "start_char_idx": 10941, "end_char_idx": 14050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c519b41d-e9e1-4809-80bf-5a77ad5b07db": {"__data__": {"id_": "c519b41d-e9e1-4809-80bf-5a77ad5b07db", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5fe2cb41-7575-4633-9f0b-c9cda30f141a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "f86fd34098fb9512eb0fbb25c3c0354ffa012b57e7ef3a0bba1259dda10466bb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0813076f-460e-45b6-8277-c3f9a50e656f", "node_type": "1", "metadata": {}, "hash": "7e7ef7e03e76da35688c7fd30307f11779fb64af7403d1131903992ed72f8025", "class_name": "RelatedNodeInfo"}}, "hash": "8ba3109c253793db32cda8025719adaa6d34d3f28ea62c5410729792fe7779ef", "text": "The first is to define the payment methods available:\n\npayment_method_types\n\n'card'\n\nNext is to define the line_items. We want to add our own content here that would get passed from the frontend Replit, so we define the product inventory information based on what is sent through to the frontend:\n\nline_items\n\nname\n\nreq\n\nbody\n\nname\n\nimages\n\nreq\n\nbody\n\nimages\n\ndescription\n\nreq\n\nbody\n\ndesc\n\namount\n\nreq\n\nbody\n\nprice\n\ncurrency\n\n'usd'\n\nquantity\n\nNext, we need to define the mode. There are three options supported by Stripe: payment, subscription or setup. One-time purchases use the payment mode.\n\nmode\n\n\"payment\"\n\nLastly, we need to define the success and cancel pages; the same pages we created earlier on the frontend.\n\nsuccess_url\n\n${\n\nYOUR_DOMAIN\n\n/success.html\n\ncancel_url\n\n${\n\nYOUR_DOMAIN\n\n/cancel.html\n\nAltogether, the index.js of the server-side repl now looks as follows (I've also added a console.log line inside our request so that we can confirm the incoming request body):\n\nconst\n\nexpress\n\nrequire\n\n\"express\"\n\nconst\n\nstripe\n\nrequire\n\n\"stripe\"\n\nprocess\n\nenv\n\nSTRIPE_KEY\n\nvar\n\ncors\n\nrequire\n\n\"cors\"\n\nconst\n\napp\n\nexpress\n\napp\n\nuse\n\nexpress\n\nurlencoded\n\nextended\n\ntrue\n\napp\n\nuse\n\nexpress\n\njson\n\napp\n\nuse\n\ncors\n\nconst\n\nYOUR_DOMAIN\n\n\"https://bricksite-stripe-checkout.ritza.repl.co\"\n\napp\n\npost\n\n\"/create-checkout-session\"\n\nasync\n\nreq\n\nres\n\n=>\n\nconsole\n\nlog\n\n\"REQUEST\"\n\nreq\n\nbody\n\nconst\n\nsession\n\nawait\n\nstripe\n\ncheckout\n\nsessions\n\ncreate\n\npayment_method_types\n\n\"card\"\n\nline_items\n\nname\n\nreq\n\nbody\n\nname\n\nimages\n\nreq\n\nbody\n\nimages\n\ndescription\n\nreq\n\nbody\n\ndesc\n\namount\n\nreq\n\nbody\n\nprice\n\ncurrency\n\n\"usd\"\n\nquantity\n\nmode\n\n\"payment\"\n\nsuccess_url\n\n${\n\nYOUR_DOMAIN\n\n/success.html\n\ncancel_url\n\n${\n\nYOUR_DOMAIN\n\n/cancel.html\n\nres\n\njson\n\nid\n\nsession\n\nid\n\napp\n\nlisten\n\n4242\n\n=>\n\nconsole\n\nlog\n\n\"Running on port 4242\"\n\nBack to BrickSite\u200b\n\nFirst, we need to add Stripe as a CDN dependency to our site. To do this, paste the following code between the <head> ... </head> tags of your index.js.\n\nscript\n\nsrc\n\nhttps://js.stripe.com/v3/\n\n</\n\nscript\n\nNow, going back to script.js, we want to define a new instance of Stripe with your publishable API key (you will find this in the Load Stripe.js section of the Integration Builder walkthrough):\n\nvar\n\nstripe\n\nStripe\n\nYOUR_API_KEY\n\nNext, we want to create onclick event listeners to our button definitions so that we can initiate the purchase when the button is clicked.\n\nUnderneath the button definitions in script.js, add the following:\n\nnewBrickButton\n\nonclick\n\nbuttonClick\n\nNow, at the bottom of the page, we want to define the function buttonClick as the function that will execute when the button is clicked.\n\nasync\n\nfunction\n\nbuttonClick\n\nevent\n\nInside buttonClick, we paste in the prebuilt checkout page\u2019s HTML script content from the \"Fetch a Checkout Session\" section of the Integration builder walkthrough:\n\nasync\n\nfunction\n\nbuttonClick\n\nevent\n\nfetch\n\n\"/create-checkout-session\"\n\nmethod\n\n\"POST\"\n\nthen\n\nfunction\n\nresponse\n\nreturn\n\nresponse\n\njson\n\nthen\n\nfunction\n\nsession\n\nreturn\n\nstripe\n\nredirectToCheckout\n\nsessionId\n\nsession\n\nid\n\nthen\n\nfunction\n\nresult\n\n// If redirectToCheckout fails due to a browser or network\n\n// error, you should display the localized error message to your\n\n// customer using error.message.\n\nif\n\nresult\n\nerror\n\nalert\n\nresult\n\nerror\n\nmessage\n\ncatch\n\nfunction\n\nerror\n\nconsole\n\nerror\n\n\"Error:\"\n\nerror\n\nThis way, each button will trigger a call to our server endpoint /create-checkout-session when clicked.\n\nWe need to add a couple more things to allow fetch to function:\n\nAt the very top of the buttonClick method, add the following to enable registering the window event of 'clicking':\n\nevent\n\nevent\n\n||\n\nwindow\n\nevent\n\nvar\n\ntarget\n\nevent\n\ntarget\n\n||\n\nevent\n\nsrcElement\n\nNext we want to reference the brick that we clicked on. Each brick has an id that we can reference it by, that corresponds with its index in the BRICKS array. We get and parse the id as follows:\n\nvar\n\nid\n\ntarget\n\nid\n\nlet\n\nparseInt\n\nid\n\nAt the moment, the code is dispatching a POST request to /create-checkout-session, which isn't exactly right.", "start_char_idx": 13331, "end_char_idx": 17417, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0813076f-460e-45b6-8277-c3f9a50e656f": {"__data__": {"id_": "0813076f-460e-45b6-8277-c3f9a50e656f", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c519b41d-e9e1-4809-80bf-5a77ad5b07db", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "8ba3109c253793db32cda8025719adaa6d34d3f28ea62c5410729792fe7779ef", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cabe76e3-a8cb-4525-b696-81b0842f803a", "node_type": "1", "metadata": {}, "hash": "fc0d1a2b2718674e2bce1a60659cdd5c1a5eb367d6eddb47cfe254f0a9fdf759", "class_name": "RelatedNodeInfo"}}, "hash": "7e7ef7e03e76da35688c7fd30307f11779fb64af7403d1131903992ed72f8025", "text": "We need to add a couple more things to allow fetch to function:\n\nAt the very top of the buttonClick method, add the following to enable registering the window event of 'clicking':\n\nevent\n\nevent\n\n||\n\nwindow\n\nevent\n\nvar\n\ntarget\n\nevent\n\ntarget\n\n||\n\nevent\n\nsrcElement\n\nNext we want to reference the brick that we clicked on. Each brick has an id that we can reference it by, that corresponds with its index in the BRICKS array. We get and parse the id as follows:\n\nvar\n\nid\n\ntarget\n\nid\n\nlet\n\nparseInt\n\nid\n\nAt the moment, the code is dispatching a POST request to /create-checkout-session, which isn't exactly right. We want it to be to SERVER_URL/create-checkout-session. Let's create a constant that's the URL and change the request destination as follows:\n\nconst\n\nAPI_URL\n\n\"https://stripe-checkout-server.ritza.repl.co\"\n\nreturn\n\nfetch\n\nAPI_URL\n\n\"/create-checkout-session\"\n\n...\n\nInside the fetch request declaration and underneath method: \"POST\", we want to add the following to enable CORS and allow json content to be sent:\n\nmode\n\n'cors'\n\nheaders\n\n'Content-Type'\n\n'application/json'\n\nUnderneath this, we now want to send our body content. This will allow us to send the brick details to Stripe on the server-side, so that it can display it on the checkout page:\n\nbody\n\nJSON\n\nstringify\n\nname\n\nBRICKS\n\nname\n\nimages\n\nBRICKS\n\nimages\n\ndesc\n\nBRICKS\n\ndesc\n\nprice\n\nBRICKS\n\ncost\n\n100\n\n(We need to multiply the price by 100 because Stripe uses cents definition for pricing, so price: 100 equals $1.)", "start_char_idx": 16807, "end_char_idx": 18294, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cabe76e3-a8cb-4525-b696-81b0842f803a": {"__data__": {"id_": "cabe76e3-a8cb-4525-b696-81b0842f803a", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0813076f-460e-45b6-8277-c3f9a50e656f", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "7e7ef7e03e76da35688c7fd30307f11779fb64af7403d1131903992ed72f8025", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9da3b484-7a98-4c02-a946-c5b61c054d8e", "node_type": "1", "metadata": {}, "hash": "11e6d9e31ab19f9d4849c20a1ae65d9ee4312fc813632b8942510d895695a153", "class_name": "RelatedNodeInfo"}}, "hash": "fc0d1a2b2718674e2bce1a60659cdd5c1a5eb367d6eddb47cfe254f0a9fdf759", "text": "This will allow us to send the brick details to Stripe on the server-side, so that it can display it on the checkout page:\n\nbody\n\nJSON\n\nstringify\n\nname\n\nBRICKS\n\nname\n\nimages\n\nBRICKS\n\nimages\n\ndesc\n\nBRICKS\n\ndesc\n\nprice\n\nBRICKS\n\ncost\n\n100\n\n(We need to multiply the price by 100 because Stripe uses cents definition for pricing, so price: 100 equals $1.)\n\nAltogether, the content of script.js now looks like:\n\nconst\n\nBRICKS\n\nname\n\n\"Brickson Brick\"\n\ndesc\n\n\"this is a plain brick\"\n\nstyle\n\n\"is-info\"\n\ncost\n\nimages\n\n\"https://www.kulucrete.co.za/website/wp-content/uploads/2016/11/smooth-brick.jpg\"\n\nname\n\n\"Bricketty Brick\"\n\ndesc\n\n\"this is a cooler brick\"\n\nstyle\n\n\"is-warning\"\n\ncost\n\nimages\n\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJc_W56qiCUiHHECVkar1jKQSrTniYAaqL_g&usqp=CAU\"\n\nname\n\n\"MyBrickerty McBrickson\"\n\ndesc\n\n\"this is the best brick\"\n\nstyle\n\n\"is-success\"\n\ncost\n\n100\n\nimages\n\n\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQ6LWKwpEFAfNXgPT6Ot5xdjHbqoKYa6ktG0g&usqp=CAU\"\n\nvar\n\nstripe\n\nStripe\n\n\"pk_test_51IKlwdAhJUZ4ZUqHO9ukmofCvmpp4ttlqsSpupeTYwiDJTYOVnh2n0xNYhYzP9Tkw3ddNXGe5LZliOGu3f8sxX6N001zb0122M\"\n\nfor\n\nvar\n\nBRICKS\n\nlength\n\n++\n\nlet\n\nnewBrick\n\ndocument\n\ncreateElement\n\n\"div\"\n\nnewBrick\n\nclassName\n\n\"tile is-parent\"\n\nlet\n\nnewBrickArticle\n\ndocument\n\ncreateElement\n\n\"article\"\n\nnewBrickArticle\n\nclassName\n\n\"tile is-child notification \"\n\nBRICKS\n\nstyle\n\nlet\n\nnewBrickTitle\n\ndocument\n\ncreateElement\n\n\"p\"\n\nnewBrickTitle\n\nclassName\n\n\"title\"\n\nnewBrickTitle\n\ninnerHTML\n\nBRICKS\n\nname\n\nlet\n\nnewBrickDesc\n\ndocument\n\ncreateElement\n\n\"p\"\n\nnewBrickDesc\n\nclassName\n\n\"subtitle\"\n\nnewBrickDesc\n\ninnerHTML\n\nBRICKS\n\ndesc\n\nlet\n\nnewBrickCost\n\ndocument\n\ncreateElement\n\n\"div\"\n\nnewBrickCost\n\nclassName\n\n\"box\"\n\nnewBrickCost\n\ninnerHTML\n\n\"This brick costs: $\"\n\nBRICKS\n\ncost\n\nlet\n\nnewBrickButton\n\ndocument\n\ncreateElement\n\n\"a\"\n\nnewBrickButton\n\nid\n\nnewBrickButton\n\nclassName\n\n\"button is-dark\"\n\nnewBrickButton\n\ninnerHTML\n\n\"Buy this brick\"\n\nnewBrickButton\n\nonclick\n\nbuttonClick\n\nnewBrickArticle\n\nappendChild\n\nnewBrickTitle\n\nnewBrickArticle\n\nappendChild\n\nnewBrickDesc\n\nnewBrickArticle\n\nappendChild\n\nnewBrickCost\n\nnewBrickArticle\n\nappendChild\n\nnewBrickButton\n\nnewBrick\n\nappendChild\n\nnewBrickArticle\n\ndocument\n\ngetElementById\n\n\"bricks\"\n\nappendChild\n\nnewBrick\n\nasync\n\nfunction\n\nbuttonClick\n\nevent\n\nevent\n\nevent\n\n||\n\nwindow\n\nevent\n\nvar\n\ntarget\n\nevent\n\ntarget\n\n||\n\nevent\n\nsrcElement\n\nvar\n\nid\n\ntarget\n\nid\n\nlet\n\nparseInt\n\nid\n\nconst\n\nAPI_URL\n\n\"https://stripe-checkout-server.ritza.repl.co\"\n\nreturn\n\nfetch\n\nAPI_URL\n\n\"/create-checkout-session\"\n\nmethod\n\n\"POST\"\n\nmode\n\n\"cors\"\n\nheaders\n\n\"Content-Type\"\n\n\"application/json\"\n\nbody\n\nJSON\n\nstringify\n\nname\n\nBRICKS\n\nname\n\nimages\n\nBRICKS\n\nimages\n\ndesc\n\nBRICKS\n\ndesc\n\nprice\n\nBRICKS\n\ncost\n\n100\n\nthen\n\nfunction\n\nresponse\n\nreturn\n\nresponse\n\njson\n\nthen\n\nfunction\n\nsession\n\nreturn\n\nstripe\n\nredirectToCheckout\n\nsessionId\n\nsession\n\nid\n\nthen\n\nfunction\n\nresult\n\n// If redirectToCheckout fails due to a browser or network\n\n// error, you should display the localized error message to your\n\n// customer using error.message.\n\nif\n\nresult\n\nerror\n\nalert\n\nresult\n\nerror\n\nmessage\n\ncatch\n\nfunction\n\nerror\n\nconsole\n\nerror\n\n\"Error:\"\n\nerror\n\nLet's Get Testing!\u200b\n\nTo test, make sure the server-side is running.", "start_char_idx": 17944, "end_char_idx": 21147, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9da3b484-7a98-4c02-a946-c5b61c054d8e": {"__data__": {"id_": "9da3b484-7a98-4c02-a946-c5b61c054d8e", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "15997d90432d8b04764d6ef7993a9aa489247a70037409025243cd51d037dbe4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cabe76e3-a8cb-4525-b696-81b0842f803a", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}, "hash": "fc0d1a2b2718674e2bce1a60659cdd5c1a5eb367d6eddb47cfe254f0a9fdf759", "class_name": "RelatedNodeInfo"}}, "hash": "11e6d9e31ab19f9d4849c20a1ae65d9ee4312fc813632b8942510d895695a153", "text": "if\n\nresult\n\nerror\n\nalert\n\nresult\n\nerror\n\nmessage\n\ncatch\n\nfunction\n\nerror\n\nconsole\n\nerror\n\n\"Error:\"\n\nerror\n\nLet's Get Testing!\u200b\n\nTo test, make sure the server-side is running. You can confirm this by making sure you see the \"Stop\" button at the top:\n\nNow go back to the frontend, and press \"Run\" there too. Unlike the server-side, it won't continue to say \"Stop\", but it is running. Now we are ready to attempt to buy a brick by clicking on a brick's \"Buy this brick\" button.\n\nDebugging\u200b\n\nOn running the request, you may get the error:\n\nUnhandledPromiseRejectionWarning: Error: In order to use Checkout, you must\n\nset\n\nan account or business name at https://dashboard.stripe.com/account.\n\nTo fix this, follow the link and add a company name on your Stripe dashboard.\n\nYou may also get the error, \"Does not have permission to redirect\" after clicking on \"Buy this brick\" using the Replit browser preview mode. In order to avoid this, open the frontend in a new tab by clicking on the \"Open in new tab\" icon:\n\nBuying a Brick\u200b\n\nClicking on \"Buy this brick\" on any of the bricks redirects to the Stripe session checkout page thanks to our server-side creating the session and sending the session id back to the frontend. I've chosen to buy a Bricketty Brick:\n\nNow test the purchase process by entering the Stripe test payment card details:\n\nCard number: 4242 4242 4242 4242\n\nEmail address, expiry date, CVV and name on card can be anything. Pressing \"Pay $5.00\" should redirect to our success.html page:\n\nWe've successfully made a purchase with Stripe!\n\nStripe Server\u200b\n\nBrickSite\u200b\n\n< Previous: GraphQL Part 2: Creating a web application\n\nNext: Predictive text engine >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nRequirements\n\nPart 1: Start Your Replit Stripe ServerA brief explanation:\n\nPart 2: Buying Bricks With a Repl Frontend1. Making BrickSite\n\nPart 3: Connecting the PartsBack to BrickSite\n\nLet's Get Testing!DebuggingBuying a Brick\n\nStripe Server\n\nBrickSite", "start_char_idx": 20973, "end_char_idx": 22939, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"f8b4af07-e0c0-42d2-83ea-e7576103fbef": {"node_ids": ["b6ead443-c7ac-4196-a349-6c7cc8c72796", "32d877d8-4de3-4ecf-bbbd-fce770b6d4a3", "cebbae42-73b3-471f-bdf9-cc33a19c5089", "93804e09-4c4f-4f7e-b476-ed31ef2b69e8", "5fe2cb41-7575-4633-9f0b-c9cda30f141a", "c519b41d-e9e1-4809-80bf-5a77ad5b07db", "0813076f-460e-45b6-8277-c3f9a50e656f", "cabe76e3-a8cb-4525-b696-81b0842f803a", "9da3b484-7a98-4c02-a946-c5b61c054d8e"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/online-store-checkout-process.html"}}}, "docstore/metadata": {"b6ead443-c7ac-4196-a349-6c7cc8c72796": {"doc_hash": "4e6afdd9c4c9821b23fff728a25d41b26a7c36f7b71a42b7a3b34213fe58c80f", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "32d877d8-4de3-4ecf-bbbd-fce770b6d4a3": {"doc_hash": "68e6f7c84bcb85f9f18820f21d2a997416c9f46355340849fac030d149660e12", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "cebbae42-73b3-471f-bdf9-cc33a19c5089": {"doc_hash": "22eba00a142077f68948696ccd6343d348b5da5f55c94600e899823e9c56fb45", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "93804e09-4c4f-4f7e-b476-ed31ef2b69e8": {"doc_hash": "a1de338d8e1873fb445772a5312c643d599d6ae5aa7d0eb52f97da108963ce80", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "5fe2cb41-7575-4633-9f0b-c9cda30f141a": {"doc_hash": "f86fd34098fb9512eb0fbb25c3c0354ffa012b57e7ef3a0bba1259dda10466bb", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "c519b41d-e9e1-4809-80bf-5a77ad5b07db": {"doc_hash": "8ba3109c253793db32cda8025719adaa6d34d3f28ea62c5410729792fe7779ef", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "0813076f-460e-45b6-8277-c3f9a50e656f": {"doc_hash": "7e7ef7e03e76da35688c7fd30307f11779fb64af7403d1131903992ed72f8025", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "cabe76e3-a8cb-4525-b696-81b0842f803a": {"doc_hash": "fc0d1a2b2718674e2bce1a60659cdd5c1a5eb367d6eddb47cfe254f0a9fdf759", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}, "9da3b484-7a98-4c02-a946-c5b61c054d8e": {"doc_hash": "11e6d9e31ab19f9d4849c20a1ae65d9ee4312fc813632b8942510d895695a153", "ref_doc_id": "f8b4af07-e0c0-42d2-83ea-e7576103fbef"}}}