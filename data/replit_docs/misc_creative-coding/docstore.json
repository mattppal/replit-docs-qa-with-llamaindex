{"docstore/data": {"2cf28f81-b887-4d17-8e06-48dd2abcc91b": {"__data__": {"id_": "2cf28f81-b887-4d17-8e06-48dd2abcc91b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/creative-coding.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b2f73f5d-2eea-4851-8b53-96f521e9adbe", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/creative-coding.html"}, "hash": "5024afb39a5fa43293888688c25cf5f3ab6ec63c2a98e269b3c6a67834d391eb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c998cbe7-5680-448b-8cdd-fcb0a9ab45d0", "node_type": "1", "metadata": {}, "hash": "e1aa74eb609480f6dcb04f885d775d6ece49efad9455e27bb223e2a80903e967", "class_name": "RelatedNodeInfo"}}, "hash": "738c6d18204b8074cd4674ffca6a72618f9319d0b2fc249066bf5765677ed673", "text": "100\n\nfill\n\n\"pink\"\n\ntriangle\n\n250\n\n75\n\n300\n\n300\n\n200\n\n275\n\nfill\n\n\"lavender\"\n\nsquare\n\n250\n\n300\n\n200\n\nIn this sketch, we draw a few shapes in various colors on the screen, in a kind of 80s geometric art style:\n\nThe p5.js website has a guide to getting started, plus a lot of references and examples to experiment with.\n\nKaboom\u200b\n\nKaboom.js is Replit's own homegrown JavaScript game framework, launched in 2021. It's geared towards making 2D games, particularly platform games, although it has enough flexibility to create games in other formats too. Because it is a JavaScript library, it can be used to develop web games, making it easy to share and distribute your creations with the world.\n\nReplit has two official templates for Kaboom:\n\nA specialized Kaboom template, with an integrated sprite editor and gallery, as well as pre-defined folders for assets. This is perfect for getting started with Kaboom and making games in general, as you don't need to worry about folder structures or sourcing graphics.\n\nA 'light' template that is a simple web template with just the Kaboom package referenced. This is for coders with a little more experience, as the intent is to give you more control and flexibility\n\nOne of the great features of Kaboom is the simple way you can define level maps, drawing them with text characters, and then mapping the text characters to game elements:\n\nconst\n\nlevel\n\n\"                          $\"\n\n\"                          $\"\n\n\"                          $\"\n\n\"                          $\"\n\n\"                          $\"\n\n\"           $$         =   $\"\n\n\"  %      ====         =   $\"\n\n\"                      =   $\"\n\n\"                      =    \"\n\n\"       ^^      = >    =   @\"\n\n\"===========================\"\n\nAnother interesting aspect of Kaboom is that it makes heavy use of composition. This allows you to create characters with complex behaviour by combining multiple simple components:\n\n\"c\"\n\n=>\n\nsprite\n\n\"coin\"\n\narea\n\nsolid\n\ncleanup\n\nlifespan\n\n0.4\n\nfade\n\n0.01\n\norigin\n\n\"bot\"\n\nKaboom has a fast-growing resource and user base. The official Kaboom site documents each feature, and also has some specific examples. There is also a site with complete tutorials for building different types of games at Make JavaScript Games.\n\nPygame\u200b\n\nPygame is a well-established library (from 2000!) for making games. It has functionality to draw shapes and images to the screen, get user input, play sounds, and more. Because it has been around for so long, there are plenty of examples and tutorials for it on the web.\n\nReplit has a specialised Python template for Pygame. Choose this template for creating Pygame games:\n\nTry out this code in a Pygame repl:\n\nhttps://replit.com/@ritza/pygame-example\n\nimport\n\npygame\n\npygame\n\ninit\n\nbounds\n\n300\n\n300\n\nwindow\n\npygame\n\ndisplay\n\nset_mode\n\nbounds\n\npygame\n\ndisplay\n\nset_caption\n\n\"box\"\n\ncolor\n\n255\n\n100\n\n100\n\nwhile\n\nTrue\n\npygame\n\ntime\n\ndelay\n\n100\n\nfor\n\nevent\n\nin\n\npygame\n\nevent\n\nget\n\nif\n\nevent\n\ntype\n\n==\n\npygame\n\nQUIT\n\nrun\n\nFalse\n\nkeys\n\npygame\n\nkey\n\nget_pressed\n\nif\n\nkeys\n\npygame\n\nK_LEFT\n\nelif\n\nkeys\n\npygame\n\nK_RIGHT\n\nelif\n\nkeys\n\npygame\n\nK_UP\n\nelif\n\nkeys\n\npygame\n\nK_DOWN\n\nwindow\n\nfill\n\npygame\n\ndraw\n\nrect\n\nwindow\n\ncolor\n\n10\n\n10\n\npygame\n\ndisplay\n\nupdate\n\nThis code initializes a new pygame instance and creates a window to display the output in. Then it has a main game loop, which listens for keyboard arrow key presses, and moves a small block around the screen based on the keys pressed.\n\nCheck out some of our tutorials for Pygame :\n\nA 2D platform game\n\nA Juggling game\n\nSnake\n\nPyxel\u200b\n\nPyxel is specialised for making retro-type games, inspired by console games from the 80s and early 90s. You can only display 16 colors, and no more than 4 sound samples can be played at once, just like on the earlier Nintendo, Sega, and other classic games systems. If you're into pixel art, this is the game engine for you.\n\nChoose the 'Pyxel' template on Replit to create a new Pyxel environment.", "start_char_idx": 0, "end_char_idx": 3941, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c998cbe7-5680-448b-8cdd-fcb0a9ab45d0": {"__data__": {"id_": "c998cbe7-5680-448b-8cdd-fcb0a9ab45d0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/creative-coding.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b2f73f5d-2eea-4851-8b53-96f521e9adbe", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/creative-coding.html"}, "hash": "5024afb39a5fa43293888688c25cf5f3ab6ec63c2a98e269b3c6a67834d391eb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cf28f81-b887-4d17-8e06-48dd2abcc91b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/creative-coding.html"}, "hash": "738c6d18204b8074cd4674ffca6a72618f9319d0b2fc249066bf5765677ed673", "class_name": "RelatedNodeInfo"}}, "hash": "e1aa74eb609480f6dcb04f885d775d6ece49efad9455e27bb223e2a80903e967", "text": "Then it has a main game loop, which listens for keyboard arrow key presses, and moves a small block around the screen based on the keys pressed.\n\nCheck out some of our tutorials for Pygame :\n\nA 2D platform game\n\nA Juggling game\n\nSnake\n\nPyxel\u200b\n\nPyxel is specialised for making retro-type games, inspired by console games from the 80s and early 90s. You can only display 16 colors, and no more than 4 sound samples can be played at once, just like on the earlier Nintendo, Sega, and other classic games systems. If you're into pixel art, this is the game engine for you.\n\nChoose the 'Pyxel' template on Replit to create a new Pyxel environment.\n\nTry this code in a Pyxel repl to draw rectangles of random size and color, changing every two frames:\n\nhttps://replit.com/@ritza/pyxel-example\n\nimport\n\npyxel\n\nimport\n\nrandom\n\nclass\n\nApp\n\ndef\n\n__init__\n\nself\n\npyxel\n\ninit\n\n160\n\n120\n\ncaption\n\n\"Pyxel Squares!\"\n\npyxel\n\nrun\n\nself\n\nupdate\n\nself\n\ndraw\n\ndef\n\nupdate\n\nself\n\nif\n\npyxel\n\nbtnp\n\npyxel\n\nKEY_Q\n\npyxel\n\nquit\n\ndef\n\ndraw\n\nself\n\nif\n\npyxel\n\nframe_count\n\n==\n\npyxel\n\ncls\n\npyxel\n\nrect\n\nrandom\n\nrandint\n\n160\n\nrandom\n\nrandint\n\n120\n\n20\n\n20\n\nrandom\n\nrandint\n\n15\n\nApp\n\nTake a look in the examples folder on the Pyxel GitHub project to see more ways to use Pyxel.\n\nGLSL\u200b\n\nOn the more advanced end of the spectrum, Replit supports GLSL projects. GLSL (OpenGL Shading Language) is a C-style language for creating graphics shaders. Shaders are programs that (usually) run on graphics cards as part of a graphics rendering pipeline. There are many types of shaders - the two most common are vertex shaders and fragment (or pixel) shaders. Vertex shaders compute the position of objects in the graphics world, and pixel shaders compute the color that each pixel should be. This previously required writing code for specific graphics hardware, but GLSL is a high-level language that can run on many different graphics hardware makes.\n\nGLSL gives you control over the graphics rendering pipeline, enabling you to create very advanced graphics. GLSL has many features to handle vector and matrix manipulations, as these are core to graphics processing.\n\nChoose the \"GLSL\" template to create a new GLSL repl:\n\nThe template has a sample fragment shader in the file shader.glsl as well as some web code to setup a WebGL resource to apply the shader to. Running the sample will show some pretty gradients on the screen that vary with time and as you move the mouse over it.\n\nTry this code out in the shader file to make a kind of moving \"plaid\" effect:\n\nhttps://replit.com/@ritza/glsl-example\n\nprecision mediump\n\nfloat\n\nvarying vec2 a_pos\n\nuniform\n\nfloat\n\nu_time\n\nvoid\n\nmain\n\nvoid\n\ngl_FragColor\n\nvec4\n\na_pos\n\nsin\n\nu_time\n\na_pos\n\na_pos\n\nsin\n\nu_time\n\na_pos\n\na_pos\n\na_pos\n\nsin\n\nu_time\n\n1.0\n\nHere we set gl_FragColor, which is the color for a specific pixel on the screen. A pixel color in GLSL is represented using a vec4 data type, which is a vector of four values, representing red, green, blue, and alpha. In this shader, we vary the pixel color depending on it's co-ordinate a_pos, and the current frame time u_time.\n\nIf you'd like to dive deeper into the world of advanced graphics and shaders, you can visit Learn OpenGL's Getting Started: Shaders resource.\n\nWrap up\u200b\n\nThat wraps up this list of the official creative coding language templates on Replit. Of course, Replit is flexible enough that you can import and use whatever framework or library you want in your projects, so you are not limited to the tools we've looked at here. Replit is also adding more languages and templates everyday, so be sure to watch out for new additions!\n\n< Previous: Classic Basic on Replit\n\nNext: Running Rails on Replit >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nWhat is creative coding?Python turtlep5.jsKaboomPygamePyxelGLSL\n\nWrap up", "start_char_idx": 3299, "end_char_idx": 7102, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"b2f73f5d-2eea-4851-8b53-96f521e9adbe": {"node_ids": ["2cf28f81-b887-4d17-8e06-48dd2abcc91b", "c998cbe7-5680-448b-8cdd-fcb0a9ab45d0"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/misc/creative-coding.html"}}}, "docstore/metadata": {"2cf28f81-b887-4d17-8e06-48dd2abcc91b": {"doc_hash": "738c6d18204b8074cd4674ffca6a72618f9319d0b2fc249066bf5765677ed673", "ref_doc_id": "b2f73f5d-2eea-4851-8b53-96f521e9adbe"}, "c998cbe7-5680-448b-8cdd-fcb0a9ab45d0": {"doc_hash": "e1aa74eb609480f6dcb04f885d775d6ece49efad9455e27bb223e2a80903e967", "ref_doc_id": "b2f73f5d-2eea-4851-8b53-96f521e9adbe"}}}