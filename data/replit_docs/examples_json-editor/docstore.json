{"docstore/data": {"ad52e671-8a14-41e2-a904-501db30186ec": {"__data__": {"id_": "ad52e671-8a14-41e2-a904-501db30186ec", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/extensions/examples/json-editor.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "aeee55f8-9682-4958-9c7b-a7844cd52ba5", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/extensions/examples/json-editor.html"}, "hash": "4e108a02d923c5aadff3fa8356d39aa71f1688a36b7f27f0ac81ff031d328eae", "class_name": "RelatedNodeInfo"}}, "hash": "990141f2ad8fa157c65cf82d5fc166a67d73d919fe5ece57e65a4641b4a32dab", "text": "extensionPort\n\n=>\n\nconst\n\nfilePath\n\nawait\n\nextensionPort\n\nfilePath\n\nsetPath\n\nfilePath\n\nCreate the File Watcher\u200b\n\nYou can easily create a file watcher with the useWatchTextFile hook. Call the hook, pass in the file path, and derive content and writeChange from it.\n\nconst\n\ncontent\n\nwriteChange\n\nuseWatchTextFile\n\nfilePath\n\npath\n\nReflecting file contents\u200b\n\nCreate a parsedContent React Memo that returns the content file value as parsed JSON. If there is an error parsing it, return null instead.\n\nThe React useMemo hook caches a result based on an array of dependencies between re-renders to improve performance. Caching reduces the amount of computing required in a process, ultimately improving performance.\n\nconst\n\nparsedContent\n\nReact\n\nuseMemo\n\n=>\n\ntry\n\nreturn\n\nJSON\n\nparse\n\ncontent\n\ncatch\n\nreturn\n\nnull\n\ncontent\n\nHandle file changes\u200b\n\nCreate a function which handles changes from the react-json-view editor component. The updated_src property passed into this function is a JSON object.\n\nStringify the JSON object and then write it to the JSON file using the writeChange function.\n\nFinally, update the setContent state to reflect the contents of the file.\n\nconst\n\nhandleChange\n\nasync\n\nupdated_src\n\nnewContent\n\n=>\n\nconst\n\nstringified\n\nJSON\n\nstringify\n\nnewContent\n\nnull\n\nwriteChange\n\nfrom\n\nto\n\ncontent\n\nlength\n\ninsert\n\nstringified\n\nBuild the UI\u200b\n\nIt's time to start building the UI.\n\nFirst, handle loading and error states.\n\nfunction\n\nApp\n\n...\n\nif\n\nstatus\n\n===\n\n\"error\"\n\nreturn\n\nmain\n\ndiv className\n\n\"notice error\"\n\nerror\n\ntoString\n\ndiv\n\nmain\n\nelse\n\nif\n\nstatus\n\n===\n\n\"loading\"\n\nreturn\n\nmain\n\ndiv className\n\n\"notice\"\n\nLoading\n\n...\n\ndiv\n\nmain\n\nelse\n\nif\n\nstatus\n\n===\n\n\"ready\"\n\nreturn\n\nmain\n\nReady\n\nmain\n\nInstall the Extension by opening up the Command Bar (cmd/ctrl + k), navigating to Extensions, and selecting From this Repl. The extension should load and display \"Ready\" almost instantly.\n\nIf you open the webview, your extension should load for a few seconds and fail. Extensions should be developed and used within the correct pane rather than the webview.\n\nIf both path and content are valid strings, render the editor. If not, tell the user to select a file.\n\nelse\n\nif\n\nstatus\n\n===\n\n\"ready\"\n\nreturn\n\nmain\n\npath\n\n&&\n\ncontent\n\nReactJson\n\nstyle\n\nwidth\n\n'100vw'\n\nheight\n\n\"100vh\"\n\npadding\n\n\"1em\"\n\ntheme\n\n\"ocean\"\n\ndisplayDataTypes\n\nfalse\n\nsrc\n\nparsedContent\n\nonEdit\n\nhandleChange\n\nonAdd\n\nhandleChange\n\nonDelete\n\nhandleChange\n\ndiv className\n\n\"notice\"\n\nPlease\n\nselect a file\n\ndiv\n\nmain\n\nThat's it. Now install and load your Extension, and it should work.\n\nStyle your Extension\u200b\n\nRight now, the Extension has barely any styles applied to it. To make it look more polished, paste the following into App.css:\n\nhtml\n\nbody\n\nmargin\n\npadding\n\nheight\n\n100\n\nwidth\n\n100\n\ndisplay\n\nflex\n\nfont-family\n\nsans-serif\n\nbackground\n\nblack\n\ncolor\n\nwhite\n\n#root\n\nmain\n\nflex-grow\n\ndisplay\n\nflex\n\nwidth\n\n100\n\n.notice\n\nflex-grow\n\nalign-self\n\ncenter\n\njustify-self\n\ncenter\n\ntext-align\n\ncenter\n\ncolor\n\nwhite\n\nfont-size\n\n24\n\npx\n\nYour Extension is now complete! Install it, press the kebab menu on a JSON file in the file tree and then select \"Open with JSON Editor\" to start editing your JSON files with ease.\n\nSee full solution.\n\n< Previous: Examples\n\nNext: Snippet Manager >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nPrequisites\n\nSet up your Repl\n\nConfigure the manifest file\n\nBuild the JSON editorInitialize the HandshakeGet the File PathCreate the File WatcherReflecting file contentsHandle file changesBuild the UIStyle your Extension", "start_char_idx": 0, "end_char_idx": 3516, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"aeee55f8-9682-4958-9c7b-a7844cd52ba5": {"node_ids": ["ad52e671-8a14-41e2-a904-501db30186ec"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/extensions/examples/json-editor.html"}}}, "docstore/metadata": {"ad52e671-8a14-41e2-a904-501db30186ec": {"doc_hash": "990141f2ad8fa157c65cf82d5fc166a67d73d919fe5ece57e65a4641b4a32dab", "ref_doc_id": "aeee55f8-9682-4958-9c7b-a7844cd52ba5"}}}