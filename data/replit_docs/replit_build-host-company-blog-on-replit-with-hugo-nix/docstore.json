{"docstore/data": {"7d1d5092-24a9-45b9-8806-4bca7f96943c": {"__data__": {"id_": "7d1d5092-24a9-45b9-8806-4bca7f96943c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4810f7b2-781d-4737-8208-ae5e2423681d", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "hash": "f50563e7c776ffd07c96c348239e631823d5f1d4c4591e57daefa385c1e41dca", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "126395f3-9356-4b1b-93f9-d476a58309d6", "node_type": "1", "metadata": {}, "hash": "cbf050f7332dea39bb23ec576cb17ca61194d82c7a2579850ec189175d021532", "class_name": "RelatedNodeInfo"}}, "hash": "3bb167a2f8d1f28632e69af63f5a2a78cf54010bd4da4a434216e4f7a22aef1f", "text": "Hello world!\n\nThis\n\nis\n\n**\n\nmy\n\n**\n\n`first`\n\npost!\n\nPreparing for production\u200b\n\nWe now have a functional workspace in which to develop our site, but we need to make a few alterations before it's ready for public consumption. First, let's make it easier to keep unfinished posts as drafts. By default, posts created using the Terminal theme will appear as published as soon as they're created \u2013 this is probably not what we want. Luckily, it's an easy fix.\n\nHugo stores content templates in a directory called archetypes. You should see an empty directory with this name in your repl's file pane. Archetype files are named after the content type (e.g. post or page) they're used for \u2013 currently, our archetypes directory only has a single file, named default.md, which will be used for content types without custom archetypes. However, if you look at the contents of default.md, you'll notice that it looks nothing like the post we created above. This is because Hugo doesn't just look for archetypes in our site skeleton, but also in our chosen theme.\n\n+++\n\ntitle = \"{{ replace .TranslationBaseName \"-\" \" \" | title }}\"\n\ndate = \"{{ .Date }}\"\n\nauthor = \"\"\n\nauthorTwitter = \"\" #do not include @\n\ncover = \"\"\n\ntags = [\"\", \"\"]\n\nkeywords = [\"\", \"\"]\n\ndescription = \"\"\n\nshowFullContent = false\n\nreadingTime = false\n\ndraft = true\n\n+++\n\nIf a file in a top-level directory has the same name as a file in the equivalent theme directory, the former will override the latter. This allows us to make site-specific tweaks without changing our theme. Create a new post by entering the following command into your repl's shell:\n\nhugo new posts/second-post.md\n\nThis post and all subsequent new posts will be marked as drafts, and will thus only be included in our website if we run Hugo with the --buildDrafts flag. This will be useful for when we create our production repl. But before we can do that, we need to prepare this development repl to connect to it by creating a GitHub repository.\n\nSelect the version control tab in your repl's side pane and click on Create a Git Repo. This will create a local repository to track your code changes. From here, you can create snapshots of your code (called commits), which can you can revert to if needed.\n\nTo push our repl to a repository on GitHub, we'll need a GitHub account. Create one if you haven't before. Once you've created an account or logged into your existing one, return to your repl and click on Connect to GitHub. Accept the Oauth confirmation message that appears.\n\nReplit will then prompt you to specify a repository name, optional description and privacy setting. You can call your repository \"blog\". If you have a paid Replit plan, you can make it private, otherwise it will have to be public. Once you've created the GitHub repository, you'll be able to view it on your GitHub account.\n\nNow that your repl is connected to a GitHub repository, any time you make changes, those will be reflected in the version control tab. To commit those changes and push them to your GitHub repository, you can click on Commit and push in your repl's version control tab. You will be required to specify a commit message describing the changes you've made.\n\nIf our production repl will be sharing a code repository with our development repl, how will we ensure that drafts and future content aren't shown in production? One solution might be to use different branches, but that would require constant merging. All that really needs to change between development and production is the command that gets executed when we click the Run button. We'll use a bit of repl magic to make this work.\n\nFirst, replace the run directive in the .replit config file with the following:\n\nrun = \"sh run.sh\"\n\nThen create a file named run.sh and add the following code to it:\n\n#!/bin/bash\n\nif [ \"$REPL_SLUG\" == 'blog-dev' ] # draft space\n\nthen\n\nhugo serve --buildDrafts --buildFuture --bind 0.0.0.0 --port 443 --baseURL https://$REPL_SLUG--$REPL_OWNER.repl.co\n\nelse # production\n\nhugo serve --bind 0.0.0.0 --port 443 --baseURL https://$REPL_SLUG--$REPL_OWNER.repl.co\n\nfi\n\nHere we've used a couple of repl metadata environment variables to trigger different behavior when our code is run in different repls.\n\nReturn to your repl's version control tab and commit and push your changes.", "start_char_idx": 0, "end_char_idx": 4296, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "126395f3-9356-4b1b-93f9-d476a58309d6": {"__data__": {"id_": "126395f3-9356-4b1b-93f9-d476a58309d6", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4810f7b2-781d-4737-8208-ae5e2423681d", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "hash": "f50563e7c776ffd07c96c348239e631823d5f1d4c4591e57daefa385c1e41dca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7d1d5092-24a9-45b9-8806-4bca7f96943c", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "hash": "3bb167a2f8d1f28632e69af63f5a2a78cf54010bd4da4a434216e4f7a22aef1f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef6c7f00-30db-41ef-ba95-78049678d1ab", "node_type": "1", "metadata": {}, "hash": "9f29706e2c54006aba3862197727c05686984cdec050227025cf80aa036f53c9", "class_name": "RelatedNodeInfo"}}, "hash": "cbf050f7332dea39bb23ec576cb17ca61194d82c7a2579850ec189175d021532", "text": "First, replace the run directive in the .replit config file with the following:\n\nrun = \"sh run.sh\"\n\nThen create a file named run.sh and add the following code to it:\n\n#!/bin/bash\n\nif [ \"$REPL_SLUG\" == 'blog-dev' ] # draft space\n\nthen\n\nhugo serve --buildDrafts --buildFuture --bind 0.0.0.0 --port 443 --baseURL https://$REPL_SLUG--$REPL_OWNER.repl.co\n\nelse # production\n\nhugo serve --bind 0.0.0.0 --port 443 --baseURL https://$REPL_SLUG--$REPL_OWNER.repl.co\n\nfi\n\nHere we've used a couple of repl metadata environment variables to trigger different behavior when our code is run in different repls.\n\nReturn to your repl's version control tab and commit and push your changes. We are now ready to create the production repl.\n\nCreating the production repl\u200b\n\nFork your development repl. Give the new repl a different name, such as \"blog\".\n\nSince we've forked our development repl, both repls will be backed by the same repository on GitHub. This means we can commit and push changes from one repl (development) and pull those changes into the other repl (production). We could also achieve this by creating a new repl from our GitHub repository, but forking is quicker.\n\nWhen your production repl is run, you should see an almost identical website to the one in your development repl. The only difference should be that the second post won't appear in the production repl, as it is a draft.\n\nLet's test out our publishing flow.\n\nIn your development repl, add some text to content/posts/second-post.md. Specify some or all of the front matter, such as your author name and Twitter account.\n\nSet draft = false in the post's front matter.\n\nFrom the development repl's version control tab, commit and push your changes.\n\nIn your production repl, navigate to the version control tab and click on the \"\u2190 Pull\" link. This will pull the changes we just pushed from development.\n\nRerun your production repl. You should now see the contents of the second blog post live on the website.\n\nThis will be your workflow for publishing posts. Undraft, commit and push on development, then pull and rerun on production.\n\nIf you have a paid Replit plan, you should set your production repl a Deployment, so that people will always be able to reach your website.\n\nYou will probably also want to use a custom domain name, instead of blog--your-name.repl.co. Instructions for setting this up are provided here. As a bonus, following this process will also put your site behind Cloudflare's content delivery network (CDN), improving its performance and reachability across the global internet. Cloudflare is free for personal and hobby projects.\n\nNote: Please refer to these docs to ensure that you are using the correct repl.co domain format.\n\nWriting posts\u200b\n\nNow that we have a publishing platform in place, let's take a more detailed look at how to create content in Hugo.\n\nThe basis of all Hugo blogs is Markdown, a simple mark-up language for the web, originally created in 2004 by John Gruber. Markdown provides a simple, limited syntax, focused on the common needs of bloggers and other web-based writers. Basic Markdown elements are limited to headings, bold, italic and code-style text, blockquotes, lists, code blocks, horizontal rules, links and images. Markdown has been extended over the years to provide more advanced formatting, such as tables and footnotes. A cheat sheet covering both basic and extended syntax can be found here (Hugo supports both basic and extended Markdown).\n\nTo include images in your posts, upload them to the static directory. All files and subdirectories in static will be rendered as-is from your website's root URL. For example, if you create a file named static/images/pic.png, you will be able to include it in your posts by writing ![](https://docimg.replit.com/images/pic.png). You can put anything you want in static, including documents, audio files, or even videos.\n\nIf you want formatting that isn't included in Markdown, such as colored text, you can add HTML and CSS to your posts directly, but first you must configure Hugo's Markdown parser (Goldmark) to accept unsafe input. Add the following lines to config.toml:\n\n[markup.goldmark.renderer]\n\nunsafe = true\n\nStop and start your repl for the config change to take effect.\n\nHugo also provides functionality called shortcodes, which you can think of as HTML macros.", "start_char_idx": 3623, "end_char_idx": 7964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef6c7f00-30db-41ef-ba95-78049678d1ab": {"__data__": {"id_": "ef6c7f00-30db-41ef-ba95-78049678d1ab", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "4810f7b2-781d-4737-8208-ae5e2423681d", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "hash": "f50563e7c776ffd07c96c348239e631823d5f1d4c4591e57daefa385c1e41dca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "126395f3-9356-4b1b-93f9-d476a58309d6", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}, "hash": "cbf050f7332dea39bb23ec576cb17ca61194d82c7a2579850ec189175d021532", "class_name": "RelatedNodeInfo"}}, "hash": "9f29706e2c54006aba3862197727c05686984cdec050227025cf80aa036f53c9", "text": "To include images in your posts, upload them to the static directory. All files and subdirectories in static will be rendered as-is from your website's root URL. For example, if you create a file named static/images/pic.png, you will be able to include it in your posts by writing ![](https://docimg.replit.com/images/pic.png). You can put anything you want in static, including documents, audio files, or even videos.\n\nIf you want formatting that isn't included in Markdown, such as colored text, you can add HTML and CSS to your posts directly, but first you must configure Hugo's Markdown parser (Goldmark) to accept unsafe input. Add the following lines to config.toml:\n\n[markup.goldmark.renderer]\n\nunsafe = true\n\nStop and start your repl for the config change to take effect.\n\nHugo also provides functionality called shortcodes, which you can think of as HTML macros. Hugo provides built-in shortcodes for common tasks such as embedding tweets and YouTube videos. You can also create your own custom shortcodes.\n\nReplit's multiplayer editing features aren't only good for collaborative programming, but can also be used for collaborative blogging. Multiple users can work in the same file in real time, and you can use inline code threads to leave each other feedback and discuss individual words and sentences.\n\nIf you need to include diagrams in your blog posts, you can draw them using your repl's built-in Excalidraw. Just create a new file with a .draw extension and start diagramming. When you're done, select your diagram, right-click and chose \"Copy to clipboard as SVG\". Then paste into the post you want to include the diagram in. Note that Goldmark must be configured in the manner shown above for this to work, as SVG images are part of HTML.\n\nWhere next?\u200b\n\nYou've now got a fully functional static blog hosted on Replit. Some things you might want to do with it:\n\nLearn more about Hugo from the official documentation.\n\nChoose a different theme from the Hugo themes showcase or create your own.\n\nGet a few collaborators and write some more blog posts.\n\nYou can find our development and production repls below:\n\nDevelopment\n\nProduction\n\n< Previous: Using Markdown on Replit\n\nNext: How to use Excalidraw with Replit >\n\nWas this helpful?\n\nLast updated on Nov 2, 2023\n\nRepl architecture\n\nCreating the working repl\n\nPreparing for production\n\nCreating the production repl\n\nWriting posts\n\nWhere next?", "start_char_idx": 7092, "end_char_idx": 9503, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"4810f7b2-781d-4737-8208-ae5e2423681d": {"node_ids": ["7d1d5092-24a9-45b9-8806-4bca7f96943c", "126395f3-9356-4b1b-93f9-d476a58309d6", "ef6c7f00-30db-41ef-ba95-78049678d1ab"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/replit/build-host-company-blog-on-replit-with-hugo-nix.html"}}}, "docstore/metadata": {"7d1d5092-24a9-45b9-8806-4bca7f96943c": {"doc_hash": "3bb167a2f8d1f28632e69af63f5a2a78cf54010bd4da4a434216e4f7a22aef1f", "ref_doc_id": "4810f7b2-781d-4737-8208-ae5e2423681d"}, "126395f3-9356-4b1b-93f9-d476a58309d6": {"doc_hash": "cbf050f7332dea39bb23ec576cb17ca61194d82c7a2579850ec189175d021532", "ref_doc_id": "4810f7b2-781d-4737-8208-ae5e2423681d"}, "ef6c7f00-30db-41ef-ba95-78049678d1ab": {"doc_hash": "9f29706e2c54006aba3862197727c05686984cdec050227025cf80aa036f53c9", "ref_doc_id": "4810f7b2-781d-4737-8208-ae5e2423681d"}}}