{"docstore/data": {"4a1d3c90-7b70-4c5d-b74d-1a7bd73aff51": {"__data__": {"id_": "4a1d3c90-7b70-4c5d-b74d-1a7bd73aff51", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "684c187b-9eb5-4b0d-b65e-59264a94e153", "node_type": "1", "metadata": {}, "hash": "d6f8492f9f5d41dc4710e11db0e95ae07610a5c3a317434b336a478adfa78762", "class_name": "RelatedNodeInfo"}}, "hash": "97b6af07aa0b694a460706e92afd365e955e0500f11bb88711b7b49205c57f8f", "text": "load_config\n\nconfig_string\n\nreturn\n\ntoml\n\nloads\n\nconfig_string\n\nTo use this function, go back to the main function and pass config_string to this line in the main function.\n\nconfig\n\nload_config\n\nconfig_string\n\nNow let's create a couple of content strings below the config string. We're going to format these strings with a block of TOML metadata terminated by a row of five plus signs (+++++). The rest of the string will contain Markdown-formatted text. Add this block of code below the definition of config_string in the main function.\n\ncontent_strings\n\n\"\"\"\n\ntitle = \"My first entry\"\n\ndate = 2021-02-14T11:47:00+02:00\n\n+++++\n\nHello, welcome to my **blog**\n\n\"\"\"\n\n\"\"\"\n\ntitle = \"My second entry\"\n\ndate = 2021-02-15T17:47:00+02:00\n\n+++++\n\nThis is my second post.\n\n\"\"\"\n\nWe'll parse these strings in our load_content_items function. Give the function a content_strings parameter and add the following code.\n\ndef\n\nload_content_items\n\ncontent_strings\n\nitems\n\nfor\n\nitem\n\nin\n\ncontent_strings\n\nfrontmatter\n\ncontent\n\nre\n\nsplit\n\n\"^\\s*\\+\\+\\+\\+\\+\\s*$\"\n\nitem\n\nre\n\nMULTILINE\n\nitem\n\ntoml\n\nloads\n\nfrontmatter\n\nitem\n\n'content'\n\nmarkdown\n\nmarkdown\n\ncontent\n\nitems\n\nappend\n\nitem\n\n# sort in reverse chronological order\n\nitems\n\nsort\n\nkey\n\nlambda\n\n\"date\"\n\nreverse\n\nTrue\n\nreturn\n\nitems\n\nHere we use a for loop to construct a list of items from our item strings. For each one, we split up the frontmatter and content on a regular expression that will match a line of text containing five plus signs. We pass in 1 as re.split's maxsplit parameter to ensure that we only split on the first matched line, and re.MULTILINE so that our regex will work correctly in a multiline string.\n\nWe then use toml.loads() to convert the frontmatter into a dictionary. Finally, we convert the Markdown in content into HTML and add it to the dictionary we just created. The result will be a dictionary that looks something like this:\n\n'title'\n\n'My first entry'\n\n'date'\n\ndatetime\n\ndatetime\n\n2021\n\n14\n\n11\n\n47\n\ntzinfo\n\ntoml\n\ntz\n\nTomlTz\n\nobject\n\nat\n\n0x7f4032da6eb0\n\n'content'\n\n'<p>Hello, welcome to my <strong>blog</strong>.</p>'\n\nFinally, since this is a blog site, we're sorting our items dictionary in reverse chronological order. We do this by using Python's list.sort method's custom sort functionality to sort by each list entry's date value. The key parameter takes a function which it will pass each value into and use the return value to sort the list. For brevity, we've created an in-line anonymous function using a lambda expression.\n\nBack in our main function, let's pass content_strings to the load_content_items function call.\n\ncontent\n\nload_content_items\n\ncontent_strings\n\nNow let's create a template string below the content strings. This is just some HTML with Jinja code in {{ }} and {% %} blocks. Add this code block beneath the definition of content_strings in the main function.\n\ntemplate_string\n\n\"\"\"\n\n<!DOCTYPE html>\n\n<html>\n\n<body>\n\n<h1>{{ config.title }}</h1>\n\n{% for post in content %}\n\n<article>\n\n<h2>{{ post.title }}</h2>\n\n<p>Posted at {{ post.date }}</p>\n\n{{ post.content }}\n\n</article>\n\n{% endfor %}\n\n</body>\n\n</html>\n\n\"\"\"\n\nfor loop from each item in the\n\nTo load this template, we will add the following parameter and code to the load_templates function.\n\ndef\n\nload_templates\n\ntemplate_string\n\nreturn\n\njinja2\n\nTemplate\n\ntemplate_string\n\nWe'll also change the load_templates function invocation in the main function.\n\ntemplates\n\nload_templates\n\ntemplate_string\n\nRendering the site\u200b\n\nNow let's populate the template with our config and content data. We'll do this using the template's render() method. This method takes a list of keyword arguments which it will use to resolve the variable references template's {{ }} and {% %} blocks.\n\nIn the render_site function, add the following code:\n\ndef\n\nrender_site\n\nconfig\n\ncontent\n\ntemplate\n\nprint\n\ntemplate\n\nrender\n\nconfig\n\nconfig\n\ncontent\n\ncontent\n\nAs our render_site invocation in main already takes the correct arguments, we can run our code now. The result should look like this:\n\n<!", "start_char_idx": 0, "end_char_idx": 4014, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "684c187b-9eb5-4b0d-b65e-59264a94e153": {"__data__": {"id_": "684c187b-9eb5-4b0d-b65e-59264a94e153", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a1d3c90-7b70-4c5d-b74d-1a7bd73aff51", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "97b6af07aa0b694a460706e92afd365e955e0500f11bb88711b7b49205c57f8f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29d0183e-0663-4a97-b588-648dc7e0af19", "node_type": "1", "metadata": {}, "hash": "78d80ddb2941315ca3a372b3af219b86b9b88c3d9d8e4b787ab72af247868d2a", "class_name": "RelatedNodeInfo"}}, "hash": "d6f8492f9f5d41dc4710e11db0e95ae07610a5c3a317434b336a478adfa78762", "text": "def\n\nload_templates\n\ntemplate_string\n\nreturn\n\njinja2\n\nTemplate\n\ntemplate_string\n\nWe'll also change the load_templates function invocation in the main function.\n\ntemplates\n\nload_templates\n\ntemplate_string\n\nRendering the site\u200b\n\nNow let's populate the template with our config and content data. We'll do this using the template's render() method. This method takes a list of keyword arguments which it will use to resolve the variable references template's {{ }} and {% %} blocks.\n\nIn the render_site function, add the following code:\n\ndef\n\nrender_site\n\nconfig\n\ncontent\n\ntemplate\n\nprint\n\ntemplate\n\nrender\n\nconfig\n\nconfig\n\ncontent\n\ncontent\n\nAs our render_site invocation in main already takes the correct arguments, we can run our code now. The result should look like this:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nbody\n\nh1\n\nMy blog\n\n</\n\nh1\n\narticle\n\nh2\n\nMy second entry\n\n</\n\nh2\n\nPosted at 2021-02-15 17:47:00+02:00\n\n</\n\nThis is my second post.\n\n</\n\n</\n\narticle\n\narticle\n\nh2\n\nMy first entry\n\n</\n\nh2\n\nPosted at 2021-02-14 11:47:00+02:00\n\n</\n\nHello, welcome to my\n\nstrong\n\nblog\n\n</\n\nstrong\n\n</\n\n</\n\narticle\n\n</\n\nbody\n\n</\n\nhtml\n\nWe now have the core of our SSG. Modify the content of one of the content strings and the output will change. Add new variables to each content file's frontmatter and the template, and they will propagate through without any changes to the Python code.\n\nNext, let's create and ingest some files.\n\nBlog generator\u200b\n\nFirst, we need to create a directory structure. In the file pane of your repl, create four directories: content, content/posts, layout and static. Your file pane should now look like this:\n\nWe will put our Markdown files in content/posts, our Jinja files in layout and unprocessed files like CSS stylesheets and images in static. We're using content/posts so we can create different content types later on, such as undated pages like \"About\".\n\nCreating input files\u200b\n\nFirst, we'll create our config file config.toml. In addition to the title value, we'll give it a base URL based on our repl's URL.\n\nconfig.toml\n\ntitle = \"My blog\"\n\nbaseURL = \"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n\nReplace the all-caps text with the relevant values.\n\nNow let's put our content strings into post files. Create two files with the following content:\n\ncontent/posts/first-post.md\n\ntitle = \"My first entry\"\n\ndate = 2021-02-14T11:47:00+02:00\n\n+++++\n\nHello, welcome to my **blog**.\n\ncontent/posts/second-post.md\n\ntitle = \"My second entry\"\n\ndate = 2021-02-15T17:47:00+02:00\n\n+++++\n\nThis is my second post.\n\nMake as many additional posts as you want. Just remember to give each one a title, correctly formatted datestamp and some Markdown content. File names should be lowercase with no spaces, ending in the .md file extension.\n\nIn contrast to our proof of concept, this will be a multi-page website, so we're going to create three HTML files in our layout directory: index.html, post.html and macros.html.\n\nindex.html will be the template for our homepage, showing a list of blog posts in reverse chronological order.\n\npost.html will be the template for post pages, containing their rendered Markdown content.\n\nmacros.html will not be a template, but a container file for Jinja macros. These are reusable snippets of HTML that we can use in our templates.\n\nCreate three files and populate them as follows.\n\nlayout/index.html\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\n{% import \"macros.html\" as macros %} {{ macros.head(config.title) }}\n\nbody\n\nh1\n\nPosts\n\n</\n\nh1\n\nul\n\n{% for post in content.posts %}\n\nli\n\nhref\n\n{{ post.url }}\n\n{{ post.title }}\n\n</\n\n(posted at {{ post.date\n\n}})\n\n</\n\nli\n\n{% endfor %}\n\n</\n\nul\n\n</\n\nbody\n\n</\n\nhtml\n\nlayout/post.html\n\n<!", "start_char_idx": 3240, "end_char_idx": 6890, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29d0183e-0663-4a97-b588-648dc7e0af19": {"__data__": {"id_": "29d0183e-0663-4a97-b588-648dc7e0af19", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "684c187b-9eb5-4b0d-b65e-59264a94e153", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "d6f8492f9f5d41dc4710e11db0e95ae07610a5c3a317434b336a478adfa78762", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4410e664-212b-44fb-85bf-80004c395c5b", "node_type": "1", "metadata": {}, "hash": "d5ffa2fe08a680e922b0aaeb3fccd282392f50f6f065a15522a4df5c1abbeb4b", "class_name": "RelatedNodeInfo"}}, "hash": "78d80ddb2941315ca3a372b3af219b86b9b88c3d9d8e4b787ab72af247868d2a", "text": "index.html will be the template for our homepage, showing a list of blog posts in reverse chronological order.\n\npost.html will be the template for post pages, containing their rendered Markdown content.\n\nmacros.html will not be a template, but a container file for Jinja macros. These are reusable snippets of HTML that we can use in our templates.\n\nCreate three files and populate them as follows.\n\nlayout/index.html\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\n{% import \"macros.html\" as macros %} {{ macros.head(config.title) }}\n\nbody\n\nh1\n\nPosts\n\n</\n\nh1\n\nul\n\n{% for post in content.posts %}\n\nli\n\nhref\n\n{{ post.url }}\n\n{{ post.title }}\n\n</\n\n(posted at {{ post.date\n\n}})\n\n</\n\nli\n\n{% endfor %}\n\n</\n\nul\n\n</\n\nbody\n\n</\n\nhtml\n\nlayout/post.html\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\n{% import \"macros.html\" as macros %} {{ macros.head(this.title) }}\n\nbody\n\nh1\n\n{{ this.title }}\n\n</\n\nh1\n\nPosted at {{ this.date }}\n\n</\n\n{{ this.content }}\n\nhref\n\n{{ config.baseURL }}\n\nReturn to the homepage\n\n&#10558;\n\n</\n\n</\n\n</\n\nbody\n\n</\n\nhtml\n\n(&#10558; is the HTML entity for \"\u293e\".)\n\nlayout/macros.html\n\n{% macro head(page_title) -%}\n\nhead\n\ntitle\n\n{{ page_title }}\n\n</\n\ntitle\n\nlink\n\nrel\n\nstylesheet\n\nhref\n\n/css/style.css\n\n/>\n\n</\n\nhead\n\n{% endmacro -%}\n\nThe only macro we've defined is head, which will generate an HTML <head> tag containing an appropriate title for the page as well as a link to our website's stylesheet. Let's create that now.\n\nIn the static directory, create a subdirectory called css. Then create a file called style.css in this subdirectory and add the following code.\n\nstatic/css/style.css\n\nh1\n\nfont-family\n\nsans-serif\n\nmargin-top\n\nem\n\nbody\n\nfont-family\n\nserif\n\nmargin\n\nauto\n\nmax-width\n\n40\n\nem\n\nline-height\n\n1.2\n\nem\n\nThese are a couple of small style adjustments to improve readability and differentiate our site from an unstyled page. Feel free to add your own touches.\n\nIngesting input files\u200b\n\nNow that we've created our input files, let's write some code in main.py to read them and create our website. To do this, we'll be iterating our proof-of-concept code.\n\nFirst, at the top of the file, let's import some new modules for dealing with reading and writing files and directories. Add the second line below the first in main.py.\n\nimport\n\njinja2\n\nmarkdown\n\ntoml\n\nre\n\nimport\n\nos\n\nglob\n\npathlib\n\nshutil\n\ndistutils\n\ndir_util\n\nThen delete the config_string, content_strings and template_string definitions from the main function.\n\nIngesting site configuration\u200b\n\nFirst, let's ingest the configuration file. Change the load_config function as follows.\n\ndef\n\nload_config\n\nconfig_filename\n\nwith\n\nopen\n\nconfig_filename\n\n'r'\n\nas\n\nconfig_file\n\nreturn\n\ntoml\n\nloads\n\nconfig_file\n\nread\n\nNow change this line in the main function:\n\nconfig\n\nload_config\n\nconfig_string\n\nTo this:\n\nconfig\n\nload_config\n\n\"config.toml\"\n\nIngesting posts\u200b\n\nNext, we will ingest the content/posts directory. Change the content of the load_content_items function as follows.\n\ndef\n\nload_content_items\n\ncontent_directory\n\nitems\n\nfor\n\nfn\n\nin\n\nglob\n\nglob\n\nf\"\n\ncontent_directory\n\n/*.md\"\n\nwith\n\nopen\n\nfn\n\n'r'\n\nas\n\nfile\n\nfrontmatter\n\ncontent\n\nre\n\nsplit\n\n\"^\\+\\+\\+\\+\\+$\"\n\nfile\n\nread\n\nre\n\nMULTILINE\n\nitem\n\ntoml\n\nloads\n\nfrontmatter\n\nitem\n\n'content'\n\nmarkdown\n\nmarkdown\n\ncontent\n\nitems\n\nappend\n\nitem\n\n# sort in reverse chronological order\n\nitems\n\nsort\n\nkey\n\nlambda\n\n\"date\"\n\nreverse\n\nTrue\n\nreturn\n\nitems\n\nInstead of looping through a list of strings, we're now looping through all files ending in .md in the content/posts directory using the glob method and parsing their contents.\n\nSince we're now building a real site with multiple pages, we'll need to add a couple of additional attributes to our post dictionary. Namely, slug and url.\n\nslug will be the name of the post's Markdown file without the .md extension.\n\nurl will be a partial URL including the post's date and slug.", "start_char_idx": 6166, "end_char_idx": 9964, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4410e664-212b-44fb-85bf-80004c395c5b": {"__data__": {"id_": "4410e664-212b-44fb-85bf-80004c395c5b", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29d0183e-0663-4a97-b588-648dc7e0af19", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "78d80ddb2941315ca3a372b3af219b86b9b88c3d9d8e4b787ab72af247868d2a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1e7f6b36-d03d-4ac1-bbdc-7828a28cf2a9", "node_type": "1", "metadata": {}, "hash": "0dee962b5285c94cd0c5b29928ae278fc7588ee0ec887bca5cc2b9132d5878e8", "class_name": "RelatedNodeInfo"}}, "hash": "d5ffa2fe08a680e922b0aaeb3fccd282392f50f6f065a15522a4df5c1abbeb4b", "text": "Since we're now building a real site with multiple pages, we'll need to add a couple of additional attributes to our post dictionary. Namely, slug and url.\n\nslug will be the name of the post's Markdown file without the .md extension.\n\nurl will be a partial URL including the post's date and slug. For the first post, it will look like this: /2021/02/14/first-post/\n\nitem\n\n'slug'\n\nos\n\npath\n\nsplitext\n\nos\n\npath\n\nbasename\n\nfile\n\nname\n\nWe'll then use this slug along with our post's date to construct the full URL. We'll use Python's string formatting to ensure correct zero-padding of single-digit values for months and days. Add this line below the one we just added:\n\nitem\n\n'url'\n\nf\"/\n\nitem\n\n'date'\n\nyear\n\nitem\n\n'date'\n\nmonth\n\n0>2\n\nitem\n\n'date'\n\nday\n\n0>2\n\nitem\n\n'slug'\n\n/\"\n\nNow we can update our function invocation in main. Change this line:\n\ncontent\n\nload_content_items\n\ncontent_strings\n\nTo this:\n\ncontent\n\n\"posts\"\n\nload_content_items\n\n\"content/posts\"\n\nUsing a dictionary instead of a plain list will allow us to add additional content types in a later section of this tutorial.\n\nIngesting templates\u200b\n\nNow that we have a list of posts, let's ingest our templates so we have somewhere to put them. Jinja works quite differently from the file system and from strings, so we're going to change our load_templates function to create a Jinja Environment with a FileSystemLoader that knows to look for templates in a particular directory. Change the function code as follows.\n\ndef\n\nload_templates\n\ntemplate_directory\n\nfile_system_loader\n\njinja2\n\nFileSystemLoader\n\ntemplate_directory\n\nreturn\n\njinja2\n\nEnvironment\n\nloader\n\nfile_system_loader\n\nThen, in the main function, change this line:\n\ntemplate\n\nload_templates\n\ntemplate_string\n\nTo this:\n\nenvironment\n\nload_templates\n\n\"layout\"\n\nIn the next section, we'll pass this environment to our render_site function where we'll load individual templates as we need them.\n\nWriting output files\u200b\n\nNow let's render the site by writing some output files. We'll be using a directory named public for this, but you don't need to create this in your file pane \u2013 we'll do so in code. Go to the render_site function and replace its code with the following (remember to change the function parameters).\n\ndef\n\nrender_site\n\nconfig\n\ncontent\n\nenvironment\n\noutput_directory\n\nif\n\nos\n\npath\n\nexists\n\noutput_directory\n\nshutil\n\nrmtree\n\noutput_directory\n\nos\n\nmkdir\n\noutput_directory\n\nWe do two things here: remove the output directory and all of its content if it exists, and create a fresh output directory. This will avoid errors when running our code multiple times.\n\nNow let's write our home page by adding this code to the bottom of the function.\n\n# Homepage\n\nindex_template\n\nenvironment\n\nget_template\n\n\"index.html\"\n\nwith\n\nopen\n\nf\"\n\noutput_directory\n\n/index.html\"\n\n'w'\n\nas\n\nfile\n\nfile\n\nwrite\n\nindex_template\n\nrender\n\nconfig\n\nconfig\n\ncontent\n\ncontent\n\nHere we use our Jinja environment to load the template at layout/index.html. We then open the public/index.html file and write to it the results of rendering index_template with our config and content dictionaries passed in.\n\nThe code for writing individual post files is a bit more complex. Add the for loop below to the bottom of the function.\n\n# Post pages\n\npost_template\n\nenvironment\n\nget_template\n\n\"post.html\"\n\nfor\n\nitem\n\nin\n\ncontent\n\n\"posts\"\n\npath\n\nf\"\n\noutput_directory\n\nitem\n\n'url'\n\npathlib\n\nPath\n\npath\n\nmkdir\n\nparents\n\nTrue\n\nexist_ok\n\nTrue\n\nwith\n\nopen\n\npath\n\n\"index.html\"\n\n'w'\n\nas\n\nfile\n\nfile\n\nwrite\n\npost_template\n\nrender\n\nthis\n\nitem\n\nconfig\n\nconfig\n\ncontent\n\ncontent\n\nNote the values we pass to render: variables for this post are contained in this and site-wide configuration variables are contained in config. We also pass in content to allow us to access other posts. Although we aren't using this in the post.html template right now, it's good to have the option for future template updates.\n\nNow we need to load our static files. Add this code to the bottom of the render_site function:\n\n# Static files\n\ndistutils\n\ndir_util\n\ncopy_tree\n\n\"static\"\n\n\"public\"\n\nAll this code does is copy the file tree from our static directory into our public directory. This means that our CSS file at static/css/style.css can be accessed in our HTML templates as css/style.css.", "start_char_idx": 9668, "end_char_idx": 13912, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1e7f6b36-d03d-4ac1-bbdc-7828a28cf2a9": {"__data__": {"id_": "1e7f6b36-d03d-4ac1-bbdc-7828a28cf2a9", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4410e664-212b-44fb-85bf-80004c395c5b", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "d5ffa2fe08a680e922b0aaeb3fccd282392f50f6f065a15522a4df5c1abbeb4b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "19ad5d70-bb57-42ef-903c-531b0256af1c", "node_type": "1", "metadata": {}, "hash": "aba43265f8294d9c80793c4106cc52655059169ec5b620bb542881e19c12bd56", "class_name": "RelatedNodeInfo"}}, "hash": "0dee962b5285c94cd0c5b29928ae278fc7588ee0ec887bca5cc2b9132d5878e8", "text": "We also pass in content to allow us to access other posts. Although we aren't using this in the post.html template right now, it's good to have the option for future template updates.\n\nNow we need to load our static files. Add this code to the bottom of the render_site function:\n\n# Static files\n\ndistutils\n\ndir_util\n\ncopy_tree\n\n\"static\"\n\n\"public\"\n\nAll this code does is copy the file tree from our static directory into our public directory. This means that our CSS file at static/css/style.css can be accessed in our HTML templates as css/style.css. Similarly, if we create a file at static/my-picture.jpg, we can reference that in our HTML or Markdown as my-picture.jpg and it will be found and loaded.\n\nNow we just need to update the function invocation in our main function. Change this line:\n\nrender_site\n\nconfig\n\ncontent\n\ntemplates\n\nTo this:\n\nrender_site\n\nconfig\n\ncontent\n\nenvironment\n\n\"public\"\n\nNow run the code. You should see the public directory appear in your file pane. Look inside, and you'll see the directories and files we just created. To see your site in action, run the following commands in Replit's \"Shell\" tab.\n\ncd public\n\npython -m http.server\n\nThis should bring up the Replit web view with your home page, as below. Click on each of the links to visit the post pages.\n\nThis server will need to be restarted periodically as you work on your site.\n\nGeneric site generator\u200b\n\nIn addition to chronological blog posts, our site could do with undated pages, such as an \"About\" or \"Contact\" page. Depending on the kind of site we want to build, we may also want photo pages, or pages including podcast episodes, or any number of other things. If we give this SSG to someone else to use, they may have their own ideas as well \u2013 for example, they may want to make a site organised as a book with numbered chapters rather than as a blog. Rather than trying to anticipate everyone's needs, let's make it so we can create multiple types of content pages, and allow the user to define those types and how they should be ordered.\n\nThis is simpler than it sounds, but will require some refactoring.\n\nExpanding the config file\u200b\n\nFirst, let's add some content to our config.toml file to give this customization a definite shape. Add these lines below the definition of baseURL.\n\nconfig.toml\n\ntitle = \"My site\"\n\nbaseURL = \"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n\ntypes = [\"post\", \"page\"]\n\npost.dateInURL = true\n\npost.sortBy = \"date\"\n\npost.sortReverse = true\n\npage.dateInURL = false\n\npage.sortBy = \"title\"\n\npage.sortReverse = false\n\nHere we've told our site generator we want two kinds of pages \u2013 a post type, which we will use for blog posts, and a page type, which we will use for evergreen content such as contact details and general site information. Below that, we've used TOML's dictionary syntax to specify some characteristics of each type.\n\nPosts will have a date in their URLs and will be sorted in reverse date order when listed.\n\nPages will not have a date in their URLs and will be sorted alphabetically by their title.\n\nBy creating these settings, we'll make it possible to sort a content type by any attribute in its frontmatter.\n\nIngesting user-defined content\u200b\n\nTo implement this, let's first import a new module at the top of main.py. Add the third line to your file, below the first two.\n\nimport\n\njinja2\n\nmarkdown\n\ntoml\n\nre\n\nimport\n\nglob\n\npathlib\n\nos\n\nshutil\n\ndistutils\n\ndir_util\n\nimport\n\ninflect\n\nThe inflect module allows us to turn singular words into plurals and vice versa. This will be useful for working with the types list from our configuration file. Change the load_config function to resemble the following.\n\ndef\n\nload_config\n\nconfig_filename\n\nwith\n\nopen\n\nconfig_filename\n\n'r'\n\nas\n\nconfig_file\n\nconfig\n\ntoml\n\nloads\n\nconfig_file\n\nread\n\nie\n\ninflect\n\nengine\n\nfor\n\ncontent_type\n\nin\n\nconfig\n\n\"types\"\n\nconfig\n\ncontent_type\n\n\"plural\"\n\nie\n\nplural\n\ncontent_type\n\nreturn\n\nconfig\n\nThis code will expand the dictionaries we load from our config file with a key containing the type's plural.", "start_char_idx": 13361, "end_char_idx": 17394, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19ad5d70-bb57-42ef-903c-531b0256af1c": {"__data__": {"id_": "19ad5d70-bb57-42ef-903c-531b0256af1c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1e7f6b36-d03d-4ac1-bbdc-7828a28cf2a9", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "0dee962b5285c94cd0c5b29928ae278fc7588ee0ec887bca5cc2b9132d5878e8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d5c6670f-44d0-4f2b-9aac-131ffda650dc", "node_type": "1", "metadata": {}, "hash": "5f5bbe57d9f06f0525945dfadaeed0fc34a95d837ab119dd6090ba606f82704c", "class_name": "RelatedNodeInfo"}}, "hash": "aba43265f8294d9c80793c4106cc52655059169ec5b620bb542881e19c12bd56", "text": "Add the third line to your file, below the first two.\n\nimport\n\njinja2\n\nmarkdown\n\ntoml\n\nre\n\nimport\n\nglob\n\npathlib\n\nos\n\nshutil\n\ndistutils\n\ndir_util\n\nimport\n\ninflect\n\nThe inflect module allows us to turn singular words into plurals and vice versa. This will be useful for working with the types list from our configuration file. Change the load_config function to resemble the following.\n\ndef\n\nload_config\n\nconfig_filename\n\nwith\n\nopen\n\nconfig_filename\n\n'r'\n\nas\n\nconfig_file\n\nconfig\n\ntoml\n\nloads\n\nconfig_file\n\nread\n\nie\n\ninflect\n\nengine\n\nfor\n\ncontent_type\n\nin\n\nconfig\n\n\"types\"\n\nconfig\n\ncontent_type\n\n\"plural\"\n\nie\n\nplural\n\ncontent_type\n\nreturn\n\nconfig\n\nThis code will expand the dictionaries we load from our config file with a key containing the type's plural. If we were to print out our config dictionary at this point, it would look like this:\n\n\"title\"\n\n\"My site\"\n\n\"baseURL\"\n\n\"https://YOUR-REPL-NAME-HERE--YOUR-REPLIT-USERNAME.repl.co\"\n\n\"types\"\n\n\"post\"\n\n\"page\"\n\n\"post\"\n\n\"plural\"\n\n\"posts\"\n\n\"dateInURL\"\n\ntrue\n\n\"sortBy\"\n\n\"date\"\n\n\"sortReverse\"\n\ntrue\n\n\"page\"\n\n\"plural\"\n\n\"pages\"\n\n\"dateInURL\"\n\ntrue\n\n\"sortBy\"\n\n\"title\"\n\n\"sortReverse\"\n\nfalse\n\nNote: Please refer to these docs to ensure that you are using the correct repl.co domain format.\n\nNow let's modify load_content_items to deal with multiple, user-defined content types. First, we need to change the function to take our config dictionary as an additional parameter. Second, we'll put all of our function's current content in an inner function named load_content_type. Your function should now look like this:\n\ndef\n\nload_content_items\n\nconfig\n\ncontent_directory\n\ndef\n\nload_content_type\n\ncontent_type\n\nitems\n\nfor\n\nfn\n\nin\n\nglob\n\nglob\n\nf\"\n\ncontent_directory\n\n/*.md\"\n\nwith\n\nopen\n\nfn\n\n'r'\n\nas\n\nfile\n\nfrontmatter\n\ncontent\n\nre\n\nsplit\n\n\"^\\+\\+\\+\\+\\+$\"\n\nfile\n\nread\n\nre\n\nMULTILINE\n\nitem\n\ntoml\n\nloads\n\nfrontmatter\n\nitem\n\n'content'\n\nmarkdown\n\nmarkdown\n\ncontent\n\nitem\n\n'slug'\n\nos\n\npath\n\nsplitext\n\nos\n\npath\n\nbasename\n\nfile\n\nname\n\nitem\n\n'url'\n\nf\"/\n\nitem\n\n'date'\n\nyear\n\nitem\n\n'date'\n\nmonth\n\n0>2\n\nitem\n\n'date'\n\nday\n\n0>2\n\nitem\n\n'slug'\n\n/\"\n\nitems\n\nappend\n\nitem\n\n# sort in reverse chronological order\n\nitems\n\nsort\n\nkey\n\nlambda\n\n\"date\"\n\nreverse\n\nTrue\n\nreturn\n\nitems\n\nTo load from the correct directory, we will need to change this line:\n\nfor\n\nfn\n\nin\n\nglob\n\nglob\n\nf\"\n\ncontent_directory\n\n/*.md\"\n\nTo this:\n\nfor\n\nfn\n\nin\n\nglob\n\nglob\n\nf\"\n\ncontent_directory\n\nconfig\n\ncontent_type\n\n'plural'\n\n/*.md\"\n\nHere we're using the plural of the content type we defined earlier. This will ensure that items of type \"post\" can be found in \"content/posts\" and items of type \"page\" can be found in \"content/pages\".\n\nWe now need to add code to respect our configuration settings. We'll do this by changing this line:\n\nitem\n\n'url'\n\nf\"/\n\nitem\n\n'date'\n\nyear\n\nitem\n\n'date'\n\nmonth\n\n0>2\n\nitem\n\n'date'\n\nday\n\n0>2\n\nitem\n\n'slug'\n\n/\"\n\nTo this:\n\nif\n\nconfig\n\ncontent_type\n\n\"dateInURL\"\n\nitem\n\n'url'\n\nf\"/\n\nitem\n\n'date'\n\nyear\n\nitem\n\n'date'\n\nmonth\n\n0>2\n\nitem\n\n'date'\n\nday\n\n0>2\n\nitem\n\n'slug'\n\n/\"\n\nelse\n\nitem\n\n'url'\n\nf\"/\n\nitem\n\n'slug'\n\n/\"\n\nNow we'll sort according to the configuration file by changing this line:\n\n# sort in reverse chronological order\n\nitems\n\nsort\n\nkey\n\nlambda\n\n\"date\"\n\nreverse\n\nTrue\n\nTo this:\n\n# sort according to config\n\nitems\n\nsort\n\nkey\n\nlambda\n\nconfig\n\ncontent_type\n\n\"sortBy\"\n\nreverse\n\nconfig\n\ncontent_type\n\n\"sortReverse\"\n\nWe can complete this load_content_items function by writing some code to iterate through our site's configured content types, calling load_content_type for each one. Add the following code below the definition of load_content_type (ensure that it's de-indented so as to be part of load_content_items).", "start_char_idx": 16639, "end_char_idx": 20267, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d5c6670f-44d0-4f2b-9aac-131ffda650dc": {"__data__": {"id_": "d5c6670f-44d0-4f2b-9aac-131ffda650dc", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19ad5d70-bb57-42ef-903c-531b0256af1c", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "aba43265f8294d9c80793c4106cc52655059169ec5b620bb542881e19c12bd56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ca382ad-6756-4c7d-90f2-f0f829c3651e", "node_type": "1", "metadata": {}, "hash": "741a22046a1636b7019ee578625daf6d5ecf77a2794bbf9fbcd3bdaa9360e529", "class_name": "RelatedNodeInfo"}}, "hash": "5f5bbe57d9f06f0525945dfadaeed0fc34a95d837ab119dd6090ba606f82704c", "text": "Add the following code below the definition of load_content_type (ensure that it's de-indented so as to be part of load_content_items).\n\ncontent_types\n\nfor\n\ncontent_type\n\nin\n\nconfig\n\n\"types\"\n\ncontent_types\n\nconfig\n\ncontent_type\n\n'plural'\n\nload_content_type\n\ncontent_type\n\nreturn\n\ncontent_types\n\nThen in the main function, change this line:\n\ncontent\n\n\"posts\"\n\nload_content_items\n\n\"content/posts\"\n\nTo this:\n\ncontent\n\nload_content_items\n\nconfig\n\n\"content\"\n\nRendering user-defined content\u200b\n\nNow we need to change our output code in render_site to render each content type with its own template. As we did with load_content_items, we'll start by moving the post-creating for loop into an inner function, this time named render_type. Alter your render_site function so that it resembles the following.\n\ndef\n\nrender_site\n\nconfig\n\ncontent\n\nenvironment\n\noutput_directory\n\ndef\n\nrender_type\n\ncontent_type\n\n# <-- new inner function\n\n# Post pages\n\npost_template\n\nenvironment\n\nget_template\n\n\"post.html\"\n\nfor\n\nitem\n\nin\n\ncontent\n\n\"posts\"\n\npath\n\nf\"public/\n\nitem\n\n'url'\n\npathlib\n\nPath\n\npath\n\nmkdir\n\nparents\n\nTrue\n\nexist_ok\n\nTrue\n\nwith\n\nopen\n\npath\n\n\"index.html\"\n\n'w'\n\nas\n\nfile\n\nfile\n\nwrite\n\npost_template\n\nrender\n\nthis\n\nitem\n\nconfig\n\nconfig\n\nif\n\nos\n\npath\n\nexists\n\noutput_directory\n\nshutil\n\nrmtree\n\noutput_directory\n\nos\n\nmkdir\n\noutput_directory\n\nfor\n\ncontent_type\n\nin\n\nconfig\n\n\"types\"\n\n# <-- new for loop\n\nrender_type\n\ncontent_type\n\n# !!! post for loop moved to inner function above\n\n# Homepage\n\nindex_template\n\nenvironment\n\nget_template\n\n\"index.html\"\n\nwith\n\nopen\n\n\"public/index.html\"\n\n'w'\n\nas\n\nfile\n\nfile\n\nwrite\n\nindex_template\n\nrender\n\nconfig\n\nconfig\n\ncontent\n\ncontent\n\n# Static files\n\ndistutils\n\ndir_util\n\ncopy_tree\n\n\"static\"\n\n\"public\"\n\nThen change this line in the render_type inner function that loads the post template:\n\npost_template\n\nenvironment\n\nget_template\n\n\"post.html\"\n\nInto this line that loads a template for the provided content type:\n\ntemplate\n\nenvironment\n\nget_template\n\nf\"\n\ncontent_type\n\n.html\"\n\nAlter the for loop below that line to use the content type's plural.\n\nfor\n\nitem\n\nin\n\ncontent\n\nconfig\n\ncontent_type\n\n\"plural\"\n\nFinally, change post_template in the loop's final line to template.\n\nfile\n\nwrite\n\ntemplate\n\nrender\n\nthis\n\nitem\n\nconfig\n\nconfig\n\ncontent\n\ncontent\n\nAdding a new content type\u200b\n\nNow that we've done all that work to generify our code, all that's left is to create our pages. First, let's create a page template at layout/page.html. Use the following code.\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\n{% import \"macros.html\" as macros %} {{ macros.head(this.title) }}\n\nbody\n\nh1\n\n{{ this.title }}\n\n</\n\nh1\n\n{{ this.content }}\n\nhref\n\n{{ config.baseURL }}\n\nReturn to the homepage\n\n&#10558;\n\n</\n\n</\n\n</\n\nbody\n\n</\n\nhtml\n\nThis is just our post.html template without the date.\n\nNow create a new subdirectory in content called pages. Inside that subdirectory, create a file named about.md and put the following content in it.\n\ntitle = \"About\"\n\n+++++\n\nThis website is built with Python, Jinja, TOML and Markdown.\n\nThis is sufficient to create a new page at /about/, but it won't be linked anywhere. For that, we'll need to create a global navigation bar for our site. Create the following additional macro in layout/macros.html.\n\n{% macro navigation(pages) -%}\n\nnav\n\nul\n\n{% for page in pages %}\n\nli\n\nhref\n\n{{ page.url }}\n\n{{ page.title }}\n\n</\n\n</\n\nli\n\n{% endfor %}\n\n</\n\nul\n\n</\n\nnav\n\n{% endmacro -%}\n\nThen include the macro in index.html, page.html and post.html by inserting the following code just underneath {{ macros.head(this.title) }}.\n\n{{ macros.navigation(content.pages) }}\n\nFinally, add the CSS below to static/css/style.css to apply light styling to the navigation bar.\n\nnav ul\n\nlist-style-type\n\nnone\n\ntext-align\n\nright\n\nRun your code and preview your site with cd public && python -m http.server in the repl shell, and you should see something like this:\n\nWhere to next?\u200b\n\nWe've created a flexible SSG capable of generating many different types of HTML pages, which can be served from any web server.", "start_char_idx": 20132, "end_char_idx": 24128, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ca382ad-6756-4c7d-90f2-f0f829c3651e": {"__data__": {"id_": "7ca382ad-6756-4c7d-90f2-f0f829c3651e", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "687a9004dbc541a73fe81708c1fa910b003df16971eb58a07fec8f7b08df516b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5c6670f-44d0-4f2b-9aac-131ffda650dc", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}, "hash": "5f5bbe57d9f06f0525945dfadaeed0fc34a95d837ab119dd6090ba606f82704c", "class_name": "RelatedNodeInfo"}}, "hash": "741a22046a1636b7019ee578625daf6d5ecf77a2794bbf9fbcd3bdaa9360e529", "text": "Create the following additional macro in layout/macros.html.\n\n{% macro navigation(pages) -%}\n\nnav\n\nul\n\n{% for page in pages %}\n\nli\n\nhref\n\n{{ page.url }}\n\n{{ page.title }}\n\n</\n\n</\n\nli\n\n{% endfor %}\n\n</\n\nul\n\n</\n\nnav\n\n{% endmacro -%}\n\nThen include the macro in index.html, page.html and post.html by inserting the following code just underneath {{ macros.head(this.title) }}.\n\n{{ macros.navigation(content.pages) }}\n\nFinally, add the CSS below to static/css/style.css to apply light styling to the navigation bar.\n\nnav ul\n\nlist-style-type\n\nnone\n\ntext-align\n\nright\n\nRun your code and preview your site with cd public && python -m http.server in the repl shell, and you should see something like this:\n\nWhere to next?\u200b\n\nWe've created a flexible SSG capable of generating many different types of HTML pages, which can be served from any web server. Apart from fleshing out the templates and adding new content types, you might want to expand the generator's functionality to allow things like:\n\nCategories or tags for content items.\n\nAbility to generate an RSS or Atom feed for people to subscribe to.\n\nA way to mark items as drafts, so they won't be included when the site is compiled.\n\nNavigation features like next and previous item links.\n\nUseful error messages for malformed directory structures and configuration files.\n\nYou can find our SSG repl below:\n\n< Previous: Spotify API tutorials\n\nNext: Steganography: hiding messages in images >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nBuilding a proof of conceptSetting up and defining the flowParsing content and templatesRendering the site\n\nBlog generatorCreating input filesIngesting input filesIngesting site configurationIngesting postsIngesting templatesWriting output files\n\nGeneric site generatorExpanding the config fileIngesting user-defined contentRendering user-defined contentAdding a new content type\n\nWhere to next?", "start_char_idx": 23286, "end_char_idx": 25170, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"c2133f03-f496-4f6c-9f6c-11350dc991a0": {"node_ids": ["4a1d3c90-7b70-4c5d-b74d-1a7bd73aff51", "684c187b-9eb5-4b0d-b65e-59264a94e153", "29d0183e-0663-4a97-b588-648dc7e0af19", "4410e664-212b-44fb-85bf-80004c395c5b", "1e7f6b36-d03d-4ac1-bbdc-7828a28cf2a9", "19ad5d70-bb57-42ef-903c-531b0256af1c", "d5c6670f-44d0-4f2b-9aac-131ffda650dc", "7ca382ad-6756-4c7d-90f2-f0f829c3651e"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/static-site-generator.html"}}}, "docstore/metadata": {"4a1d3c90-7b70-4c5d-b74d-1a7bd73aff51": {"doc_hash": "97b6af07aa0b694a460706e92afd365e955e0500f11bb88711b7b49205c57f8f", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "684c187b-9eb5-4b0d-b65e-59264a94e153": {"doc_hash": "d6f8492f9f5d41dc4710e11db0e95ae07610a5c3a317434b336a478adfa78762", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "29d0183e-0663-4a97-b588-648dc7e0af19": {"doc_hash": "78d80ddb2941315ca3a372b3af219b86b9b88c3d9d8e4b787ab72af247868d2a", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "4410e664-212b-44fb-85bf-80004c395c5b": {"doc_hash": "d5ffa2fe08a680e922b0aaeb3fccd282392f50f6f065a15522a4df5c1abbeb4b", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "1e7f6b36-d03d-4ac1-bbdc-7828a28cf2a9": {"doc_hash": "0dee962b5285c94cd0c5b29928ae278fc7588ee0ec887bca5cc2b9132d5878e8", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "19ad5d70-bb57-42ef-903c-531b0256af1c": {"doc_hash": "aba43265f8294d9c80793c4106cc52655059169ec5b620bb542881e19c12bd56", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "d5c6670f-44d0-4f2b-9aac-131ffda650dc": {"doc_hash": "5f5bbe57d9f06f0525945dfadaeed0fc34a95d837ab119dd6090ba606f82704c", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}, "7ca382ad-6756-4c7d-90f2-f0f829c3651e": {"doc_hash": "741a22046a1636b7019ee578625daf6d5ecf77a2794bbf9fbcd3bdaa9360e529", "ref_doc_id": "c2133f03-f496-4f6c-9f6c-11350dc991a0"}}}