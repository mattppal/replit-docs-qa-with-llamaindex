{"docstore/data": {"aa8ebb0d-bb2f-4315-aa7f-37049905f77c": {"__data__": {"id_": "aa8ebb0d-bb2f-4315-aa7f-37049905f77c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b923c13-c134-4471-830d-ea3de92df3e3", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "c096ed67fdfe9ef9d28d0092b6b5172d36a68e27e1538fbfc60265c59b41c2bf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3b3e7fcb-1ac4-40b9-bfdc-eeeab593d452", "node_type": "1", "metadata": {}, "hash": "039bc29cdd859f42f5112202d32d9493553794e42fd3f9618a73b1877840bff5", "class_name": "RelatedNodeInfo"}}, "hash": "ec0d38456a64642cc6db8c49e464594507dcb3173642803f3257c115e7abd17c", "text": "app\n\nexpress\n\nlet\n\nbodyParser\n\nrequire\n\n\"body-parser\"\n\nlet\n\nhttp\n\nrequire\n\n\"http\"\n\nServer\n\napp\n\napp\n\nuse\n\nbodyParser\n\njson\n\napp\n\nuse\n\nbodyParser\n\nurlencoded\n\nextended\n\ntrue\n\nLet's break this down.\n\nLine 1 adds the dependency for Express. Replit will take care of installing it for us.\n\nLine 2 creates a new Express app that will handle incoming requests.\n\nLine 3 adds a dependency for 'body-parser'. This is needed for the Express server to be able to handle the data that the form will send, and give it to us in a useful format to use in the code.\n\nLine 4 adds a dependency for a basic HTTP server.\n\nLine 6 & 7 tell the Express app which parsers to use on incoming data. This is needed to handle form data.\n\nNext, we need to add a way for the Express app to handle an incoming request and give it to us in the form we need. Add the following lines of code below the code you added above:\n\napp\n\nget\n\n\"/\"\n\nfunction\n\nreq\n\nres\n\nres\n\nsendFile\n\n\"/index.html\"\n\nroot\n\n\".\"\n\napp\n\nget\n\n\"/create\"\n\nfunction\n\nreq\n\nres\n\nres\n\nsendFile\n\n\"/create.html\"\n\nroot\n\n\".\"\n\napp.get tells Express that we want it to handle a GET request.\n\n'/' tells Express that it should respond to GET requests sent to the root URL. A root URL looks something like https://crm.hawkiesza.repl.co - note that there are no slashes after the URL.\n\n'/create' tells Express that it should respond to GET requests sent to the /create endpoint after the root URL, i.e. https://crm.hawkiesza.repl.co/create.\n\nres.sendFile tells Express to send the given file as a response.\n\nBefore the server will start receiving requests and sending responses, we need to tell it to run. Add the following code below the previous line:\n\napp\n\nset\n\n\"port\"\n\nprocess\n\nenv\n\nPORT\n\n||\n\n5000\n\nhttp\n\nlisten\n\napp\n\nget\n\n\"port\"\n\nfunction\n\nconsole\n\nlog\n\n\"listening on port\"\n\napp\n\nget\n\n\"port\"\n\nLine 1 tells Express to set the port number to either a number defined as an environment variable, or 5000 if no definition was made.\n\nLine 2-4 tells the server to start listening for requests.\n\nNow we have an Express server listening for requests, but we haven't yet built the form that it needs to send back if it receives a request.\n\nMake a new file called index.html and paste the following code into it:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nlang\n\nen\n\nbody\n\nform\n\naction\n\n/create\n\nmethod\n\nGET\n\ninput\n\ntype\n\nsubmit\n\nvalue\n\nCreate\n\n/>\n\n</\n\nform\n\n</\n\nbody\n\n</\n\nhtml\n\nThis is a straightforward bit of HTML that puts a single button on the page. When this button is clicked, it sends a GET request to /create, which the server will then respond to according to the code that we wrote above - in our case, it will send back the create.html file which we will define now.\n\nMake a new file called create.html and paste the following into it:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nlang\n\nen\n\nbody\n\nh2\n\nCustomer details\n\n</\n\nh2\n\nform\n\naction\n\n/create\n\nmethod\n\nPOST\n\nlabel\n\nfor\n\nname\n\nCustomer name *\n\n</\n\nlabel\n\nbr\n\n/>\n\ninput\n\ntype\n\ntext\n\nid\n\nname\n\nname\n\nname\n\nclass\n\ntextInput\n\nplaceholder\n\nJohn Smith\n\nrequired\n\n/>\n\nbr\n\n/>\n\nlabel\n\nfor\n\naddress\n\nCustomer address *\n\n</\n\nlabel\n\nbr\n\n/>\n\ninput\n\ntype\n\ntext\n\nname\n\naddress\n\nclass\n\ntextInput\n\nplaceholder\n\n42 Wallaby Way, Sydney\n\nrequired\n\n/>\n\nbr\n\n/>\n\nlabel\n\nfor\n\ntelephone\n\nCustomer telephone *\n\n</\n\nlabel\n\nbr\n\n/>\n\ninput\n\ntype\n\ntext\n\nname\n\ntelephone\n\nclass\n\ntextInput\n\nplaceholder\n\n+275554202\n\nrequired\n\n/>\n\nbr\n\n/>\n\nlabel\n\nfor\n\nnote\n\nCustomer note\n\n</\n\nlabel\n\nbr\n\n/>\n\ninput\n\ntype\n\ntext\n\nname\n\nnote\n\nclass\n\ntextInput\n\nplaceholder\n\nNeeds a new pair of shoes\n\n/>\n\nbr\n\n/>\n\nbr\n\n/>\n\ninput\n\ntype\n\nsubmit\n\nvalue\n\nSubmit\n\n/>\n\n</\n\nform\n\n</\n\nbody\n\n</\n\nhtml\n\nWe won't go in-depth into the above HTML. It is a very basic form with four fields (name, address, telephone, note) and a submit button, which creates an interface that will look like the one below.", "start_char_idx": 0, "end_char_idx": 3777, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3b3e7fcb-1ac4-40b9-bfdc-eeeab593d452": {"__data__": {"id_": "3b3e7fcb-1ac4-40b9-bfdc-eeeab593d452", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b923c13-c134-4471-830d-ea3de92df3e3", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "c096ed67fdfe9ef9d28d0092b6b5172d36a68e27e1538fbfc60265c59b41c2bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "aa8ebb0d-bb2f-4315-aa7f-37049905f77c", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "ec0d38456a64642cc6db8c49e464594507dcb3173642803f3257c115e7abd17c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0a3875c9-3c62-479b-bb84-38b5152298f8", "node_type": "1", "metadata": {}, "hash": "df7a4f95bf5708009883215ec4c55e0961e08e33a24af704c645f88a37b1fe68", "class_name": "RelatedNodeInfo"}}, "hash": "039bc29cdd859f42f5112202d32d9493553794e42fd3f9618a73b1877840bff5", "text": "It is a very basic form with four fields (name, address, telephone, note) and a submit button, which creates an interface that will look like the one below.\n\nWhen the user presses the submit button, a POST request is made to /create with the data in the form - we still have to handle this request in our code as we're currently only handling a GET request to /.\n\nIf you click the \"Run\" button now, a new window should appear on the right that displays the \"Create\" button we defined just now in index.html. To see the form, you can also navigate to https://<repl_name>.<your_username>.repl.co, replacing <repl_name> with whatever you named your repl (but with no underscores or spaces) and <your_username> with your repl username. You will be able to see this URL in the repl itself.\n\nIf you select \"Create\" and then fill in the form and hit submit, you'll get a response that says Cannot POST /create. This is because we haven't added the code that handles the form POST request, so let's do that.\n\nAdd the following code into your index.js file, below the app.get entry that we made above:\n\napp\n\npost\n\n\"/create\"\n\nfunction\n\nreq\n\nres\n\nnext\n\nclient\n\nconnect\n\nerr\n\n=>\n\nconst\n\ncustomers\n\nclient\n\ndb\n\n\"crmdb\"\n\ncollection\n\n\"customers\"\n\nlet\n\ncustomer\n\nname\n\nreq\n\nbody\n\nname\n\naddress\n\nreq\n\nbody\n\naddress\n\ntelephone\n\nreq\n\nbody\n\ntelephone\n\nnote\n\nreq\n\nbody\n\nnote\n\ncustomers\n\ninsertOne\n\ncustomer\n\nfunction\n\nerr\n\nres\n\nif\n\nerr\n\nthrow\n\nerr\n\nconsole\n\nlog\n\n\"1 customer inserted\"\n\nres\n\nsend\n\n\"Customer created\"\n\nLine 1 defines a new route that listens for an HTTP POST request at /create.\n\nLine 2 connects to the database. This happens asynchronously, so we define a callback function that will be called once the connection is made.\n\nLine 3 creates a new collection of customers. Collections in MongoDB are similar to tables in SQL.\n\nLine 5 defines customer data that will be inserted into the collection. This is taken from the incoming request. The form data is parsed using the parsers that we defined earlier and is then placed in the req.body variable for us to use in the code.\n\nLine 6 inserts the customer data into the collection. This also happens asynchronously, and so we define another callback function that will get an error if an error occurred, or the response if everything happened successfully.\n\nLine 7 throws an error if the above insert had a problem.\n\nLine 8 gives us some feedback that the insert happened successfully.\n\nIf you run the repl now (you may need to refresh it) and submit the filled-in form, you'll get a message back that says \"Customer created\". If you look in your cluster in MongoDB and select the \"Collections\" button, you'll see a document has been created with the details that we submitted in the form.\n\nUpdating and deleting database entries\u200b\n\nAs a final step in this tutorial, we want to be able to update and delete database documents in our collection. To make things simpler, we're going to make a new HTML page where we can request a document and then update or delete it.\n\nFirst, let's make the routes to our new page. In your index.js, add the following code below the rest of your routing code (i.e. before the MongoDB code):\n\napp\n\nget\n\n\"/get\"\n\nfunction\n\nreq\n\nres\n\nres\n\nsendFile\n\n\"/get.html\"\n\nroot\n\n\".\"\n\napp\n\nget\n\n\"/get-client\"\n\nfunction\n\nreq\n\nres\n\nclient\n\nconnect\n\nerr\n\n=>\n\nclient\n\ndb\n\n\"crmdb\"\n\ncollection\n\n\"customers\"\n\nfindOne\n\nname\n\nreq\n\nquery\n\nname\n\nfunction\n\nerr\n\nresult\n\nif\n\nerr\n\nthrow\n\nerr\n\nres\n\nrender\n\n\"update\"\n\noldname\n\nresult\n\nname\n\noldaddress\n\nresult\n\naddress\n\noldtelephone\n\nresult\n\ntelephone\n\noldnote\n\nresult\n\nnote\n\nname\n\nresult\n\nname\n\naddress\n\nresult\n\naddress\n\ntelephone\n\nresult\n\ntelephone\n\nnote\n\nresult\n\nnote\n\nLine 1-3 tells Express to respond to incoming GET requests on /get by sending the get.html file which we will define below.\n\nLine 5-12 tells Express to respond to incoming GET requests on /get-client.Line 7 makes a call to the database to fetch a customer by name. If there is more than one customer with the same name, then the first one found will be returned.Line 9 tells Express to render the update template, replacing variables with the given values as it goes.", "start_char_idx": 3621, "end_char_idx": 7751, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0a3875c9-3c62-479b-bb84-38b5152298f8": {"__data__": {"id_": "0a3875c9-3c62-479b-bb84-38b5152298f8", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b923c13-c134-4471-830d-ea3de92df3e3", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "c096ed67fdfe9ef9d28d0092b6b5172d36a68e27e1538fbfc60265c59b41c2bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3b3e7fcb-1ac4-40b9-bfdc-eeeab593d452", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "039bc29cdd859f42f5112202d32d9493553794e42fd3f9618a73b1877840bff5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dde41288-ebfa-4a97-93ab-40307387c8e0", "node_type": "1", "metadata": {}, "hash": "79a98c645428f32856ee2c51d3463a5a80a97d2896b1177bc765964aba392d47", "class_name": "RelatedNodeInfo"}}, "hash": "df7a4f95bf5708009883215ec4c55e0961e08e33a24af704c645f88a37b1fe68", "text": "Line 5-12 tells Express to respond to incoming GET requests on /get-client.Line 7 makes a call to the database to fetch a customer by name. If there is more than one customer with the same name, then the first one found will be returned.Line 9 tells Express to render the update template, replacing variables with the given values as it goes. Important to note here is that we are also replacing values in the hidden form fields we created earlier with the current values of the customer details. This is to ensure that we update or delete the correct customer.\n\nIn your index.html file, add the following code after the </form> tag:\n\nbr\n\n/>\n\nform\n\naction\n\n/get\n\nmethod\n\nGET\n\ninput\n\ntype\n\nsubmit\n\nvalue\n\nUpdate/Delete\n\n/>\n\n</\n\nform\n\nThis adds a new button that will make a GET request to /get, which will then return get.html.\n\nMake a new file called get.html with the following contents:\n\n<!\n\nDOCTYPE\n\nhtml\n\nhtml\n\nlang\n\nen\n\nbody\n\nform\n\naction\n\n/get-client\n\nmethod\n\nGET\n\nlabel\n\nfor\n\nname\n\nCustomer name *\n\n</\n\nlabel\n\nbr\n\n/>\n\ninput\n\ntype\n\ntext\n\nid\n\nname\n\nname\n\nname\n\nclass\n\ntextInput\n\nplaceholder\n\nJohn Smith\n\nrequired\n\n/>\n\ninput\n\ntype\n\nsubmit\n\nvalue\n\nGet customer\n\n/>\n\n</\n\nform\n\n</\n\nbody\n\n</\n\nhtml\n\nThis makes a simple form with an input for the customer's name and a button.\n\nClicking this button will make a GET request to /get-client, which will respond with the client details, and we will be able to update or delete them.\n\nTo see the customer details on a form after requesting them, we need a templating engine to render them onto the HTML page and send the rendered page back to us. With a templating engine, you define a template - a page with variables in it - and then give it the values you want to fill into the variables. In our case, we're going to request the customer details from the database and tell the templating engine to render them onto the page.\n\nWe're going to use a templating engine called Pug. Pug is a simple templating engine that integrates fully with Express. The syntax that Pug uses is very similar to HTML. One important difference in the syntax is that spacing is very important as it determines your parent/child hierarchy.\n\nFirst, we need to tell Express which templating engine to use and where to find our templates. Put the following line above your route definitions (i.e. after the other app.use lines in index.js):\n\napp\n\nengine\n\n\"pug\"\n\nrequire\n\n\"pug\"\n\n__express\n\napp\n\nset\n\n\"views\"\n\n\".\"\n\napp\n\nset\n\n\"view engine\"\n\n\"pug\"\n\nNow create a new file called update.pug with the following content:\n\nhtml body p #{message} h2= 'Customer details' form(method='POST'\n\naction='/update') input(type='hidden' id='oldname' name='oldname' value=oldname)\n\ninput(type='hidden' id='oldaddress' name='oldaddress' value=oldaddress)\n\ninput(type='hidden' id='oldtelephone' name='oldtelephone' value=oldtelephone)\n\ninput(type='hidden' id='oldnote' name='oldnote' value=oldnote) label(for='name')\n\nCustomer name: br input(type='text', placeholder='John Smith' name='name'\n\nvalue=name) br label(for='address') Customer address: br input(type='text',\n\nplaceholder='42 Wallaby Way, Sydney' name='address' value=address) br\n\nlabel(for='telephone') Customer telephone: br input(type='text',\n\nplaceholder='+275554202' name='telephone' value=telephone) br label(for='note')\n\nCustomer note: br input(type='text', placeholder='Likes unicorns' name='note'\n\nvalue=note) br button(type='submit' formaction=\"/update\") Update\n\nbutton(type='submit' formaction=\"/delete\") Delete\n\nThis is very similar to the HTML form we created previously for create.html, however this is written in the Pug templating language. We're creating a hidden element to store the \"old\" name, telephone, address, and note of the customer - this is for when we want to do an update.\n\nUsing the old details to update the customer is an easy solution, but not the best solution as it makes the query cumbersome and slow. If you add extra fields into your database, you would have to remember to update your query as well, otherwise it could lead to updating or deleting the wrong customer if they have the same information.", "start_char_idx": 7409, "end_char_idx": 11508, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dde41288-ebfa-4a97-93ab-40307387c8e0": {"__data__": {"id_": "dde41288-ebfa-4a97-93ab-40307387c8e0", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b923c13-c134-4471-830d-ea3de92df3e3", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "c096ed67fdfe9ef9d28d0092b6b5172d36a68e27e1538fbfc60265c59b41c2bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0a3875c9-3c62-479b-bb84-38b5152298f8", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "df7a4f95bf5708009883215ec4c55e0961e08e33a24af704c645f88a37b1fe68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89aff292-0ed8-4c4d-80a3-d53badafaebe", "node_type": "1", "metadata": {}, "hash": "217638fa1f82bc8ad69fece62db34548418116dd8a33575cf884f03315e58965", "class_name": "RelatedNodeInfo"}}, "hash": "79a98c645428f32856ee2c51d3463a5a80a97d2896b1177bc765964aba392d47", "text": "We're creating a hidden element to store the \"old\" name, telephone, address, and note of the customer - this is for when we want to do an update.\n\nUsing the old details to update the customer is an easy solution, but not the best solution as it makes the query cumbersome and slow. If you add extra fields into your database, you would have to remember to update your query as well, otherwise it could lead to updating or deleting the wrong customer if they have the same information. A better but more complicated way is to use the unique ID of the database document, as that will only ever refer to one customer.\n\nWe have also put in placeholder variables for name, address, telephone, and note, and we have given the form two buttons with different actions.\n\nIf you now run the code, you will have an index page with two buttons. Pressing the \"Update/Delete\" button will take you to a new page that asks for a customer name. If you fill in the customer name and press \"Get customer\", a page will load with the customer's details and two buttons below, \"Update\" and \"Delete\". Make sure you enter a customer name you have entered before.\n\nOur next step is to add the \"Update\" and \"Delete\" functionality. Add the following code below your routes in index.js:\n\napp\n\npost\n\n\"/update\"\n\nfunction\n\nreq\n\nres\n\nclient\n\nconnect\n\nerr\n\n=>\n\nif\n\nerr\n\nthrow\n\nerr\n\nlet\n\nquery\n\nname\n\nreq\n\nbody\n\noldname\n\naddress\n\nreq\n\nbody\n\noldaddress\n\ntelephone\n\nreq\n\nbody\n\noldtelephone\n\nnote\n\nreq\n\nbody\n\noldnote\n\nlet\n\nnewvalues\n\n$set\n\nname\n\nreq\n\nbody\n\nname\n\naddress\n\nreq\n\nbody\n\naddress\n\ntelephone\n\nreq\n\nbody\n\ntelephone\n\nnote\n\nreq\n\nbody\n\nnote\n\nclient\n\ndb\n\n\"crmdb\"\n\ncollection\n\n\"customers\"\n\nupdateOne\n\nquery\n\nnewvalues\n\nfunction\n\nerr\n\nresult\n\nif\n\nerr\n\nthrow\n\nerr\n\nconsole\n\nlog\n\n\"1 document updated\"\n\nres\n\nrender\n\n\"update\"\n\nmessage\n\n\"Customer updated!\"\n\noldname\n\nreq\n\nbody\n\nname\n\noldaddress\n\nreq\n\nbody\n\naddress\n\noldtelephone\n\nreq\n\nbody\n\ntelephone\n\noldnote\n\nreq\n\nbody\n\nnote\n\nname\n\nreq\n\nbody\n\nname\n\naddress\n\nreq\n\nbody\n\naddress\n\ntelephone\n\nreq\n\nbody\n\ntelephone\n\nnote\n\nreq\n\nbody\n\nnote\n\napp\n\npost\n\n\"/delete\"\n\nfunction\n\nreq\n\nres\n\nclient\n\nconnect\n\nerr\n\n=>\n\nif\n\nerr\n\nthrow\n\nerr\n\nlet\n\nquery\n\nname\n\nreq\n\nbody\n\nname\n\naddress\n\nreq\n\nbody\n\naddress\n\nreq\n\nbody\n\naddress\n\nnull\n\ntelephone\n\nreq\n\nbody\n\ntelephone\n\nreq\n\nbody\n\ntelephone\n\nnull\n\nnote\n\nreq\n\nbody\n\nnote\n\nreq\n\nbody\n\nnote\n\nnull\n\nclient\n\ndb\n\n\"crmdb\"\n\ncollection\n\n\"customers\"\n\ndeleteOne\n\nquery\n\nfunction\n\nerr\n\nobj\n\nif\n\nerr\n\nthrow\n\nerr\n\nconsole\n\nlog\n\n\"1 document deleted\"\n\nres\n\nsend\n\nCustomer\n\n${\n\nreq\n\nbody\n\nname\n\ndeleted\n\nThis introduces two new POST handlers - one for /update, and one for /delete.\n\nLine 2 connects to our MongoDB database.\n\nLine 3 throws an error if there was a problem connecting to the database.\n\nLine 4 defines a query that we will use to find the document to update. In this case, we'll use the details of the customer before it was updated. We saved this name earlier in a hidden field in the HTML. Trying to find the customer by its updated name obviously won't work, because it hasn't been updated yet. Also, note that we are setting some of the fields to null if they are empty. This is so that the database returns the correct document when we update or delete - if we search for a document that has no address with an address of '' (empty string), then our query won't return anything.\n\nLine 5 defines the new values that we want to update our customer with.\n\nLine 6 updates the customer with the new values using the query.\n\nLine 7 throws an error if there was a problem with the update.\n\nLine 8 logs that a document was updated.\n\nLine 9 re-renders the update page with a message saying that the customer was updated, and displays the new values.\n\nLine 15 connects to our MongoDB database.\n\nLine 16 throws an error if there was a problem connecting to the database.\n\nLine 17 defines a query that we will use to find the document to delete. In this case, we use all the details of the customer before any changes were made on the form to make sure we delete the correct customer.", "start_char_idx": 11024, "end_char_idx": 15035, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89aff292-0ed8-4c4d-80a3-d53badafaebe": {"__data__": {"id_": "89aff292-0ed8-4c4d-80a3-d53badafaebe", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "9b923c13-c134-4471-830d-ea3de92df3e3", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "c096ed67fdfe9ef9d28d0092b6b5172d36a68e27e1538fbfc60265c59b41c2bf", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "dde41288-ebfa-4a97-93ab-40307387c8e0", "node_type": "1", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}, "hash": "79a98c645428f32856ee2c51d3463a5a80a97d2896b1177bc765964aba392d47", "class_name": "RelatedNodeInfo"}}, "hash": "217638fa1f82bc8ad69fece62db34548418116dd8a33575cf884f03315e58965", "text": "This is so that the database returns the correct document when we update or delete - if we search for a document that has no address with an address of '' (empty string), then our query won't return anything.\n\nLine 5 defines the new values that we want to update our customer with.\n\nLine 6 updates the customer with the new values using the query.\n\nLine 7 throws an error if there was a problem with the update.\n\nLine 8 logs that a document was updated.\n\nLine 9 re-renders the update page with a message saying that the customer was updated, and displays the new values.\n\nLine 15 connects to our MongoDB database.\n\nLine 16 throws an error if there was a problem connecting to the database.\n\nLine 17 defines a query that we will use to find the document to delete. In this case, we use all the details of the customer before any changes were made on the form to make sure we delete the correct customer.\n\nIn Line 18, we connect to the database and delete the customer.\n\nLine 19 throws an error if there was a problem with the delete.\n\nLine 20 logs that a document was deleted.\n\nLine 21 sends a response to say that the customer was deleted.\n\nPutting it all together\u200b\n\nIf you run your application now, you'll be able to create, update, and delete documents in a MongoDB database. This is a very basic CRUD application, with a very basic and unstyled UI, but it should give you the foundation to build much more sophisticated applications.\n\nSome ideas for this are:\n\nYou could add fields to the database to classify customers according to which stage they are in your sales pipeline so that you can track if a customer is potentially stuck somewhere and contact them to re-engage.\n\nYou could integrate some basic marketing automation with a page allowing you to send an email or SMS to customers (though don't spam clients!).\n\nYou could also add fields to keep track of customer purchasing information so that you can see which products do well with which customers.\n\nIf you want to start from where this tutorial leaves off, fork the repl at https://replit.com/@ritza/replcrm. To get additional guidance, reach out to the Replit community for assistance.\n\n< Previous: Building a Discord bot with Node.js and Replit\n\nNext: GraphQL Part 1: Setting up endpoints >\n\nWas this helpful?\n\nLast updated on Oct 25, 2023\n\nSetting up\n\nCreating a cluster\n\nCreating a repl and connecting to the database\n\nMaking a user interface to insert customer data\n\nUpdating and deleting database entries\n\nPutting it all together", "start_char_idx": 14133, "end_char_idx": 16634, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"9b923c13-c134-4471-830d-ea3de92df3e3": {"node_ids": ["aa8ebb0d-bb2f-4315-aa7f-37049905f77c", "3b3e7fcb-1ac4-40b9-bfdc-eeeab593d452", "0a3875c9-3c62-479b-bb84-38b5152298f8", "dde41288-ebfa-4a97-93ab-40307387c8e0", "89aff292-0ed8-4c4d-80a3-d53badafaebe"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/nodejs/build-crm-app-mongodb-nodejs.html"}}}, "docstore/metadata": {"aa8ebb0d-bb2f-4315-aa7f-37049905f77c": {"doc_hash": "ec0d38456a64642cc6db8c49e464594507dcb3173642803f3257c115e7abd17c", "ref_doc_id": "9b923c13-c134-4471-830d-ea3de92df3e3"}, "3b3e7fcb-1ac4-40b9-bfdc-eeeab593d452": {"doc_hash": "039bc29cdd859f42f5112202d32d9493553794e42fd3f9618a73b1877840bff5", "ref_doc_id": "9b923c13-c134-4471-830d-ea3de92df3e3"}, "0a3875c9-3c62-479b-bb84-38b5152298f8": {"doc_hash": "df7a4f95bf5708009883215ec4c55e0961e08e33a24af704c645f88a37b1fe68", "ref_doc_id": "9b923c13-c134-4471-830d-ea3de92df3e3"}, "dde41288-ebfa-4a97-93ab-40307387c8e0": {"doc_hash": "79a98c645428f32856ee2c51d3463a5a80a97d2896b1177bc765964aba392d47", "ref_doc_id": "9b923c13-c134-4471-830d-ea3de92df3e3"}, "89aff292-0ed8-4c4d-80a3-d53badafaebe": {"doc_hash": "217638fa1f82bc8ad69fece62db34548418116dd8a33575cf884f03315e58965", "ref_doc_id": "9b923c13-c134-4471-830d-ea3de92df3e3"}}}