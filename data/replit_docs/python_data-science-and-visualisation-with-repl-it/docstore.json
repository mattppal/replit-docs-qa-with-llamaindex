{"docstore/data": {"cd943d38-2a0f-4388-8419-25deb473779c": {"__data__": {"id_": "cd943d38-2a0f-4388-8419-25deb473779c", "embedding": null, "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/data-science-and-visualisation-with-repl-it.html"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "239d682f-0f0d-4327-bdd0-21839593fa2f", "node_type": "4", "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/data-science-and-visualisation-with-repl-it.html"}, "hash": "71cc5b9c2346144584675bff453b12bb0c52fbc145a3f6fbcc8a4ee97742754a", "class_name": "RelatedNodeInfo"}}, "hash": "2ac6371bee171b171dc9cc6b43ee63977d5f84cfb1c96caa0ee8ea48b11abef7", "text": "for\n\nline\n\nin\n\nenumerate\n\nstate\n\nlat\n\nlon\n\nline\n\nsplit\n\nlats\n\nappend\n\nfloat\n\nlat\n\nlons\n\nappend\n\nfloat\n\nlon\n\n# we assign each state a random colour, but once we've picked\n\n# a colour we always use it for all cities in that state.\n\nif\n\nstate\n\nnot\n\nin\n\nstate_colors\n\nstate_colors\n\nstate\n\nrandom\n\nchoice\n\nall_colors\n\ncolors\n\nappend\n\nstate_colors\n\nstate\n\nplt\n\nscatter\n\nlons\n\nlats\n\ncolors\n\nplt\n\nshow\n\nIf you run this, you'll notice it takes a little bit longer than the six point plot we created before, as it now has to plot nearly 30 000 data points. Once it's done, you should see something similar to the following (though, as the colours were chosen randomly, yours might look different).\n\nYou'll also notice that while it's recognisable as the US, the proportions are not right. Mapping a 3D sphere to a 2D plane is surprisingly difficult and there are many different ways of doing it.\n\nMore advanced plotting with seaborn and pandas\u200b\n\nPlotting X-Y points is a good start, but in most cases you'll want to do a little bit more. seaborn is a plotting library built on top of Matplotlib that makes it easier to create good-looking visualisations.\n\nLet's do another scatter plot based on GDP and life expectancy data to see if people live longer in richer countries.\n\npandas for reading the CSV file but import it as\n\nNumPy for calculating the correlation but import it as\n\nimport\n\nrequests\n\nimport\n\nseaborn\n\nas\n\nsns\n\nimport\n\npandas\n\nas\n\npd\n\nfrom\n\nmatplotlib\n\nimport\n\npyplot\n\nas\n\nplt\n\nimport\n\nnumpy\n\nas\n\nnp\n\ndata_url\n\n\"https://raw.githubusercontent.com/ritza-co/datasets/master/gdp_data.csv\"\n\nrequests\n\nget\n\ndata_url\n\nwith\n\nopen\n\n\"gdp-life.txt\"\n\n\"w\"\n\nas\n\nwrite\n\ntext\n\ndf\n\npd\n\nread_csv\n\n\"gdp-life.txt\"\n\nprint\n\ndf\n\nhead\n\nprint\n\n\"___\"\n\nprint\n\n\"The correlation is: \"\n\nnp\n\ncorrcoef\n\ndf\n\n'gdpPercap'\n\ndf\n\n'lifeExp'\n\nprint\n\n\"___\"\n\nsns\n\nlmplot\n\n\"gdpPercap\"\n\n\"lifeExp\"\n\ndf\n\nset_axis_labels\n\n\"GDP per capita\"\n\n\"Life expectancy\"\n\nplt\n\ntitle\n\n\"Countries with a higher GDP have higher life expectancy\"\n\nplt\n\ntight_layout\n\nplt\n\nshow\n\nIf you run this, you'll see it plots each country in a similar way to our previous scatter plot, but also adds a line showing the correlation.\n\nIn the output pane below you can also see that the correlation coefficient between the two variables is 0.67 which is a fairly strong positive correlation.\n\nData science and data visualisation are huge topics, and there are dozens of Python libraries that can be used to plot data. For a good overview of all of them and their strengths and weaknesses, you should watch Jake Vanderplas's talk.\n\nSaving plots to PNG files\u200b\n\nWhile visualising data right after you analyse it is often useful, sometimes you need to save the figures to embed into reports. You can save your graphs by calling plt.savefig(). Change the last line (plt.show()) to\n\nplt\n\nsavefig\n\n\"GDPlife.png\"\n\nRerun the code. Instead of seeing the plot appear in the right-hand pane, you'll see a new file in the files pane. Clicking on it will show you the PNG file in the editing pane.\n\nMake it your own\u200b\n\nIf you followed along, you'll already have your own version of the repl to extend. If not, start from ours. Fork it from the embed below.\n\nWhere next?\u200b\n\nYou've learned how to make some basic plots using Python and Replit. There are millions of freely available data sets on the internet, waiting for people to explore them. You can find many of these using Google's Dataset Search service. Pick a topic that you're interested in and try to find out more about it through data visualisations.\n\nNext up, we'll explore the multiplayer functionality of Replit in more detail so that you can code collaboratively with friends or colleagues.\n\n< Previous: Creating interactive Python plots with matplotlib\n\nNext: Discord role assignment bot with Python >\n\nWas this helpful?\n\nLast updated on Aug 31, 2023\n\nInstalling Matplotlib and creating a basic line plot\n\nMaking a scatter plot of US cities by state\n\nMore advanced plotting with seaborn and pandas\n\nSaving plots to PNG files\n\nMake it your own\n\nWhere next?", "start_char_idx": 0, "end_char_idx": 4030, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"239d682f-0f0d-4327-bdd0-21839593fa2f": {"node_ids": ["cd943d38-2a0f-4388-8419-25deb473779c"], "metadata": {"path": "/home/runner/replit-docs-qa-with-llamaindex/docs.replit.com/tutorials/python/data-science-and-visualisation-with-repl-it.html"}}}, "docstore/metadata": {"cd943d38-2a0f-4388-8419-25deb473779c": {"doc_hash": "2ac6371bee171b171dc9cc6b43ee63977d5f84cfb1c96caa0ee8ea48b11abef7", "ref_doc_id": "239d682f-0f0d-4327-bdd0-21839593fa2f"}}}